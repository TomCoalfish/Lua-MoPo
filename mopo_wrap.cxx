/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CircularQueueT_mopo_float_t swig_types[0]
#define SWIGTYPE_p_VoiceEvent swig_types[1]
#define SWIGTYPE_p_double swig_types[2]
#define SWIGTYPE_p_float swig_types[3]
#define SWIGTYPE_p_int swig_types[4]
#define SWIGTYPE_p_mopo__Add swig_types[5]
#define SWIGTYPE_p_mopo__Alias swig_types[6]
#define SWIGTYPE_p_mopo__Arpeggiator swig_types[7]
#define SWIGTYPE_p_mopo__BilinearInterpolate swig_types[8]
#define SWIGTYPE_p_mopo__BiquadFilter swig_types[9]
#define SWIGTYPE_p_mopo__BitCrush swig_types[10]
#define SWIGTYPE_p_mopo__Bypass swig_types[11]
#define SWIGTYPE_p_mopo__BypassRouter swig_types[12]
#define SWIGTYPE_p_mopo__CircularQueueT_double_t swig_types[13]
#define SWIGTYPE_p_mopo__Clamp swig_types[14]
#define SWIGTYPE_p_mopo__Delay swig_types[15]
#define SWIGTYPE_p_mopo__Distortion swig_types[16]
#define SWIGTYPE_p_mopo__Envelope swig_types[17]
#define SWIGTYPE_p_mopo__ExponentialScale swig_types[18]
#define SWIGTYPE_p_mopo__Feedback swig_types[19]
#define SWIGTYPE_p_mopo__FormantManager swig_types[20]
#define SWIGTYPE_p_mopo__FrequencyToPhase swig_types[21]
#define SWIGTYPE_p_mopo__FrequencyToSamples swig_types[22]
#define SWIGTYPE_p_mopo__Input swig_types[23]
#define SWIGTYPE_p_mopo__Interpolate swig_types[24]
#define SWIGTYPE_p_mopo__Inverse swig_types[25]
#define SWIGTYPE_p_mopo__LegatoFilter swig_types[26]
#define SWIGTYPE_p_mopo__LinearScale swig_types[27]
#define SWIGTYPE_p_mopo__LinearSlope swig_types[28]
#define SWIGTYPE_p_mopo__LinearSmoothBuffer swig_types[29]
#define SWIGTYPE_p_mopo__MagnitudeLookup swig_types[30]
#define SWIGTYPE_p_mopo__MagnitudeLookupSingleton swig_types[31]
#define SWIGTYPE_p_mopo__MagnitudeScale swig_types[32]
#define SWIGTYPE_p_mopo__Memory swig_types[33]
#define SWIGTYPE_p_mopo__MidiLookup swig_types[34]
#define SWIGTYPE_p_mopo__MidiLookupSingleton swig_types[35]
#define SWIGTYPE_p_mopo__MidiScale swig_types[36]
#define SWIGTYPE_p_mopo__MonoPanner swig_types[37]
#define SWIGTYPE_p_mopo__Multiply swig_types[38]
#define SWIGTYPE_p_mopo__Negate swig_types[39]
#define SWIGTYPE_p_mopo__NoteHandler swig_types[40]
#define SWIGTYPE_p_mopo__Operator swig_types[41]
#define SWIGTYPE_p_mopo__Oscillator swig_types[42]
#define SWIGTYPE_p_mopo__Output swig_types[43]
#define SWIGTYPE_p_mopo__PortamentoFilter swig_types[44]
#define SWIGTYPE_p_mopo__PortamentoSlope swig_types[45]
#define SWIGTYPE_p_mopo__Processor swig_types[46]
#define SWIGTYPE_p_mopo__ProcessorRouter swig_types[47]
#define SWIGTYPE_p_mopo__ResonanceLookup swig_types[48]
#define SWIGTYPE_p_mopo__ResonanceLookupSingleton swig_types[49]
#define SWIGTYPE_p_mopo__ResonanceScale swig_types[50]
#define SWIGTYPE_p_mopo__Reverb swig_types[51]
#define SWIGTYPE_p_mopo__ReverbAllPass swig_types[52]
#define SWIGTYPE_p_mopo__ReverbComb swig_types[53]
#define SWIGTYPE_p_mopo__SampleAndHoldBuffer swig_types[54]
#define SWIGTYPE_p_mopo__SimpleDelay swig_types[55]
#define SWIGTYPE_p_mopo__SmoothFilter swig_types[56]
#define SWIGTYPE_p_mopo__SmoothValue swig_types[57]
#define SWIGTYPE_p_mopo__Square swig_types[58]
#define SWIGTYPE_p_mopo__StateVariableFilter swig_types[59]
#define SWIGTYPE_p_mopo__StepGenerator swig_types[60]
#define SWIGTYPE_p_mopo__Stutter swig_types[61]
#define SWIGTYPE_p_mopo__Subtract swig_types[62]
#define SWIGTYPE_p_mopo__TickRouter swig_types[63]
#define SWIGTYPE_p_mopo__TimeToSamples swig_types[64]
#define SWIGTYPE_p_mopo__TriggerCombiner swig_types[65]
#define SWIGTYPE_p_mopo__TriggerEquals swig_types[66]
#define SWIGTYPE_p_mopo__TriggerFilter swig_types[67]
#define SWIGTYPE_p_mopo__TriggerNonZero swig_types[68]
#define SWIGTYPE_p_mopo__TriggerWait swig_types[69]
#define SWIGTYPE_p_mopo__Value swig_types[70]
#define SWIGTYPE_p_mopo__VariableAdd swig_types[71]
#define SWIGTYPE_p_mopo__Voice swig_types[72]
#define SWIGTYPE_p_mopo__VoiceHandler swig_types[73]
#define SWIGTYPE_p_mopo__VoiceState swig_types[74]
#define SWIGTYPE_p_mopo__Wave swig_types[75]
#define SWIGTYPE_p_mopo__WaveLookup swig_types[76]
#define SWIGTYPE_p_mopo__cr__Add swig_types[77]
#define SWIGTYPE_p_mopo__cr__Bypass swig_types[78]
#define SWIGTYPE_p_mopo__cr__Clamp swig_types[79]
#define SWIGTYPE_p_mopo__cr__ExponentialScale swig_types[80]
#define SWIGTYPE_p_mopo__cr__Feedback swig_types[81]
#define SWIGTYPE_p_mopo__cr__FrequencyToPhase swig_types[82]
#define SWIGTYPE_p_mopo__cr__FrequencyToSamples swig_types[83]
#define SWIGTYPE_p_mopo__cr__Interpolate swig_types[84]
#define SWIGTYPE_p_mopo__cr__LowerBound swig_types[85]
#define SWIGTYPE_p_mopo__cr__MagnitudeScale swig_types[86]
#define SWIGTYPE_p_mopo__cr__MidiScale swig_types[87]
#define SWIGTYPE_p_mopo__cr__Multiply swig_types[88]
#define SWIGTYPE_p_mopo__cr__Output swig_types[89]
#define SWIGTYPE_p_mopo__cr__Quadratic swig_types[90]
#define SWIGTYPE_p_mopo__cr__ResonanceScale swig_types[91]
#define SWIGTYPE_p_mopo__cr__Root swig_types[92]
#define SWIGTYPE_p_mopo__cr__SmoothFilter swig_types[93]
#define SWIGTYPE_p_mopo__cr__SmoothValue swig_types[94]
#define SWIGTYPE_p_mopo__cr__Square swig_types[95]
#define SWIGTYPE_p_mopo__cr__TimeToSamples swig_types[96]
#define SWIGTYPE_p_mopo__cr__UpperBound swig_types[97]
#define SWIGTYPE_p_mopo__cr__Value swig_types[98]
#define SWIGTYPE_p_mopo__cr__VariableAdd swig_types[99]
#define SWIGTYPE_p_mopo_float swig_types[100]
#define SWIGTYPE_p_std__complexT_double_t swig_types[101]
#define SWIGTYPE_p_std__complexT_mopo_float_t swig_types[102]
#define SWIGTYPE_p_std__pairT_mopo_float_mopo_float_t swig_types[103]
static swig_type_info *swig_types[105];
static swig_module_info swig_module = {swig_types, 104, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "mopo"
#define SWIG_init      luaopen_mopo
#define SWIG_init_user luaopen_mopo_user

#define SWIG_LUACODE   luaopen_mopo_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "mopo.h"
using namespace mopo;


    void setSampleRate(mopo::Processor* p, int sample_rate) { p->setSampleRate(sample_rate); }
    void setBufferSize(mopo::Processor* p, int buffer_size) { p->setBufferSize(buffer_size); }
    void setControlRate(mopo::Processor* p, bool control_rate) { p->setControlRate(control_rate); }
    bool isEnabled(mopo::Processor *p) { return p->enabled(); }
    void enable(mopo::Processor * p, bool e) { p->enable(e); }
    int getSampleRate(mopo::Processor * p) { return p->getSampleRate(); }
    int getBufferSize(mopo::Processor * p) { return p->getBufferSize(); }
    int getSamplesToProcess(mopo::Processor * p) { return p->getSamplesToProcess(); }
    bool isControlRate(mopo::Processor * p) { return p->isControlRate(); }
    bool inputMatchesBufferSize(mopo::Processor * p, int input=0) { return p->inputMatchesBufferSize(input); }
    bool isPolyphonic(mopo::Processor * p) { return p->isPolyphonic(); }
    void plug(mopo::Processor * p, mopo::Output * o) { p->plug(o); }
    void plug(mopo::Processor * p, mopo::Output * o, unsigned int index) { p->plug(o,index); }
    void plug(mopo::Processor * p, mopo::Processor * o) { p->plug(o); }
    void plug(mopo::Processor * p, mopo::Processor * o, unsigned int index) { p->plug(o,index); }
    void plugNext(mopo::Processor * p, mopo::Output * o) { p->plugNext(o); }
    void plugNext(mopo::Processor * p, mopo::Processor * o) { p->plugNext(o); }
    int  getConnectedInputs(mopo::Processor * p) { return p->connectedInputs(); }
    void unplugIndex(mopo::Processor * p, unsigned index) { p->unplugIndex(index); }
    void unplug(mopo::Processor * p, mopo::Output * o) { p->unplug(o); }
    void unplug(mopo::Processor * p, mopo::Processor * o) { p->unplug(o); }
    mopo::ProcessorRouter* getRouter(mopo::Processor * p) { return p->router(); }
    void setRouter(mopo::Processor * p, mopo::ProcessorRouter* r) { p->router(r); }
    mopo::ProcessorRouter* getTopLevelRouter(mopo::Processor * p) { return p->getTopLevelRouter(); }
    void registerInput(mopo::Processor * p, mopo::Input * i, int index) { p->registerInput(i,index); }
    mopo::Output* registerOutput(mopo::Processor * p, mopo::Output * output, int index) {return p->registerOutput(output, index); }
    void registerInput(mopo::Processor * p, mopo::Input * i) { p->registerInput(i); }
    mopo::Output* registerOutput(mopo::Processor * p, mopo::Output * output) {return p->registerOutput(output); }
    int getNumInputs(mopo::Processor * p) { return p->numInputs(); }
    int getNumOutputs(mopo::Processor * p) { return p->numOutputs(); }
    float getInputSample(mopo::Processor * p, int input, int sample) { return p->getInputSample(input,sample); }
    void  writeOutputSample(mopo::Processor * p, int output, int sample, float value) { return p->writeOutputSample(output,sample,value); }
    mopo::Input* getInput(mopo::Processor * p,unsigned int index=0) { return p->input(index); }
    mopo::Output* getOutput(mopo::Processor * p,unsigned int index=0) { return p->output(index); }

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_Output__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::Output::Output",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Output::Output",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (mopo::Output *)new mopo::Output(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Output__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::Output::Output",0,0)
  result = (mopo::Output *)new mopo::Output();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Output(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Output__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Output__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Output'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Output::Output(int)\n"
    "    mopo::Output::Output()\n");
  lua_error(L);return 0;
}


static int _wrap_Output_trigger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  mopo_float arg2 ;
  int arg3 ;
  mopo_float *argp2 ;
  
  SWIG_check_num_args("mopo::Output::trigger",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::trigger",1,"mopo::Output *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::Output::trigger",2,"mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Output::trigger",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_trigger",1,SWIGTYPE_p_mopo__Output);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Output_trigger",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->trigger(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_trigger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  mopo_float arg2 ;
  mopo_float *argp2 ;
  
  SWIG_check_num_args("mopo::Output::trigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::trigger",1,"mopo::Output *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::Output::trigger",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_trigger",1,SWIGTYPE_p_mopo__Output);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Output_trigger",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  (arg1)->trigger(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_trigger(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Output_trigger__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Output_trigger__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Output_trigger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Output::trigger(mopo_float,int)\n"
    "    mopo::Output::trigger(mopo_float)\n");
  lua_error(L);return 0;
}


static int _wrap_Output_clearTrigger(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  
  SWIG_check_num_args("mopo::Output::clearTrigger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::clearTrigger",1,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_clearTrigger",1,SWIGTYPE_p_mopo__Output);
  }
  
  (arg1)->clearTrigger();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_clearBuffer(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  
  SWIG_check_num_args("mopo::Output::clearBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::clearBuffer",1,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_clearBuffer",1,SWIGTYPE_p_mopo__Output);
  }
  
  (arg1)->clearBuffer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  mopo_float *arg2 = (mopo_float *) 0 ;
  
  SWIG_check_num_args("mopo::Output::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::buffer",1,"mopo::Output *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Output::buffer",2,"mopo_float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_buffer_set",1,SWIGTYPE_p_mopo__Output);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Output_buffer_set",2,SWIGTYPE_p_mopo_float);
  }
  
  if (arg1) (arg1)->buffer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  mopo_float *result = 0 ;
  
  SWIG_check_num_args("mopo::Output::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::buffer",1,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_buffer_get",1,SWIGTYPE_p_mopo__Output);
  }
  
  result = (mopo_float *) ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_owner_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::Output::owner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::owner",1,"mopo::Output *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Output::owner",2,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_owner_set",1,SWIGTYPE_p_mopo__Output);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Output_owner_set",2,SWIGTYPE_p_mopo__Processor);
  }
  
  if (arg1) (arg1)->owner = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_owner_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Output::owner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::owner",1,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_owner_get",1,SWIGTYPE_p_mopo__Output);
  }
  
  result = (mopo::Processor *) ((arg1)->owner);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_buffer_size_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Output::buffer_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::buffer_size",1,"mopo::Output *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Output::buffer_size",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_buffer_size_set",1,SWIGTYPE_p_mopo__Output);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->buffer_size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_buffer_size_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::Output::buffer_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::buffer_size",1,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_buffer_size_get",1,SWIGTYPE_p_mopo__Output);
  }
  
  result = (int) ((arg1)->buffer_size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_triggered_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("mopo::Output::triggered",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::triggered",1,"mopo::Output *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("mopo::Output::triggered",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_triggered_set",1,SWIGTYPE_p_mopo__Output);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->triggered = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_triggered_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  bool result;
  
  SWIG_check_num_args("mopo::Output::triggered",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::triggered",1,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_triggered_get",1,SWIGTYPE_p_mopo__Output);
  }
  
  result = (bool) ((arg1)->triggered);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_trigger_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Output::trigger_offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::trigger_offset",1,"mopo::Output *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Output::trigger_offset",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_trigger_offset_set",1,SWIGTYPE_p_mopo__Output);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->trigger_offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_trigger_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::Output::trigger_offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::trigger_offset",1,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_trigger_offset_get",1,SWIGTYPE_p_mopo__Output);
  }
  
  result = (int) ((arg1)->trigger_offset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_trigger_value_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  mopo_float arg2 ;
  mopo_float *argp2 ;
  
  SWIG_check_num_args("mopo::Output::trigger_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::trigger_value",1,"mopo::Output *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::Output::trigger_value",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_trigger_value_set",1,SWIGTYPE_p_mopo__Output);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Output_trigger_value_set",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->trigger_value = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Output_trigger_value_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Output *arg1 = (mopo::Output *) 0 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::Output::trigger_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Output::trigger_value",1,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Output_trigger_value_get",1,SWIGTYPE_p_mopo__Output);
  }
  
  result =  ((arg1)->trigger_value);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Output(void *obj) {
mopo::Output *arg1 = (mopo::Output *) obj;
delete arg1;
}
static int _proxy__wrap_new_Output(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Output);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Output_attributes[] = {
    { "buffer", _wrap_Output_buffer_get, _wrap_Output_buffer_set },
    { "owner", _wrap_Output_owner_get, _wrap_Output_owner_set },
    { "buffer_size", _wrap_Output_buffer_size_get, _wrap_Output_buffer_size_set },
    { "triggered", _wrap_Output_triggered_get, _wrap_Output_triggered_set },
    { "trigger_offset", _wrap_Output_trigger_offset_get, _wrap_Output_trigger_offset_set },
    { "trigger_value", _wrap_Output_trigger_value_get, _wrap_Output_trigger_value_set },
    {0,0,0}
};
static swig_lua_method swig_Output_methods[]= {
    { "trigger", _wrap_Output_trigger},
    { "clearTrigger", _wrap_Output_clearTrigger},
    { "clearBuffer", _wrap_Output_clearBuffer},
    {0,0}
};
static swig_lua_method swig_Output_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Output_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Output_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Output_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Output_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Output_Sf_SwigStatic = {
    "Output",
    swig_Output_Sf_SwigStatic_methods,
    swig_Output_Sf_SwigStatic_attributes,
    swig_Output_Sf_SwigStatic_constants,
    swig_Output_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Output_bases[] = {0};
static const char *swig_Output_base_names[] = {0};
static swig_lua_class _wrap_class_Output = { "Output", "Output", &SWIGTYPE_p_mopo__Output,_proxy__wrap_new_Output, swig_delete_Output, swig_Output_methods, swig_Output_attributes, &swig_Output_Sf_SwigStatic, swig_Output_meta, swig_Output_bases, swig_Output_base_names };

static int _wrap_new_Input(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Input *result = 0 ;
  
  SWIG_check_num_args("mopo::Input::Input",0,0)
  result = (mopo::Input *)new mopo::Input();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Input,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Input_source_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Input *arg1 = (mopo::Input *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  
  SWIG_check_num_args("mopo::Input::source",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Input::source",1,"mopo::Input *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Input::source",2,"mopo::Output const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Input,0))){
    SWIG_fail_ptr("Input_source_set",1,SWIGTYPE_p_mopo__Input);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Input_source_set",2,SWIGTYPE_p_mopo__Output);
  }
  
  if (arg1) (arg1)->source = (mopo::Output const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Input_source_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Input *arg1 = (mopo::Input *) 0 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::Input::source",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Input::source",1,"mopo::Input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Input,0))){
    SWIG_fail_ptr("Input_source_get",1,SWIGTYPE_p_mopo__Input);
  }
  
  result = (mopo::Output *) ((arg1)->source);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Input_at(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Input *arg1 = (mopo::Input *) 0 ;
  int arg2 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::Input::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Input::at",1,"mopo::Input const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Input::at",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Input,0))){
    SWIG_fail_ptr("Input_at",1,SWIGTYPE_p_mopo__Input);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((mopo::Input const *)arg1)->at(arg2);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Input(void *obj) {
mopo::Input *arg1 = (mopo::Input *) obj;
delete arg1;
}
static int _proxy__wrap_new_Input(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Input);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Input_attributes[] = {
    { "source", _wrap_Input_source_get, _wrap_Input_source_set },
    {0,0,0}
};
static swig_lua_method swig_Input_methods[]= {
    { "at", _wrap_Input_at},
    {0,0}
};
static swig_lua_method swig_Input_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Input_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Input_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Input_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Input_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Input_Sf_SwigStatic = {
    "Input",
    swig_Input_Sf_SwigStatic_methods,
    swig_Input_Sf_SwigStatic_attributes,
    swig_Input_Sf_SwigStatic_constants,
    swig_Input_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Input_bases[] = {0};
static const char *swig_Input_base_names[] = {0};
static swig_lua_class _wrap_class_Input = { "Input", "Input", &SWIGTYPE_p_mopo__Input,_proxy__wrap_new_Input, swig_delete_Input, swig_Input_methods, swig_Input_attributes, &swig_Input_Sf_SwigStatic, swig_Input_meta, swig_Input_bases, swig_Input_base_names };

static int _wrap_Processor_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Processor::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::clone",1,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_clone",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (mopo::Processor *)((mopo::Processor const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_destroy(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::Processor::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::destroy",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_destroy",1,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::Processor::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::process",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_process",1,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_setSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Processor::setSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::setSampleRate",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Processor::setSampleRate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_setSampleRate",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_setBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Processor::setBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::setBufferSize",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Processor::setBufferSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_setBufferSize",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setBufferSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_setControlRate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("mopo::Processor::setControlRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::setControlRate",1,"mopo::Processor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("mopo::Processor::setControlRate",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_setControlRate",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setControlRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_setControlRate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::Processor::setControlRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::setControlRate",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_setControlRate",1,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->setControlRate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_setControlRate(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Processor_setControlRate__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Processor_setControlRate__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Processor_setControlRate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Processor::setControlRate(bool)\n"
    "    mopo::Processor::setControlRate()\n");
  lua_error(L);return 0;
}


static int _wrap_Processor_enabled(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  bool result;
  
  SWIG_check_num_args("mopo::Processor::enabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::enabled",1,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_enabled",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (bool)((mopo::Processor const *)arg1)->enabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_enable(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("mopo::Processor::enable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::enable",1,"mopo::Processor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("mopo::Processor::enable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_enable",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_getSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::Processor::getSampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::getSampleRate",1,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_getSampleRate",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (int)((mopo::Processor const *)arg1)->getSampleRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_getBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::Processor::getBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::getBufferSize",1,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_getBufferSize",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (int)((mopo::Processor const *)arg1)->getBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_getSamplesToProcess(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::Processor::getSamplesToProcess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::getSamplesToProcess",1,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_getSamplesToProcess",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (int)((mopo::Processor const *)arg1)->getSamplesToProcess();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_isControlRate(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  bool result;
  
  SWIG_check_num_args("mopo::Processor::isControlRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::isControlRate",1,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_isControlRate",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (bool)((mopo::Processor const *)arg1)->isControlRate();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_inputMatchesBufferSize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("mopo::Processor::inputMatchesBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::inputMatchesBufferSize",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Processor::inputMatchesBufferSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_inputMatchesBufferSize",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->inputMatchesBufferSize(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_inputMatchesBufferSize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  bool result;
  
  SWIG_check_num_args("mopo::Processor::inputMatchesBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::inputMatchesBufferSize",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_inputMatchesBufferSize",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (bool)(arg1)->inputMatchesBufferSize();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_inputMatchesBufferSize(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Processor_inputMatchesBufferSize__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Processor_inputMatchesBufferSize__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Processor_inputMatchesBufferSize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Processor::inputMatchesBufferSize(int)\n"
    "    mopo::Processor::inputMatchesBufferSize()\n");
  lua_error(L);return 0;
}


static int _wrap_Processor_isPolyphonic(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  bool result;
  
  SWIG_check_num_args("mopo::Processor::isPolyphonic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::isPolyphonic",1,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_isPolyphonic",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (bool)((mopo::Processor const *)arg1)->isPolyphonic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_plug__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  
  SWIG_check_num_args("mopo::Processor::plug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::plug",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Processor::plug",2,"mopo::Output const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_plug",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Processor_plug",2,SWIGTYPE_p_mopo__Output);
  }
  
  (arg1)->plug((mopo::Output const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_plug__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("mopo::Processor::plug",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::plug",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Processor::plug",2,"mopo::Output const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Processor::plug",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_plug",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Processor_plug",2,SWIGTYPE_p_mopo__Output);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->plug((mopo::Output const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_plug__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::Processor::plug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::plug",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Processor::plug",2,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_plug",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_plug",2,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->plug((mopo::Processor const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_plug__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("mopo::Processor::plug",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::plug",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Processor::plug",2,"mopo::Processor const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Processor::plug",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_plug",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_plug",2,SWIGTYPE_p_mopo__Processor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->plug((mopo::Processor const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_plug(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Processor_plug__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Processor_plug__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Processor_plug__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Processor_plug__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Processor_plug'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Processor::plug(mopo::Output const *)\n"
    "    mopo::Processor::plug(mopo::Output const *,unsigned int)\n"
    "    mopo::Processor::plug(mopo::Processor const *)\n"
    "    mopo::Processor::plug(mopo::Processor const *,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_Processor_plugNext__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  
  SWIG_check_num_args("mopo::Processor::plugNext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::plugNext",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Processor::plugNext",2,"mopo::Output const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_plugNext",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Processor_plugNext",2,SWIGTYPE_p_mopo__Output);
  }
  
  (arg1)->plugNext((mopo::Output const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_plugNext__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::Processor::plugNext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::plugNext",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Processor::plugNext",2,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_plugNext",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_plugNext",2,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->plugNext((mopo::Processor const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_plugNext(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Processor_plugNext__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Processor_plugNext__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Processor_plugNext'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Processor::plugNext(mopo::Output const *)\n"
    "    mopo::Processor::plugNext(mopo::Processor const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Processor_connectedInputs(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::Processor::connectedInputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::connectedInputs",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_connectedInputs",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (int)(arg1)->connectedInputs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_unplugIndex(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("mopo::Processor::unplugIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::unplugIndex",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Processor::unplugIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_unplugIndex",1,SWIGTYPE_p_mopo__Processor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->unplugIndex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_unplug__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  
  SWIG_check_num_args("mopo::Processor::unplug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::unplug",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Processor::unplug",2,"mopo::Output const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_unplug",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Processor_unplug",2,SWIGTYPE_p_mopo__Output);
  }
  
  (arg1)->unplug((mopo::Output const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_unplug__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::Processor::unplug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::unplug",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Processor::unplug",2,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_unplug",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_unplug",2,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->unplug((mopo::Processor const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_unplug(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Processor_unplug__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Processor_unplug__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Processor_unplug'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Processor::unplug(mopo::Output const *)\n"
    "    mopo::Processor::unplug(mopo::Processor const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Processor_router__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::ProcessorRouter *arg2 = (mopo::ProcessorRouter *) 0 ;
  
  SWIG_check_num_args("mopo::Processor::router",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::router",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Processor::router",2,"mopo::ProcessorRouter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_router",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("Processor_router",2,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  (arg1)->router(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_router__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::ProcessorRouter *result = 0 ;
  
  SWIG_check_num_args("mopo::Processor::router",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::router",1,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_router",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (mopo::ProcessorRouter *)((mopo::Processor const *)arg1)->router();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ProcessorRouter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_router(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Processor_router__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__ProcessorRouter, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Processor_router__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Processor_router'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Processor::router(mopo::ProcessorRouter *)\n"
    "    mopo::Processor::router() const\n");
  lua_error(L);return 0;
}


static int _wrap_Processor_getTopLevelRouter(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::ProcessorRouter *result = 0 ;
  
  SWIG_check_num_args("mopo::Processor::getTopLevelRouter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::getTopLevelRouter",1,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_getTopLevelRouter",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (mopo::ProcessorRouter *)((mopo::Processor const *)arg1)->getTopLevelRouter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ProcessorRouter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_registerInput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Input *arg2 = (mopo::Input *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("mopo::Processor::registerInput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::registerInput",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Processor::registerInput",2,"mopo::Input *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Processor::registerInput",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_registerInput",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Input,0))){
    SWIG_fail_ptr("Processor_registerInput",2,SWIGTYPE_p_mopo__Input);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->registerInput(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_registerOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  int arg3 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::Processor::registerOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::registerOutput",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Processor::registerOutput",2,"mopo::Output *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Processor::registerOutput",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_registerOutput",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Processor_registerOutput",2,SWIGTYPE_p_mopo__Output);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (mopo::Output *)(arg1)->registerOutput(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_registerInput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Input *arg2 = (mopo::Input *) 0 ;
  
  SWIG_check_num_args("mopo::Processor::registerInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::registerInput",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Processor::registerInput",2,"mopo::Input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_registerInput",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Input,0))){
    SWIG_fail_ptr("Processor_registerInput",2,SWIGTYPE_p_mopo__Input);
  }
  
  (arg1)->registerInput(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_registerInput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Input, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Processor_registerInput__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Input, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Processor_registerInput__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Processor_registerInput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Processor::registerInput(mopo::Input *,int)\n"
    "    mopo::Processor::registerInput(mopo::Input *)\n");
  lua_error(L);return 0;
}


static int _wrap_Processor_registerOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::Processor::registerOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::registerOutput",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Processor::registerOutput",2,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_registerOutput",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("Processor_registerOutput",2,SWIGTYPE_p_mopo__Output);
  }
  
  result = (mopo::Output *)(arg1)->registerOutput(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_registerOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Processor_registerOutput__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Processor_registerOutput__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Processor_registerOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Processor::registerOutput(mopo::Output *,int)\n"
    "    mopo::Processor::registerOutput(mopo::Output *)\n");
  lua_error(L);return 0;
}


static int _wrap_Processor_numInputs(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::Processor::numInputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::numInputs",1,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_numInputs",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (int)((mopo::Processor const *)arg1)->numInputs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_numOutputs(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::Processor::numOutputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::numOutputs",1,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_numOutputs",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (int)((mopo::Processor const *)arg1)->numOutputs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_getInputSample(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int arg2 ;
  int arg3 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::Processor::getInputSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::getInputSample",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Processor::getInputSample",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Processor::getInputSample",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_getInputSample",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->getInputSample(arg2,arg3);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_writeOutputSample(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int arg2 ;
  int arg3 ;
  mopo_float arg4 ;
  mopo_float *argp4 ;
  
  SWIG_check_num_args("mopo::Processor::writeOutputSample",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::writeOutputSample",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Processor::writeOutputSample",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Processor::writeOutputSample",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("mopo::Processor::writeOutputSample",4,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_writeOutputSample",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Processor_writeOutputSample",4,SWIGTYPE_p_mopo_float);
  }
  arg4 = *argp4;
  
  (arg1)->writeOutputSample(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_input__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  unsigned int arg2 ;
  mopo::Input *result = 0 ;
  
  SWIG_check_num_args("mopo::Processor::input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::input",1,"mopo::Processor const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Processor::input",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_input",1,SWIGTYPE_p_mopo__Processor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (mopo::Input *)((mopo::Processor const *)arg1)->input(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Input,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_input__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Input *result = 0 ;
  
  SWIG_check_num_args("mopo::Processor::input",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::input",1,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_input",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (mopo::Input *)((mopo::Processor const *)arg1)->input();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Input,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_input(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Processor_input__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Processor_input__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Processor_input'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Processor::input(unsigned int) const\n"
    "    mopo::Processor::input() const\n");
  lua_error(L);return 0;
}


static int _wrap_Processor_output__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  unsigned int arg2 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::Processor::output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::output",1,"mopo::Processor const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Processor::output",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_output",1,SWIGTYPE_p_mopo__Processor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (mopo::Output *)((mopo::Processor const *)arg1)->output(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_output__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::Processor::output",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Processor::output",1,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("Processor_output",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (mopo::Output *)((mopo::Processor const *)arg1)->output();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Processor_output(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Processor_output__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Processor_output__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Processor_output'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Processor::output(unsigned int) const\n"
    "    mopo::Processor::output() const\n");
  lua_error(L);return 0;
}


static void swig_delete_Processor(void *obj) {
mopo::Processor *arg1 = (mopo::Processor *) obj;
delete arg1;
}
static swig_lua_attribute swig_Processor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Processor_methods[]= {
    { "clone", _wrap_Processor_clone},
    { "destroy", _wrap_Processor_destroy},
    { "process", _wrap_Processor_process},
    { "setSampleRate", _wrap_Processor_setSampleRate},
    { "setBufferSize", _wrap_Processor_setBufferSize},
    { "setControlRate", _wrap_Processor_setControlRate},
    { "enabled", _wrap_Processor_enabled},
    { "enable", _wrap_Processor_enable},
    { "getSampleRate", _wrap_Processor_getSampleRate},
    { "getBufferSize", _wrap_Processor_getBufferSize},
    { "getSamplesToProcess", _wrap_Processor_getSamplesToProcess},
    { "isControlRate", _wrap_Processor_isControlRate},
    { "inputMatchesBufferSize", _wrap_Processor_inputMatchesBufferSize},
    { "isPolyphonic", _wrap_Processor_isPolyphonic},
    { "plug", _wrap_Processor_plug},
    { "plugNext", _wrap_Processor_plugNext},
    { "connectedInputs", _wrap_Processor_connectedInputs},
    { "unplugIndex", _wrap_Processor_unplugIndex},
    { "unplug", _wrap_Processor_unplug},
    { "router", _wrap_Processor_router},
    { "getTopLevelRouter", _wrap_Processor_getTopLevelRouter},
    { "registerInput", _wrap_Processor_registerInput},
    { "registerOutput", _wrap_Processor_registerOutput},
    { "numInputs", _wrap_Processor_numInputs},
    { "numOutputs", _wrap_Processor_numOutputs},
    { "getInputSample", _wrap_Processor_getInputSample},
    { "writeOutputSample", _wrap_Processor_writeOutputSample},
    { "input", _wrap_Processor_input},
    { "output", _wrap_Processor_output},
    {0,0}
};
static swig_lua_method swig_Processor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Processor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Processor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Processor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Processor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Processor_Sf_SwigStatic = {
    "Processor",
    swig_Processor_Sf_SwigStatic_methods,
    swig_Processor_Sf_SwigStatic_attributes,
    swig_Processor_Sf_SwigStatic_constants,
    swig_Processor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Processor_bases[] = {0};
static const char *swig_Processor_base_names[] = {0};
static swig_lua_class _wrap_class_Processor = { "Processor", "Processor", &SWIGTYPE_p_mopo__Processor,0, swig_delete_Processor, swig_Processor_methods, swig_Processor_attributes, &swig_Processor_Sf_SwigStatic, swig_Processor_meta, swig_Processor_bases, swig_Processor_base_names };

static int _wrap_new_ProcessorRouter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  mopo::ProcessorRouter *result = 0 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::ProcessorRouter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::ProcessorRouter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::ProcessorRouter::ProcessorRouter",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (mopo::ProcessorRouter *)new mopo::ProcessorRouter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ProcessorRouter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProcessorRouter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  mopo::ProcessorRouter *result = 0 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::ProcessorRouter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::ProcessorRouter",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (mopo::ProcessorRouter *)new mopo::ProcessorRouter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ProcessorRouter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProcessorRouter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *result = 0 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::ProcessorRouter",0,0)
  result = (mopo::ProcessorRouter *)new mopo::ProcessorRouter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ProcessorRouter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProcessorRouter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = 0 ;
  mopo::ProcessorRouter *result = 0 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::ProcessorRouter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::ProcessorRouter",1,"mopo::ProcessorRouter const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("new_ProcessorRouter",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  result = (mopo::ProcessorRouter *)new mopo::ProcessorRouter((mopo::ProcessorRouter const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ProcessorRouter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProcessorRouter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ProcessorRouter__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__ProcessorRouter, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ProcessorRouter__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ProcessorRouter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ProcessorRouter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ProcessorRouter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::ProcessorRouter::ProcessorRouter(int,int)\n"
    "    mopo::ProcessorRouter::ProcessorRouter(int)\n"
    "    mopo::ProcessorRouter::ProcessorRouter()\n"
    "    mopo::ProcessorRouter::ProcessorRouter(mopo::ProcessorRouter const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ProcessorRouter_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::clone",1,"mopo::ProcessorRouter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_clone",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  result = (mopo::Processor *)((mopo::ProcessorRouter const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_destroy(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::destroy",1,"mopo::ProcessorRouter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_destroy",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::process",1,"mopo::ProcessorRouter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_process",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_setSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::setSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::setSampleRate",1,"mopo::ProcessorRouter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::ProcessorRouter::setSampleRate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_setSampleRate",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_setBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::setBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::setBufferSize",1,"mopo::ProcessorRouter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::ProcessorRouter::setBufferSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_setBufferSize",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setBufferSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_addProcessor(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::addProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::addProcessor",1,"mopo::ProcessorRouter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::ProcessorRouter::addProcessor",2,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_addProcessor",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("ProcessorRouter_addProcessor",2,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->addProcessor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_addIdleProcessor(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::addIdleProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::addIdleProcessor",1,"mopo::ProcessorRouter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::ProcessorRouter::addIdleProcessor",2,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_addIdleProcessor",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("ProcessorRouter_addIdleProcessor",2,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->addIdleProcessor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_removeProcessor(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::removeProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::removeProcessor",1,"mopo::ProcessorRouter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::ProcessorRouter::removeProcessor",2,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_removeProcessor",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("ProcessorRouter_removeProcessor",2,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->removeProcessor((mopo::Processor const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_connect(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  mopo::Output *arg3 = (mopo::Output *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::connect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::connect",1,"mopo::ProcessorRouter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::ProcessorRouter::connect",2,"mopo::Processor *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::ProcessorRouter::connect",3,"mopo::Output const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::ProcessorRouter::connect",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_connect",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("ProcessorRouter_connect",2,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("ProcessorRouter_connect",3,SWIGTYPE_p_mopo__Output);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->connect(arg2,(mopo::Output const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_disconnect(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  mopo::Output *arg3 = (mopo::Output *) 0 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::disconnect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::disconnect",1,"mopo::ProcessorRouter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::ProcessorRouter::disconnect",2,"mopo::Processor const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::ProcessorRouter::disconnect",3,"mopo::Output const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_disconnect",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("ProcessorRouter_disconnect",2,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("ProcessorRouter_disconnect",3,SWIGTYPE_p_mopo__Output);
  }
  
  (arg1)->disconnect((mopo::Processor const *)arg2,(mopo::Output const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_isDownstream(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  mopo::Processor *arg3 = (mopo::Processor *) 0 ;
  bool result;
  
  SWIG_check_num_args("mopo::ProcessorRouter::isDownstream",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::isDownstream",1,"mopo::ProcessorRouter const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::ProcessorRouter::isDownstream",2,"mopo::Processor const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::ProcessorRouter::isDownstream",3,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_isDownstream",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("ProcessorRouter_isDownstream",2,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("ProcessorRouter_isDownstream",3,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (bool)((mopo::ProcessorRouter const *)arg1)->isDownstream((mopo::Processor const *)arg2,(mopo::Processor const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_areOrdered(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  mopo::Processor *arg3 = (mopo::Processor *) 0 ;
  bool result;
  
  SWIG_check_num_args("mopo::ProcessorRouter::areOrdered",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::areOrdered",1,"mopo::ProcessorRouter const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::ProcessorRouter::areOrdered",2,"mopo::Processor const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::ProcessorRouter::areOrdered",3,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_areOrdered",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("ProcessorRouter_areOrdered",2,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("ProcessorRouter_areOrdered",3,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (bool)((mopo::ProcessorRouter const *)arg1)->areOrdered((mopo::Processor const *)arg2,(mopo::Processor const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_isPolyphonic(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  bool result;
  
  SWIG_check_num_args("mopo::ProcessorRouter::isPolyphonic",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::isPolyphonic",1,"mopo::ProcessorRouter const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::ProcessorRouter::isPolyphonic",2,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_isPolyphonic",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("ProcessorRouter_isPolyphonic",2,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (bool)((mopo::ProcessorRouter const *)arg1)->isPolyphonic((mopo::Processor const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_getMonoRouter(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  mopo::ProcessorRouter *result = 0 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::getMonoRouter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::getMonoRouter",1,"mopo::ProcessorRouter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_getMonoRouter",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  result = (mopo::ProcessorRouter *)(arg1)->getMonoRouter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ProcessorRouter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProcessorRouter_getPolyRouter(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) 0 ;
  mopo::ProcessorRouter *result = 0 ;
  
  SWIG_check_num_args("mopo::ProcessorRouter::getPolyRouter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ProcessorRouter::getPolyRouter",1,"mopo::ProcessorRouter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("ProcessorRouter_getPolyRouter",1,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  result = (mopo::ProcessorRouter *)(arg1)->getPolyRouter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ProcessorRouter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ProcessorRouter(void *obj) {
mopo::ProcessorRouter *arg1 = (mopo::ProcessorRouter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ProcessorRouter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ProcessorRouter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ProcessorRouter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ProcessorRouter_methods[]= {
    { "clone", _wrap_ProcessorRouter_clone},
    { "destroy", _wrap_ProcessorRouter_destroy},
    { "process", _wrap_ProcessorRouter_process},
    { "setSampleRate", _wrap_ProcessorRouter_setSampleRate},
    { "setBufferSize", _wrap_ProcessorRouter_setBufferSize},
    { "addProcessor", _wrap_ProcessorRouter_addProcessor},
    { "addIdleProcessor", _wrap_ProcessorRouter_addIdleProcessor},
    { "removeProcessor", _wrap_ProcessorRouter_removeProcessor},
    { "connect", _wrap_ProcessorRouter_connect},
    { "disconnect", _wrap_ProcessorRouter_disconnect},
    { "isDownstream", _wrap_ProcessorRouter_isDownstream},
    { "areOrdered", _wrap_ProcessorRouter_areOrdered},
    { "isPolyphonic", _wrap_ProcessorRouter_isPolyphonic},
    { "getMonoRouter", _wrap_ProcessorRouter_getMonoRouter},
    { "getPolyRouter", _wrap_ProcessorRouter_getPolyRouter},
    {0,0}
};
static swig_lua_method swig_ProcessorRouter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ProcessorRouter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ProcessorRouter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ProcessorRouter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ProcessorRouter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ProcessorRouter_Sf_SwigStatic = {
    "ProcessorRouter",
    swig_ProcessorRouter_Sf_SwigStatic_methods,
    swig_ProcessorRouter_Sf_SwigStatic_attributes,
    swig_ProcessorRouter_Sf_SwigStatic_constants,
    swig_ProcessorRouter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ProcessorRouter_bases[] = {0,0};
static const char *swig_ProcessorRouter_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_ProcessorRouter = { "ProcessorRouter", "ProcessorRouter", &SWIGTYPE_p_mopo__ProcessorRouter,_proxy__wrap_new_ProcessorRouter, swig_delete_ProcessorRouter, swig_ProcessorRouter_methods, swig_ProcessorRouter_attributes, &swig_ProcessorRouter_Sf_SwigStatic, swig_ProcessorRouter_meta, swig_ProcessorRouter_bases, swig_ProcessorRouter_base_names };

static int _wrap_new_Value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  bool arg2 ;
  mopo_float *argp1 ;
  mopo::Value *result = 0 ;
  
  SWIG_check_num_args("mopo::Value::Value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::Value::Value",1,"mopo_float");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("mopo::Value::Value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("new_Value",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (mopo::Value *)new mopo::Value(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo::Value *result = 0 ;
  
  SWIG_check_num_args("mopo::Value::Value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::Value::Value",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("new_Value",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = (mopo::Value *)new mopo::Value(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *result = 0 ;
  
  SWIG_check_num_args("mopo::Value::Value",0,0)
  result = (mopo::Value *)new mopo::Value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Value__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Value::Value(mopo_float,bool)\n"
    "    mopo::Value::Value(mopo_float)\n"
    "    mopo::Value::Value()\n");
  lua_error(L);return 0;
}


static int _wrap_Value_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *arg1 = (mopo::Value *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Value::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Value::clone",1,"mopo::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Value,0))){
    SWIG_fail_ptr("Value_clone",1,SWIGTYPE_p_mopo__Value);
  }
  
  result = (mopo::Processor *)((mopo::Value const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *arg1 = (mopo::Value *) 0 ;
  
  SWIG_check_num_args("mopo::Value::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Value::process",1,"mopo::Value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Value,0))){
    SWIG_fail_ptr("Value_process",1,SWIGTYPE_p_mopo__Value);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_value(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *arg1 = (mopo::Value *) 0 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::Value::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Value::value",1,"mopo::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Value,0))){
    SWIG_fail_ptr("Value_value",1,SWIGTYPE_p_mopo__Value);
  }
  
  result = ((mopo::Value const *)arg1)->value();
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *arg1 = (mopo::Value *) 0 ;
  mopo_float arg2 ;
  mopo_float *argp2 ;
  
  SWIG_check_num_args("mopo::Value::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Value::set",1,"mopo::Value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::Value::set",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Value,0))){
    SWIG_fail_ptr("Value_set",1,SWIGTYPE_p_mopo__Value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Value_set",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  (arg1)->set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Value(void *obj) {
mopo::Value *arg1 = (mopo::Value *) obj;
delete arg1;
}
static int _proxy__wrap_new_Value(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Value);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Value_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Value_methods[]= {
    { "clone", _wrap_Value_clone},
    { "process", _wrap_Value_process},
    { "value", _wrap_Value_value},
    { "set", _wrap_Value_set},
    {0,0}
};
static swig_lua_method swig_Value_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Value_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Value_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kSet", mopo::Value::kSet)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::Value::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Value_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Value_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Value_Sf_SwigStatic = {
    "Value",
    swig_Value_Sf_SwigStatic_methods,
    swig_Value_Sf_SwigStatic_attributes,
    swig_Value_Sf_SwigStatic_constants,
    swig_Value_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Value_bases[] = {0,0};
static const char *swig_Value_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_Value = { "Value", "Value", &SWIGTYPE_p_mopo__Value,_proxy__wrap_new_Value, swig_delete_Value, swig_Value_methods, swig_Value_attributes, &swig_Value_Sf_SwigStatic, swig_Value_meta, swig_Value_bases, swig_Value_base_names };

static int _wrap_value_zero_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *result = 0 ;
  
  SWIG_check_num_args("mopo::utils::value_zero",0,0)
  result = (mopo::Value *)&mopo::utils::value_zero;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_value_one_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *result = 0 ;
  
  SWIG_check_num_args("mopo::utils::value_one",0,0)
  result = (mopo::Value *)&mopo::utils::value_one;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_value_two_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *result = 0 ;
  
  SWIG_check_num_args("mopo::utils::value_two",0,0)
  result = (mopo::Value *)&mopo::utils::value_two;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_value_half_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *result = 0 ;
  
  SWIG_check_num_args("mopo::utils::value_half",0,0)
  result = (mopo::Value *)&mopo::utils::value_half;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_value_fifth_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *result = 0 ;
  
  SWIG_check_num_args("mopo::utils::value_fifth",0,0)
  result = (mopo::Value *)&mopo::utils::value_fifth;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_value_tenth_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *result = 0 ;
  
  SWIG_check_num_args("mopo::utils::value_tenth",0,0)
  result = (mopo::Value *)&mopo::utils::value_tenth;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_value_pi_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *result = 0 ;
  
  SWIG_check_num_args("mopo::utils::value_pi",0,0)
  result = (mopo::Value *)&mopo::utils::value_pi;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_value_2pi_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *result = 0 ;
  
  SWIG_check_num_args("mopo::utils::value_2pi",0,0)
  result = (mopo::Value *)&mopo::utils::value_2pi;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_value_neg_one_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Value *result = 0 ;
  
  SWIG_check_num_args("mopo::utils::value_neg_one",0,0)
  result = (mopo::Value *)&mopo::utils::value_neg_one;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_min(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float arg2 ;
  mopo_float *argp1 ;
  mopo_float *argp2 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::min",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::min",1,"mopo_float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::utils::min",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("min",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("min",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  result = mopo::utils::min(arg1,arg2);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float arg2 ;
  mopo_float *argp1 ;
  mopo_float *argp2 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::max",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::max",1,"mopo_float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::utils::max",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("max",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("max",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  result = mopo::utils::max(arg1,arg2);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clamp(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float arg2 ;
  mopo_float arg3 ;
  mopo_float *argp1 ;
  mopo_float *argp2 ;
  mopo_float *argp3 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::clamp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::clamp",1,"mopo_float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::utils::clamp",2,"mopo_float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mopo::utils::clamp",3,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("clamp",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("clamp",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("clamp",3,SWIGTYPE_p_mopo_float);
  }
  arg3 = *argp3;
  
  result = mopo::utils::clamp(arg1,arg2,arg3);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imax(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("mopo::utils::imax",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::utils::imax",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::utils::imax",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)mopo::utils::imax(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imin(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("mopo::utils::imin",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::utils::imin",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::utils::imin",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)mopo::utils::imin(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpolate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("mopo::utils::interpolate",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::utils::interpolate",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::utils::interpolate",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::utils::interpolate",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)mopo::utils::interpolate(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpolate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("mopo::utils::interpolate",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::utils::interpolate",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::utils::interpolate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::utils::interpolate",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)mopo::utils::interpolate(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpolate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_interpolate__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_interpolate__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpolate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::utils::interpolate(double,double,double)\n"
    "    mopo::utils::interpolate(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_mod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double *arg2 = (double *) 0 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::mod",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::utils::mod",1,"double");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::utils::mod",2,"double *");
  arg1 = (double)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("mod",2,SWIGTYPE_p_double);
  }
  
  result = mopo::utils::mod(arg1,arg2);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float *arg2 = (float *) 0 ;
  float result;
  
  SWIG_check_num_args("mopo::utils::mod",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::utils::mod",1,"float");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::utils::mod",2,"float *");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("mod",2,SWIGTYPE_p_float);
  }
  
  result = (float)mopo::utils::mod(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_mod__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_mod__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'mod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::utils::mod(double,double *)\n"
    "    mopo::utils::mod(float,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_iclamp(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::iclamp",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::utils::iclamp",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::utils::iclamp",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::utils::iclamp",3,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = mopo::utils::iclamp(arg1,arg2,arg3);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_closeToZero(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  bool result;
  
  SWIG_check_num_args("mopo::utils::closeToZero",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::closeToZero",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("closeToZero",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = (bool)mopo::utils::closeToZero(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gainToDb(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::gainToDb",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::gainToDb",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("gainToDb",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::gainToDb(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dbToGain(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::dbToGain",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::dbToGain",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("dbToGain",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::dbToGain(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_centsToRatio(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::centsToRatio",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::centsToRatio",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("centsToRatio",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::centsToRatio(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiCentsToFrequency(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::midiCentsToFrequency",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::midiCentsToFrequency",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("midiCentsToFrequency",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::midiCentsToFrequency(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiNoteToFrequency(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::midiNoteToFrequency",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::midiNoteToFrequency",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("midiNoteToFrequency",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::midiNoteToFrequency(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frequencyToMidiNote(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::frequencyToMidiNote",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::frequencyToMidiNote",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("frequencyToMidiNote",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::frequencyToMidiNote(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frequencyToMidiCents(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::frequencyToMidiCents",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::frequencyToMidiCents",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("frequencyToMidiCents",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::frequencyToMidiCents(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_magnitudeToQ(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::magnitudeToQ",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::magnitudeToQ",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("magnitudeToQ",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::magnitudeToQ(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_qToMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::qToMagnitude",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::qToMagnitude",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("qToMagnitude",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::qToMagnitude(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextPowerOfTwo(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  int result;
  
  SWIG_check_num_args("mopo::utils::nextPowerOfTwo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::nextPowerOfTwo",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("nextPowerOfTwo",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = (int)mopo::utils::nextPowerOfTwo(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_quickerTanh(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::quickerTanh",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::quickerTanh",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("quickerTanh",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::quickerTanh(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_quickTanh(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::quickTanh",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::quickTanh",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("quickTanh",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::quickTanh(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_quickerSin(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::quickerSin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::quickerSin",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("quickerSin",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::quickerSin(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_quickSin(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::quickSin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::quickSin",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("quickSin",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::quickSin(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_quickerSin1(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::quickerSin1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::quickerSin1",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("quickerSin1",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::quickerSin1(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_quickSin1(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float arg1 ;
  mopo_float *argp1 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::quickSin1",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::utils::quickSin1",1,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("quickSin1",1,SWIGTYPE_p_mopo_float);
  }
  arg1 = *argp1;
  
  result = mopo::utils::quickSin1(arg1);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isSilent(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float *arg1 = (mopo_float *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("mopo::utils::isSilent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::utils::isSilent",1,"mopo_float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::utils::isSilent",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("isSilent",1,SWIGTYPE_p_mopo_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)mopo::utils::isSilent((mopo_float const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rms(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float *arg1 = (mopo_float *) 0 ;
  int arg2 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::rms",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::utils::rms",1,"mopo_float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::utils::rms",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("rms",1,SWIGTYPE_p_mopo_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = mopo::utils::rms((mopo_float const *)arg1,arg2);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_peak(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float *arg1 = (mopo_float *) 0 ;
  int arg2 ;
  int arg3 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::utils::peak",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::utils::peak",1,"mopo_float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::utils::peak",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::utils::peak",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("peak",1,SWIGTYPE_p_mopo_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = mopo::utils::peak((mopo_float const *)arg1,arg2,arg3);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zeroBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float *arg1 = (mopo_float *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::utils::zeroBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::utils::zeroBuffer",1,"mopo_float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::utils::zeroBuffer",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("zeroBuffer",1,SWIGTYPE_p_mopo_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  mopo::utils::zeroBuffer(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zeroBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::utils::zeroBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::utils::zeroBuffer",1,"int *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::utils::zeroBuffer",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("zeroBuffer",1,SWIGTYPE_p_int);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  mopo::utils::zeroBuffer(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zeroBuffer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_zeroBuffer__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_zeroBuffer__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'zeroBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::utils::zeroBuffer(mopo_float *,int)\n"
    "    mopo::utils::zeroBuffer(int *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_copyBuffer(lua_State* L) {
  int SWIG_arg = 0;
  mopo_float *arg1 = (mopo_float *) 0 ;
  mopo_float *arg2 = (mopo_float *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("mopo::utils::copyBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::utils::copyBuffer",1,"mopo_float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::utils::copyBuffer",2,"mopo_float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::utils::copyBuffer",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("copyBuffer",1,SWIGTYPE_p_mopo_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("copyBuffer",2,SWIGTYPE_p_mopo_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  mopo::utils::copyBuffer(arg1,(mopo_float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copyBufferf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("mopo::utils::copyBufferf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::utils::copyBufferf",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::utils::copyBufferf",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::utils::copyBufferf",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("copyBufferf",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("copyBufferf",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  mopo::utils::copyBufferf(arg1,(float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoteHandler_allNotesOff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::NoteHandler *arg1 = (mopo::NoteHandler *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::NoteHandler::allNotesOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::NoteHandler::allNotesOff",1,"mopo::NoteHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::NoteHandler::allNotesOff",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__NoteHandler,0))){
    SWIG_fail_ptr("NoteHandler_allNotesOff",1,SWIGTYPE_p_mopo__NoteHandler);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->allNotesOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoteHandler_allNotesOff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::NoteHandler *arg1 = (mopo::NoteHandler *) 0 ;
  
  SWIG_check_num_args("mopo::NoteHandler::allNotesOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::NoteHandler::allNotesOff",1,"mopo::NoteHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__NoteHandler,0))){
    SWIG_fail_ptr("NoteHandler_allNotesOff",1,SWIGTYPE_p_mopo__NoteHandler);
  }
  
  (arg1)->allNotesOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoteHandler_allNotesOff(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__NoteHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NoteHandler_allNotesOff__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__NoteHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NoteHandler_allNotesOff__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NoteHandler_allNotesOff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::NoteHandler::allNotesOff(int)\n"
    "    mopo::NoteHandler::allNotesOff()\n");
  lua_error(L);return 0;
}


static int _wrap_NoteHandler_noteOn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::NoteHandler *arg1 = (mopo::NoteHandler *) 0 ;
  mopo_float arg2 ;
  mopo_float arg3 ;
  int arg4 ;
  int arg5 ;
  mopo_float *argp2 ;
  mopo_float *argp3 ;
  
  SWIG_check_num_args("mopo::NoteHandler::noteOn",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::NoteHandler::noteOn",1,"mopo::NoteHandler *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::NoteHandler::noteOn",2,"mopo_float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mopo::NoteHandler::noteOn",3,"mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::NoteHandler::noteOn",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("mopo::NoteHandler::noteOn",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__NoteHandler,0))){
    SWIG_fail_ptr("NoteHandler_noteOn",1,SWIGTYPE_p_mopo__NoteHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("NoteHandler_noteOn",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("NoteHandler_noteOn",3,SWIGTYPE_p_mopo_float);
  }
  arg3 = *argp3;
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->noteOn(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoteHandler_noteOn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::NoteHandler *arg1 = (mopo::NoteHandler *) 0 ;
  mopo_float arg2 ;
  mopo_float arg3 ;
  int arg4 ;
  mopo_float *argp2 ;
  mopo_float *argp3 ;
  
  SWIG_check_num_args("mopo::NoteHandler::noteOn",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::NoteHandler::noteOn",1,"mopo::NoteHandler *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::NoteHandler::noteOn",2,"mopo_float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mopo::NoteHandler::noteOn",3,"mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::NoteHandler::noteOn",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__NoteHandler,0))){
    SWIG_fail_ptr("NoteHandler_noteOn",1,SWIGTYPE_p_mopo__NoteHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("NoteHandler_noteOn",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("NoteHandler_noteOn",3,SWIGTYPE_p_mopo_float);
  }
  arg3 = *argp3;
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->noteOn(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoteHandler_noteOn__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  mopo::NoteHandler *arg1 = (mopo::NoteHandler *) 0 ;
  mopo_float arg2 ;
  mopo_float arg3 ;
  mopo_float *argp2 ;
  mopo_float *argp3 ;
  
  SWIG_check_num_args("mopo::NoteHandler::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::NoteHandler::noteOn",1,"mopo::NoteHandler *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::NoteHandler::noteOn",2,"mopo_float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mopo::NoteHandler::noteOn",3,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__NoteHandler,0))){
    SWIG_fail_ptr("NoteHandler_noteOn",1,SWIGTYPE_p_mopo__NoteHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("NoteHandler_noteOn",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("NoteHandler_noteOn",3,SWIGTYPE_p_mopo_float);
  }
  arg3 = *argp3;
  
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoteHandler_noteOn__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  mopo::NoteHandler *arg1 = (mopo::NoteHandler *) 0 ;
  mopo_float arg2 ;
  mopo_float *argp2 ;
  
  SWIG_check_num_args("mopo::NoteHandler::noteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::NoteHandler::noteOn",1,"mopo::NoteHandler *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::NoteHandler::noteOn",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__NoteHandler,0))){
    SWIG_fail_ptr("NoteHandler_noteOn",1,SWIGTYPE_p_mopo__NoteHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("NoteHandler_noteOn",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  (arg1)->noteOn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoteHandler_noteOn(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__NoteHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NoteHandler_noteOn__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__NoteHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NoteHandler_noteOn__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__NoteHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NoteHandler_noteOn__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__NoteHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_NoteHandler_noteOn__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NoteHandler_noteOn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::NoteHandler::noteOn(mopo_float,mopo_float,int,int)\n"
    "    mopo::NoteHandler::noteOn(mopo_float,mopo_float,int)\n"
    "    mopo::NoteHandler::noteOn(mopo_float,mopo_float)\n"
    "    mopo::NoteHandler::noteOn(mopo_float)\n");
  lua_error(L);return 0;
}


static int _wrap_NoteHandler_noteOff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::NoteHandler *arg1 = (mopo::NoteHandler *) 0 ;
  mopo_float arg2 ;
  int arg3 ;
  mopo_float *argp2 ;
  VoiceEvent result;
  
  SWIG_check_num_args("mopo::NoteHandler::noteOff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::NoteHandler::noteOff",1,"mopo::NoteHandler *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::NoteHandler::noteOff",2,"mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::NoteHandler::noteOff",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__NoteHandler,0))){
    SWIG_fail_ptr("NoteHandler_noteOff",1,SWIGTYPE_p_mopo__NoteHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("NoteHandler_noteOff",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->noteOff(arg2,arg3);
  {
    VoiceEvent * resultptr = new VoiceEvent((const VoiceEvent &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_VoiceEvent,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoteHandler_noteOff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::NoteHandler *arg1 = (mopo::NoteHandler *) 0 ;
  mopo_float arg2 ;
  mopo_float *argp2 ;
  VoiceEvent result;
  
  SWIG_check_num_args("mopo::NoteHandler::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::NoteHandler::noteOff",1,"mopo::NoteHandler *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::NoteHandler::noteOff",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__NoteHandler,0))){
    SWIG_fail_ptr("NoteHandler_noteOff",1,SWIGTYPE_p_mopo__NoteHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("NoteHandler_noteOff",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  result = (arg1)->noteOff(arg2);
  {
    VoiceEvent * resultptr = new VoiceEvent((const VoiceEvent &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_VoiceEvent,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoteHandler_noteOff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__NoteHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NoteHandler_noteOff__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__NoteHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NoteHandler_noteOff__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NoteHandler_noteOff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::NoteHandler::noteOff(mopo_float,int)\n"
    "    mopo::NoteHandler::noteOff(mopo_float)\n");
  lua_error(L);return 0;
}


static void swig_delete_NoteHandler(void *obj) {
mopo::NoteHandler *arg1 = (mopo::NoteHandler *) obj;
delete arg1;
}
static swig_lua_attribute swig_NoteHandler_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NoteHandler_methods[]= {
    { "allNotesOff", _wrap_NoteHandler_allNotesOff},
    { "noteOn", _wrap_NoteHandler_noteOn},
    { "noteOff", _wrap_NoteHandler_noteOff},
    {0,0}
};
static swig_lua_method swig_NoteHandler_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoteHandler_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoteHandler_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoteHandler_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoteHandler_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoteHandler_Sf_SwigStatic = {
    "NoteHandler",
    swig_NoteHandler_Sf_SwigStatic_methods,
    swig_NoteHandler_Sf_SwigStatic_attributes,
    swig_NoteHandler_Sf_SwigStatic_constants,
    swig_NoteHandler_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoteHandler_bases[] = {0};
static const char *swig_NoteHandler_base_names[] = {0};
static swig_lua_class _wrap_class_NoteHandler = { "NoteHandler", "NoteHandler", &SWIGTYPE_p_mopo__NoteHandler,0, swig_delete_NoteHandler, swig_NoteHandler_methods, swig_NoteHandler_attributes, &swig_NoteHandler_Sf_SwigStatic, swig_NoteHandler_meta, swig_NoteHandler_bases, swig_NoteHandler_base_names };

static int _wrap_new_Alias(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Alias *result = 0 ;
  
  SWIG_check_num_args("mopo::Alias::Alias",0,0)
  result = (mopo::Alias *)new mopo::Alias();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Alias,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alias_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Alias *arg1 = (mopo::Alias *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Alias::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Alias::clone",1,"mopo::Alias const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Alias,0))){
    SWIG_fail_ptr("Alias_clone",1,SWIGTYPE_p_mopo__Alias);
  }
  
  result = (mopo::Processor *)((mopo::Alias const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alias_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Alias *arg1 = (mopo::Alias *) 0 ;
  
  SWIG_check_num_args("mopo::Alias::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Alias::process",1,"mopo::Alias *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Alias,0))){
    SWIG_fail_ptr("Alias_process",1,SWIGTYPE_p_mopo__Alias);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Alias_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Alias *arg1 = (mopo::Alias *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Alias::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Alias::tick",1,"mopo::Alias *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Alias::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Alias,0))){
    SWIG_fail_ptr("Alias_tick",1,SWIGTYPE_p_mopo__Alias);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Alias(void *obj) {
mopo::Alias *arg1 = (mopo::Alias *) obj;
delete arg1;
}
static int _proxy__wrap_new_Alias(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Alias);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Alias_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Alias_methods[]= {
    { "clone", _wrap_Alias_clone},
    { "process", _wrap_Alias_process},
    { "tick", _wrap_Alias_tick},
    {0,0}
};
static swig_lua_method swig_Alias_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Alias_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Alias_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::Alias::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kWet", mopo::Alias::kWet)},
    {SWIG_LUA_CONSTTAB_INT("kFrequency", mopo::Alias::kFrequency)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::Alias::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Alias_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Alias_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Alias_Sf_SwigStatic = {
    "Alias",
    swig_Alias_Sf_SwigStatic_methods,
    swig_Alias_Sf_SwigStatic_attributes,
    swig_Alias_Sf_SwigStatic_constants,
    swig_Alias_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Alias_bases[] = {0,0};
static const char *swig_Alias_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_Alias = { "Alias", "Alias", &SWIGTYPE_p_mopo__Alias,_proxy__wrap_new_Alias, swig_delete_Alias, swig_Alias_methods, swig_Alias_attributes, &swig_Alias_Sf_SwigStatic, swig_Alias_meta, swig_Alias_bases, swig_Alias_base_names };

static int _wrap_new_Arpeggiator(lua_State* L) {
  int SWIG_arg = 0;
  mopo::NoteHandler *arg1 = (mopo::NoteHandler *) 0 ;
  mopo::Arpeggiator *result = 0 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::Arpeggiator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::Arpeggiator",1,"mopo::NoteHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__NoteHandler,0))){
    SWIG_fail_ptr("new_Arpeggiator",1,SWIGTYPE_p_mopo__NoteHandler);
  }
  
  result = (mopo::Arpeggiator *)new mopo::Arpeggiator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Arpeggiator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::clone",1,"mopo::Arpeggiator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_clone",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  result = (mopo::Processor *)((mopo::Arpeggiator const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::process",1,"mopo::Arpeggiator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_process",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_getNumNotes(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::Arpeggiator::getNumNotes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::getNumNotes",1,"mopo::Arpeggiator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_getNumNotes",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  result = (int)(arg1)->getNumNotes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_getPressedNotes(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  CircularQueue< mopo_float > *result = 0 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::getPressedNotes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::getPressedNotes",1,"mopo::Arpeggiator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_getPressedNotes",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  result = (CircularQueue< mopo_float > *) &(arg1)->getPressedNotes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CircularQueueT_mopo_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_getNextNote(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  std::pair< mopo_float,mopo_float > result;
  
  SWIG_check_num_args("mopo::Arpeggiator::getNextNote",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::getNextNote",1,"mopo::Arpeggiator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_getNextNote",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  result = (arg1)->getNextNote();
  {
    std::pair< mopo_float,mopo_float > * resultptr = new std::pair< mopo_float,mopo_float >((const std::pair< mopo_float,mopo_float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__pairT_mopo_float_mopo_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_addNoteToPatterns(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  mopo_float arg2 ;
  mopo_float *argp2 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::addNoteToPatterns",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::addNoteToPatterns",1,"mopo::Arpeggiator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::Arpeggiator::addNoteToPatterns",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_addNoteToPatterns",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Arpeggiator_addNoteToPatterns",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  (arg1)->addNoteToPatterns(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_removeNoteFromPatterns(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  mopo_float arg2 ;
  mopo_float *argp2 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::removeNoteFromPatterns",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::removeNoteFromPatterns",1,"mopo::Arpeggiator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::Arpeggiator::removeNoteFromPatterns",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_removeNoteFromPatterns",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Arpeggiator_removeNoteFromPatterns",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  (arg1)->removeNoteFromPatterns(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_allNotesOff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::allNotesOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::allNotesOff",1,"mopo::Arpeggiator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Arpeggiator::allNotesOff",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_allNotesOff",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->allNotesOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_allNotesOff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::allNotesOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::allNotesOff",1,"mopo::Arpeggiator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_allNotesOff",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  (arg1)->allNotesOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_allNotesOff(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Arpeggiator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Arpeggiator_allNotesOff__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Arpeggiator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Arpeggiator_allNotesOff__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Arpeggiator_allNotesOff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Arpeggiator::allNotesOff(int)\n"
    "    mopo::Arpeggiator::allNotesOff()\n");
  lua_error(L);return 0;
}


static int _wrap_Arpeggiator_noteOn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  mopo_float arg2 ;
  mopo_float arg3 ;
  int arg4 ;
  int arg5 ;
  mopo_float *argp2 ;
  mopo_float *argp3 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::noteOn",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",1,"mopo::Arpeggiator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",2,"mopo_float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",3,"mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_noteOn",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Arpeggiator_noteOn",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Arpeggiator_noteOn",3,SWIGTYPE_p_mopo_float);
  }
  arg3 = *argp3;
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->noteOn(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_noteOn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  mopo_float arg2 ;
  mopo_float arg3 ;
  int arg4 ;
  mopo_float *argp2 ;
  mopo_float *argp3 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::noteOn",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",1,"mopo::Arpeggiator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",2,"mopo_float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",3,"mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_noteOn",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Arpeggiator_noteOn",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Arpeggiator_noteOn",3,SWIGTYPE_p_mopo_float);
  }
  arg3 = *argp3;
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->noteOn(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_noteOn__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  mopo_float arg2 ;
  mopo_float arg3 ;
  mopo_float *argp2 ;
  mopo_float *argp3 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",1,"mopo::Arpeggiator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",2,"mopo_float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",3,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_noteOn",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Arpeggiator_noteOn",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Arpeggiator_noteOn",3,SWIGTYPE_p_mopo_float);
  }
  arg3 = *argp3;
  
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_noteOn__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  mopo_float arg2 ;
  mopo_float *argp2 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::noteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",1,"mopo::Arpeggiator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::Arpeggiator::noteOn",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_noteOn",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Arpeggiator_noteOn",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  (arg1)->noteOn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_noteOn(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Arpeggiator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Arpeggiator_noteOn__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Arpeggiator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Arpeggiator_noteOn__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Arpeggiator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Arpeggiator_noteOn__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Arpeggiator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Arpeggiator_noteOn__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Arpeggiator_noteOn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Arpeggiator::noteOn(mopo_float,mopo_float,int,int)\n"
    "    mopo::Arpeggiator::noteOn(mopo_float,mopo_float,int)\n"
    "    mopo::Arpeggiator::noteOn(mopo_float,mopo_float)\n"
    "    mopo::Arpeggiator::noteOn(mopo_float)\n");
  lua_error(L);return 0;
}


static int _wrap_Arpeggiator_noteOff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  mopo_float arg2 ;
  int arg3 ;
  mopo_float *argp2 ;
  VoiceEvent result;
  
  SWIG_check_num_args("mopo::Arpeggiator::noteOff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::noteOff",1,"mopo::Arpeggiator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::Arpeggiator::noteOff",2,"mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Arpeggiator::noteOff",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_noteOff",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Arpeggiator_noteOff",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->noteOff(arg2,arg3);
  {
    VoiceEvent * resultptr = new VoiceEvent((const VoiceEvent &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_VoiceEvent,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_noteOff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  mopo_float arg2 ;
  mopo_float *argp2 ;
  VoiceEvent result;
  
  SWIG_check_num_args("mopo::Arpeggiator::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::noteOff",1,"mopo::Arpeggiator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::Arpeggiator::noteOff",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_noteOff",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("Arpeggiator_noteOff",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  result = (arg1)->noteOff(arg2);
  {
    VoiceEvent * resultptr = new VoiceEvent((const VoiceEvent &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_VoiceEvent,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_noteOff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Arpeggiator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Arpeggiator_noteOff__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Arpeggiator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Arpeggiator_noteOff__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Arpeggiator_noteOff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Arpeggiator::noteOff(mopo_float,int)\n"
    "    mopo::Arpeggiator::noteOff(mopo_float)\n");
  lua_error(L);return 0;
}


static int _wrap_Arpeggiator_sustainOn(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::sustainOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::sustainOn",1,"mopo::Arpeggiator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_sustainOn",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  (arg1)->sustainOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Arpeggiator_sustainOff(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) 0 ;
  
  SWIG_check_num_args("mopo::Arpeggiator::sustainOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Arpeggiator::sustainOff",1,"mopo::Arpeggiator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Arpeggiator,0))){
    SWIG_fail_ptr("Arpeggiator_sustainOff",1,SWIGTYPE_p_mopo__Arpeggiator);
  }
  
  (arg1)->sustainOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Arpeggiator(void *obj) {
mopo::Arpeggiator *arg1 = (mopo::Arpeggiator *) obj;
delete arg1;
}
static int _proxy__wrap_new_Arpeggiator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Arpeggiator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Arpeggiator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Arpeggiator_methods[]= {
    { "clone", _wrap_Arpeggiator_clone},
    { "process", _wrap_Arpeggiator_process},
    { "getNumNotes", _wrap_Arpeggiator_getNumNotes},
    { "getPressedNotes", _wrap_Arpeggiator_getPressedNotes},
    { "getNextNote", _wrap_Arpeggiator_getNextNote},
    { "addNoteToPatterns", _wrap_Arpeggiator_addNoteToPatterns},
    { "removeNoteFromPatterns", _wrap_Arpeggiator_removeNoteFromPatterns},
    { "allNotesOff", _wrap_Arpeggiator_allNotesOff},
    { "noteOn", _wrap_Arpeggiator_noteOn},
    { "noteOff", _wrap_Arpeggiator_noteOff},
    { "sustainOn", _wrap_Arpeggiator_sustainOn},
    { "sustainOff", _wrap_Arpeggiator_sustainOff},
    {0,0}
};
static swig_lua_method swig_Arpeggiator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Arpeggiator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Arpeggiator_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kUp", mopo::Arpeggiator::kUp)},
    {SWIG_LUA_CONSTTAB_INT("kDown", mopo::Arpeggiator::kDown)},
    {SWIG_LUA_CONSTTAB_INT("kUpDown", mopo::Arpeggiator::kUpDown)},
    {SWIG_LUA_CONSTTAB_INT("kAsPlayed", mopo::Arpeggiator::kAsPlayed)},
    {SWIG_LUA_CONSTTAB_INT("kRandom", mopo::Arpeggiator::kRandom)},
    {SWIG_LUA_CONSTTAB_INT("kNumTypes", mopo::Arpeggiator::kNumTypes)},
    {SWIG_LUA_CONSTTAB_INT("kFrequency", mopo::Arpeggiator::kFrequency)},
    {SWIG_LUA_CONSTTAB_INT("kGate", mopo::Arpeggiator::kGate)},
    {SWIG_LUA_CONSTTAB_INT("kPattern", mopo::Arpeggiator::kPattern)},
    {SWIG_LUA_CONSTTAB_INT("kOctaves", mopo::Arpeggiator::kOctaves)},
    {SWIG_LUA_CONSTTAB_INT("kOn", mopo::Arpeggiator::kOn)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::Arpeggiator::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Arpeggiator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Arpeggiator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Arpeggiator_Sf_SwigStatic = {
    "Arpeggiator",
    swig_Arpeggiator_Sf_SwigStatic_methods,
    swig_Arpeggiator_Sf_SwigStatic_attributes,
    swig_Arpeggiator_Sf_SwigStatic_constants,
    swig_Arpeggiator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Arpeggiator_bases[] = {0,0,0};
static const char *swig_Arpeggiator_base_names[] = {"mopo::Processor *","mopo::NoteHandler *",0};
static swig_lua_class _wrap_class_Arpeggiator = { "Arpeggiator", "Arpeggiator", &SWIGTYPE_p_mopo__Arpeggiator,_proxy__wrap_new_Arpeggiator, swig_delete_Arpeggiator, swig_Arpeggiator_methods, swig_Arpeggiator_attributes, &swig_Arpeggiator_Sf_SwigStatic, swig_Arpeggiator_meta, swig_Arpeggiator_bases, swig_Arpeggiator_base_names };

static int _wrap_new_BitCrush(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BitCrush *result = 0 ;
  
  SWIG_check_num_args("mopo::BitCrush::BitCrush",0,0)
  result = (mopo::BitCrush *)new mopo::BitCrush();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__BitCrush,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitCrush_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BitCrush *arg1 = (mopo::BitCrush *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::BitCrush::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BitCrush::clone",1,"mopo::BitCrush const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BitCrush,0))){
    SWIG_fail_ptr("BitCrush_clone",1,SWIGTYPE_p_mopo__BitCrush);
  }
  
  result = (mopo::Processor *)((mopo::BitCrush const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitCrush_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BitCrush *arg1 = (mopo::BitCrush *) 0 ;
  
  SWIG_check_num_args("mopo::BitCrush::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BitCrush::process",1,"mopo::BitCrush *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BitCrush,0))){
    SWIG_fail_ptr("BitCrush_process",1,SWIGTYPE_p_mopo__BitCrush);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitCrush_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BitCrush *arg1 = (mopo::BitCrush *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::BitCrush::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BitCrush::tick",1,"mopo::BitCrush *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::BitCrush::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BitCrush,0))){
    SWIG_fail_ptr("BitCrush_tick",1,SWIGTYPE_p_mopo__BitCrush);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BitCrush(void *obj) {
mopo::BitCrush *arg1 = (mopo::BitCrush *) obj;
delete arg1;
}
static int _proxy__wrap_new_BitCrush(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BitCrush);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BitCrush_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BitCrush_methods[]= {
    { "clone", _wrap_BitCrush_clone},
    { "process", _wrap_BitCrush_process},
    { "tick", _wrap_BitCrush_tick},
    {0,0}
};
static swig_lua_method swig_BitCrush_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BitCrush_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BitCrush_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::BitCrush::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kWet", mopo::BitCrush::kWet)},
    {SWIG_LUA_CONSTTAB_INT("kBits", mopo::BitCrush::kBits)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::BitCrush::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BitCrush_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BitCrush_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BitCrush_Sf_SwigStatic = {
    "BitCrush",
    swig_BitCrush_Sf_SwigStatic_methods,
    swig_BitCrush_Sf_SwigStatic_attributes,
    swig_BitCrush_Sf_SwigStatic_constants,
    swig_BitCrush_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BitCrush_bases[] = {0,0};
static const char *swig_BitCrush_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_BitCrush = { "BitCrush", "BitCrush", &SWIGTYPE_p_mopo__BitCrush,_proxy__wrap_new_BitCrush, swig_delete_BitCrush, swig_BitCrush_methods, swig_BitCrush_attributes, &swig_BitCrush_Sf_SwigStatic, swig_BitCrush_meta, swig_BitCrush_bases, swig_BitCrush_base_names };

static int _wrap_new_BiquadFilter(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BiquadFilter *result = 0 ;
  
  SWIG_check_num_args("mopo::BiquadFilter::BiquadFilter",0,0)
  result = (mopo::BiquadFilter *)new mopo::BiquadFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__BiquadFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_getResponse(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BiquadFilter *arg1 = (mopo::BiquadFilter *) 0 ;
  mopo_float arg2 ;
  mopo_float *argp2 ;
  std::complex< mopo_float > result;
  
  SWIG_check_num_args("mopo::BiquadFilter::getResponse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BiquadFilter::getResponse",1,"mopo::BiquadFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::BiquadFilter::getResponse",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_getResponse",1,SWIGTYPE_p_mopo__BiquadFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("BiquadFilter_getResponse",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  result = (arg1)->getResponse(arg2);
  {
    std::complex< mopo_float > * resultptr = new std::complex< mopo_float >((const std::complex< mopo_float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_mopo_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_getAmplitudeResponse(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BiquadFilter *arg1 = (mopo::BiquadFilter *) 0 ;
  mopo_float arg2 ;
  mopo_float *argp2 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::BiquadFilter::getAmplitudeResponse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BiquadFilter::getAmplitudeResponse",1,"mopo::BiquadFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::BiquadFilter::getAmplitudeResponse",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_getAmplitudeResponse",1,SWIGTYPE_p_mopo__BiquadFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("BiquadFilter_getAmplitudeResponse",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  result = (arg1)->getAmplitudeResponse(arg2);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_getPhaseResponse(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BiquadFilter *arg1 = (mopo::BiquadFilter *) 0 ;
  mopo_float arg2 ;
  mopo_float *argp2 ;
  mopo_float result;
  
  SWIG_check_num_args("mopo::BiquadFilter::getPhaseResponse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BiquadFilter::getPhaseResponse",1,"mopo::BiquadFilter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mopo::BiquadFilter::getPhaseResponse",2,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_getPhaseResponse",1,SWIGTYPE_p_mopo__BiquadFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("BiquadFilter_getPhaseResponse",2,SWIGTYPE_p_mopo_float);
  }
  arg2 = *argp2;
  
  result = (arg1)->getPhaseResponse(arg2);
  {
    mopo_float * resultptr = new mopo_float((const mopo_float &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_mopo_float,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BiquadFilter *arg1 = (mopo::BiquadFilter *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::BiquadFilter::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BiquadFilter::clone",1,"mopo::BiquadFilter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_clone",1,SWIGTYPE_p_mopo__BiquadFilter);
  }
  
  result = (mopo::Processor *)((mopo::BiquadFilter const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BiquadFilter *arg1 = (mopo::BiquadFilter *) 0 ;
  
  SWIG_check_num_args("mopo::BiquadFilter::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BiquadFilter::process",1,"mopo::BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_process",1,SWIGTYPE_p_mopo__BiquadFilter);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_computeCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BiquadFilter *arg1 = (mopo::BiquadFilter *) 0 ;
  mopo::BiquadFilter::Type arg2 ;
  mopo_float arg3 ;
  mopo_float arg4 ;
  mopo_float arg5 ;
  mopo_float *argp3 ;
  mopo_float *argp4 ;
  mopo_float *argp5 ;
  
  SWIG_check_num_args("mopo::BiquadFilter::computeCoefficients",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BiquadFilter::computeCoefficients",1,"mopo::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::BiquadFilter::computeCoefficients",2,"mopo::BiquadFilter::Type");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mopo::BiquadFilter::computeCoefficients",3,"mopo_float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("mopo::BiquadFilter::computeCoefficients",4,"mopo_float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("mopo::BiquadFilter::computeCoefficients",5,"mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_computeCoefficients",1,SWIGTYPE_p_mopo__BiquadFilter);
  }
  
  arg2 = (mopo::BiquadFilter::Type)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("BiquadFilter_computeCoefficients",3,SWIGTYPE_p_mopo_float);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("BiquadFilter_computeCoefficients",4,SWIGTYPE_p_mopo_float);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("BiquadFilter_computeCoefficients",5,SWIGTYPE_p_mopo_float);
  }
  arg5 = *argp5;
  
  (arg1)->computeCoefficients(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilter_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BiquadFilter *arg1 = (mopo::BiquadFilter *) 0 ;
  int arg2 ;
  mopo_float *arg3 = (mopo_float *) 0 ;
  mopo_float *arg4 = (mopo_float *) 0 ;
  
  SWIG_check_num_args("mopo::BiquadFilter::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BiquadFilter::tick",1,"mopo::BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::BiquadFilter::tick",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::BiquadFilter::tick",3,"mopo_float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("mopo::BiquadFilter::tick",4,"mopo_float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilter_tick",1,SWIGTYPE_p_mopo__BiquadFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("BiquadFilter_tick",3,SWIGTYPE_p_mopo_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_mopo_float,0))){
    SWIG_fail_ptr("BiquadFilter_tick",4,SWIGTYPE_p_mopo_float);
  }
  
  (arg1)->tick(arg2,arg3,(mopo_float const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadFilter(void *obj) {
mopo::BiquadFilter *arg1 = (mopo::BiquadFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BiquadFilter_methods[]= {
    { "getResponse", _wrap_BiquadFilter_getResponse},
    { "getAmplitudeResponse", _wrap_BiquadFilter_getAmplitudeResponse},
    { "getPhaseResponse", _wrap_BiquadFilter_getPhaseResponse},
    { "clone", _wrap_BiquadFilter_clone},
    { "process", _wrap_BiquadFilter_process},
    { "computeCoefficients", _wrap_BiquadFilter_computeCoefficients},
    { "tick", _wrap_BiquadFilter_tick},
    {0,0}
};
static swig_lua_method swig_BiquadFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::BiquadFilter::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kType", mopo::BiquadFilter::kType)},
    {SWIG_LUA_CONSTTAB_INT("kCutoff", mopo::BiquadFilter::kCutoff)},
    {SWIG_LUA_CONSTTAB_INT("kResonance", mopo::BiquadFilter::kResonance)},
    {SWIG_LUA_CONSTTAB_INT("kGain", mopo::BiquadFilter::kGain)},
    {SWIG_LUA_CONSTTAB_INT("kReset", mopo::BiquadFilter::kReset)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::BiquadFilter::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("kLowPass", mopo::BiquadFilter::kLowPass)},
    {SWIG_LUA_CONSTTAB_INT("kHighPass", mopo::BiquadFilter::kHighPass)},
    {SWIG_LUA_CONSTTAB_INT("kBandPass", mopo::BiquadFilter::kBandPass)},
    {SWIG_LUA_CONSTTAB_INT("kLowShelf", mopo::BiquadFilter::kLowShelf)},
    {SWIG_LUA_CONSTTAB_INT("kHighShelf", mopo::BiquadFilter::kHighShelf)},
    {SWIG_LUA_CONSTTAB_INT("kBandShelf", mopo::BiquadFilter::kBandShelf)},
    {SWIG_LUA_CONSTTAB_INT("kAllPass", mopo::BiquadFilter::kAllPass)},
    {SWIG_LUA_CONSTTAB_INT("kNotch", mopo::BiquadFilter::kNotch)},
    {SWIG_LUA_CONSTTAB_INT("kGainedBandPass", mopo::BiquadFilter::kGainedBandPass)},
    {SWIG_LUA_CONSTTAB_INT("kNumTypes", mopo::BiquadFilter::kNumTypes)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadFilter_Sf_SwigStatic = {
    "BiquadFilter",
    swig_BiquadFilter_Sf_SwigStatic_methods,
    swig_BiquadFilter_Sf_SwigStatic_attributes,
    swig_BiquadFilter_Sf_SwigStatic_constants,
    swig_BiquadFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadFilter_bases[] = {0,0};
static const char *swig_BiquadFilter_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_BiquadFilter = { "BiquadFilter", "BiquadFilter", &SWIGTYPE_p_mopo__BiquadFilter,_proxy__wrap_new_BiquadFilter, swig_delete_BiquadFilter, swig_BiquadFilter_methods, swig_BiquadFilter_attributes, &swig_BiquadFilter_Sf_SwigStatic, swig_BiquadFilter_meta, swig_BiquadFilter_bases, swig_BiquadFilter_base_names };

static int _wrap_new_BypassRouter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  mopo::BypassRouter *result = 0 ;
  
  SWIG_check_num_args("mopo::BypassRouter::BypassRouter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::BypassRouter::BypassRouter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::BypassRouter::BypassRouter",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (mopo::BypassRouter *)new mopo::BypassRouter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__BypassRouter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BypassRouter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  mopo::BypassRouter *result = 0 ;
  
  SWIG_check_num_args("mopo::BypassRouter::BypassRouter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::BypassRouter::BypassRouter",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (mopo::BypassRouter *)new mopo::BypassRouter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__BypassRouter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BypassRouter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BypassRouter *result = 0 ;
  
  SWIG_check_num_args("mopo::BypassRouter::BypassRouter",0,0)
  result = (mopo::BypassRouter *)new mopo::BypassRouter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__BypassRouter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BypassRouter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BypassRouter__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BypassRouter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BypassRouter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BypassRouter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::BypassRouter::BypassRouter(int,int)\n"
    "    mopo::BypassRouter::BypassRouter(int)\n"
    "    mopo::BypassRouter::BypassRouter()\n");
  lua_error(L);return 0;
}


static int _wrap_BypassRouter_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BypassRouter *arg1 = (mopo::BypassRouter *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::BypassRouter::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BypassRouter::clone",1,"mopo::BypassRouter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BypassRouter,0))){
    SWIG_fail_ptr("BypassRouter_clone",1,SWIGTYPE_p_mopo__BypassRouter);
  }
  
  result = (mopo::Processor *)((mopo::BypassRouter const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BypassRouter_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BypassRouter *arg1 = (mopo::BypassRouter *) 0 ;
  
  SWIG_check_num_args("mopo::BypassRouter::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BypassRouter::process",1,"mopo::BypassRouter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BypassRouter,0))){
    SWIG_fail_ptr("BypassRouter_process",1,SWIGTYPE_p_mopo__BypassRouter);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BypassRouter(void *obj) {
mopo::BypassRouter *arg1 = (mopo::BypassRouter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BypassRouter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BypassRouter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BypassRouter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BypassRouter_methods[]= {
    { "clone", _wrap_BypassRouter_clone},
    { "process", _wrap_BypassRouter_process},
    {0,0}
};
static swig_lua_method swig_BypassRouter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BypassRouter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BypassRouter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::BypassRouter::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kOn", mopo::BypassRouter::kOn)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::BypassRouter::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BypassRouter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BypassRouter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BypassRouter_Sf_SwigStatic = {
    "BypassRouter",
    swig_BypassRouter_Sf_SwigStatic_methods,
    swig_BypassRouter_Sf_SwigStatic_attributes,
    swig_BypassRouter_Sf_SwigStatic_constants,
    swig_BypassRouter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BypassRouter_bases[] = {0,0};
static const char *swig_BypassRouter_base_names[] = {"mopo::ProcessorRouter *",0};
static swig_lua_class _wrap_class_BypassRouter = { "BypassRouter", "BypassRouter", &SWIGTYPE_p_mopo__BypassRouter,_proxy__wrap_new_BypassRouter, swig_delete_BypassRouter, swig_BypassRouter_methods, swig_BypassRouter_attributes, &swig_BypassRouter_Sf_SwigStatic, swig_BypassRouter_meta, swig_BypassRouter_bases, swig_BypassRouter_base_names };

static int _wrap_PI_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::PI",0,0)
  result = (mopo::mopo_float)(mopo::mopo_float)mopo::PI;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_BUFFER_SIZE_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("mopo::MAX_BUFFER_SIZE",0,0)
  result = (int)(int)mopo::MAX_BUFFER_SIZE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DEFAULT_BUFFER_SIZE_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("mopo::DEFAULT_BUFFER_SIZE",0,0)
  result = (int)(int)mopo::DEFAULT_BUFFER_SIZE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DEFAULT_SAMPLE_RATE_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("mopo::DEFAULT_SAMPLE_RATE",0,0)
  result = (int)(int)mopo::DEFAULT_SAMPLE_RATE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_SAMPLE_RATE_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("mopo::MAX_SAMPLE_RATE",0,0)
  result = (int)(int)mopo::MAX_SAMPLE_RATE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MIDI_SIZE_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("mopo::MIDI_SIZE",0,0)
  result = (int)(int)mopo::MIDI_SIZE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MAX_POLYPHONY_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("mopo::MAX_POLYPHONY",0,0)
  result = (int)(int)mopo::MAX_POLYPHONY;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PPQ_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("mopo::PPQ",0,0)
  result = (int)(int)mopo::PPQ;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VOICE_KILL_TIME_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::VOICE_KILL_TIME",0,0)
  result = (mopo::mopo_float)(mopo::mopo_float)mopo::VOICE_KILL_TIME;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NUM_MIDI_CHANNELS_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("mopo::NUM_MIDI_CHANNELS",0,0)
  result = (int)(int)mopo::NUM_MIDI_CHANNELS;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  mopo::Delay *result = 0 ;
  
  SWIG_check_num_args("mopo::Delay::Delay",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Delay::Delay",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (mopo::Delay *)new mopo::Delay(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Delay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Delay *arg1 = 0 ;
  mopo::Delay *result = 0 ;
  
  SWIG_check_num_args("mopo::Delay::Delay",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::Delay::Delay",1,"mopo::Delay const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Delay,0))){
    SWIG_fail_ptr("new_Delay",1,SWIGTYPE_p_mopo__Delay);
  }
  
  result = (mopo::Delay *)new mopo::Delay((mopo::Delay const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Delay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Delay, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Delay__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Delay__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Delay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Delay::Delay(int)\n"
    "    mopo::Delay::Delay(mopo::Delay const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Delay_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Delay *arg1 = (mopo::Delay *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Delay::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Delay::clone",1,"mopo::Delay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Delay,0))){
    SWIG_fail_ptr("Delay_clone",1,SWIGTYPE_p_mopo__Delay);
  }
  
  result = (mopo::Processor *)((mopo::Delay const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Delay *arg1 = (mopo::Delay *) 0 ;
  
  SWIG_check_num_args("mopo::Delay::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Delay::process",1,"mopo::Delay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Delay,0))){
    SWIG_fail_ptr("Delay_process",1,SWIGTYPE_p_mopo__Delay);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Delay *arg1 = (mopo::Delay *) 0 ;
  int arg2 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg4 = (mopo::mopo_float *) 0 ;
  
  SWIG_check_num_args("mopo::Delay::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Delay::tick",1,"mopo::Delay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Delay::tick",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::Delay::tick",3,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("mopo::Delay::tick",4,"mopo::mopo_float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Delay,0))){
    SWIG_fail_ptr("Delay_tick",1,SWIGTYPE_p_mopo__Delay);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Delay_tick",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Delay_tick",4,SWIGTYPE_p_double);
  }
  
  (arg1)->tick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Delay(void *obj) {
mopo::Delay *arg1 = (mopo::Delay *) obj;
delete arg1;
}
static int _proxy__wrap_new_Delay(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Delay);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Delay_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Delay_methods[]= {
    { "clone", _wrap_Delay_clone},
    { "process", _wrap_Delay_process},
    { "tick", _wrap_Delay_tick},
    {0,0}
};
static swig_lua_method swig_Delay_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Delay_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Delay_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::Delay::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kWet", mopo::Delay::kWet)},
    {SWIG_LUA_CONSTTAB_INT("kSampleDelay", mopo::Delay::kSampleDelay)},
    {SWIG_LUA_CONSTTAB_INT("kFeedback", mopo::Delay::kFeedback)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::Delay::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Delay_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Delay_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Delay_Sf_SwigStatic = {
    "Delay",
    swig_Delay_Sf_SwigStatic_methods,
    swig_Delay_Sf_SwigStatic_attributes,
    swig_Delay_Sf_SwigStatic_constants,
    swig_Delay_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Delay_bases[] = {0,0};
static const char *swig_Delay_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_Delay = { "Delay", "Delay", &SWIGTYPE_p_mopo__Delay,_proxy__wrap_new_Delay, swig_delete_Delay, swig_Delay_methods, swig_Delay_attributes, &swig_Delay_Sf_SwigStatic, swig_Delay_meta, swig_Delay_bases, swig_Delay_base_names };

static int _wrap_new_Distortion(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Distortion *result = 0 ;
  
  SWIG_check_num_args("mopo::Distortion::Distortion",0,0)
  result = (mopo::Distortion *)new mopo::Distortion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Distortion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distortion_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Distortion *arg1 = (mopo::Distortion *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Distortion::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Distortion::clone",1,"mopo::Distortion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Distortion,0))){
    SWIG_fail_ptr("Distortion_clone",1,SWIGTYPE_p_mopo__Distortion);
  }
  
  result = (mopo::Processor *)((mopo::Distortion const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distortion_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Distortion *arg1 = (mopo::Distortion *) 0 ;
  
  SWIG_check_num_args("mopo::Distortion::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Distortion::process",1,"mopo::Distortion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Distortion,0))){
    SWIG_fail_ptr("Distortion_process",1,SWIGTYPE_p_mopo__Distortion);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distortion_processSoftClip(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Distortion *arg1 = (mopo::Distortion *) 0 ;
  
  SWIG_check_num_args("mopo::Distortion::processSoftClip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Distortion::processSoftClip",1,"mopo::Distortion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Distortion,0))){
    SWIG_fail_ptr("Distortion_processSoftClip",1,SWIGTYPE_p_mopo__Distortion);
  }
  
  (arg1)->processSoftClip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distortion_processHardClip(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Distortion *arg1 = (mopo::Distortion *) 0 ;
  
  SWIG_check_num_args("mopo::Distortion::processHardClip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Distortion::processHardClip",1,"mopo::Distortion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Distortion,0))){
    SWIG_fail_ptr("Distortion_processHardClip",1,SWIGTYPE_p_mopo__Distortion);
  }
  
  (arg1)->processHardClip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distortion_processLinearFold(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Distortion *arg1 = (mopo::Distortion *) 0 ;
  
  SWIG_check_num_args("mopo::Distortion::processLinearFold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Distortion::processLinearFold",1,"mopo::Distortion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Distortion,0))){
    SWIG_fail_ptr("Distortion_processLinearFold",1,SWIGTYPE_p_mopo__Distortion);
  }
  
  (arg1)->processLinearFold();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Distortion_processSinFold(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Distortion *arg1 = (mopo::Distortion *) 0 ;
  
  SWIG_check_num_args("mopo::Distortion::processSinFold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Distortion::processSinFold",1,"mopo::Distortion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Distortion,0))){
    SWIG_fail_ptr("Distortion_processSinFold",1,SWIGTYPE_p_mopo__Distortion);
  }
  
  (arg1)->processSinFold();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Distortion(void *obj) {
mopo::Distortion *arg1 = (mopo::Distortion *) obj;
delete arg1;
}
static int _proxy__wrap_new_Distortion(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Distortion);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Distortion_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Distortion_methods[]= {
    { "clone", _wrap_Distortion_clone},
    { "process", _wrap_Distortion_process},
    { "processSoftClip", _wrap_Distortion_processSoftClip},
    { "processHardClip", _wrap_Distortion_processHardClip},
    { "processLinearFold", _wrap_Distortion_processLinearFold},
    { "processSinFold", _wrap_Distortion_processSinFold},
    {0,0}
};
static swig_lua_method swig_Distortion_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Distortion_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Distortion_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::Distortion::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kOn", mopo::Distortion::kOn)},
    {SWIG_LUA_CONSTTAB_INT("kType", mopo::Distortion::kType)},
    {SWIG_LUA_CONSTTAB_INT("kDrive", mopo::Distortion::kDrive)},
    {SWIG_LUA_CONSTTAB_INT("kMix", mopo::Distortion::kMix)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::Distortion::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("kSoftClip", mopo::Distortion::kSoftClip)},
    {SWIG_LUA_CONSTTAB_INT("kHardClip", mopo::Distortion::kHardClip)},
    {SWIG_LUA_CONSTTAB_INT("kLinearFold", mopo::Distortion::kLinearFold)},
    {SWIG_LUA_CONSTTAB_INT("kSinFold", mopo::Distortion::kSinFold)},
    {SWIG_LUA_CONSTTAB_INT("kNumTypes", mopo::Distortion::kNumTypes)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Distortion_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Distortion_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Distortion_Sf_SwigStatic = {
    "Distortion",
    swig_Distortion_Sf_SwigStatic_methods,
    swig_Distortion_Sf_SwigStatic_attributes,
    swig_Distortion_Sf_SwigStatic_constants,
    swig_Distortion_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Distortion_bases[] = {0,0};
static const char *swig_Distortion_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_Distortion = { "Distortion", "Distortion", &SWIGTYPE_p_mopo__Distortion,_proxy__wrap_new_Distortion, swig_delete_Distortion, swig_Distortion_methods, swig_Distortion_attributes, &swig_Distortion_Sf_SwigStatic, swig_Distortion_meta, swig_Distortion_bases, swig_Distortion_base_names };

static int _wrap_new_Envelope(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Envelope *result = 0 ;
  
  SWIG_check_num_args("mopo::Envelope::Envelope",0,0)
  result = (mopo::Envelope *)new mopo::Envelope();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Envelope,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Envelope *arg1 = (mopo::Envelope *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Envelope::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Envelope::clone",1,"mopo::Envelope const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Envelope,0))){
    SWIG_fail_ptr("Envelope_clone",1,SWIGTYPE_p_mopo__Envelope);
  }
  
  result = (mopo::Processor *)((mopo::Envelope const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Envelope *arg1 = (mopo::Envelope *) 0 ;
  
  SWIG_check_num_args("mopo::Envelope::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Envelope::process",1,"mopo::Envelope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Envelope,0))){
    SWIG_fail_ptr("Envelope_process",1,SWIGTYPE_p_mopo__Envelope);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_trigger(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Envelope *arg1 = (mopo::Envelope *) 0 ;
  mopo::mopo_float arg2 ;
  
  SWIG_check_num_args("mopo::Envelope::trigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Envelope::trigger",1,"mopo::Envelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Envelope::trigger",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Envelope,0))){
    SWIG_fail_ptr("Envelope_trigger",1,SWIGTYPE_p_mopo__Envelope);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  (arg1)->trigger(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Envelope(void *obj) {
mopo::Envelope *arg1 = (mopo::Envelope *) obj;
delete arg1;
}
static int _proxy__wrap_new_Envelope(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Envelope);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Envelope_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Envelope_methods[]= {
    { "clone", _wrap_Envelope_clone},
    { "process", _wrap_Envelope_process},
    { "trigger", _wrap_Envelope_trigger},
    {0,0}
};
static swig_lua_method swig_Envelope_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Envelope_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Envelope_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAttack", mopo::Envelope::kAttack)},
    {SWIG_LUA_CONSTTAB_INT("kDecay", mopo::Envelope::kDecay)},
    {SWIG_LUA_CONSTTAB_INT("kSustain", mopo::Envelope::kSustain)},
    {SWIG_LUA_CONSTTAB_INT("kRelease", mopo::Envelope::kRelease)},
    {SWIG_LUA_CONSTTAB_INT("kTrigger", mopo::Envelope::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::Envelope::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("kValue", mopo::Envelope::kValue)},
    {SWIG_LUA_CONSTTAB_INT("kPhase", mopo::Envelope::kPhase)},
    {SWIG_LUA_CONSTTAB_INT("kFinished", mopo::Envelope::kFinished)},
    {SWIG_LUA_CONSTTAB_INT("kNumOutputs", mopo::Envelope::kNumOutputs)},
    {SWIG_LUA_CONSTTAB_INT("kAttacking", mopo::Envelope::kAttacking)},
    {SWIG_LUA_CONSTTAB_INT("kDecaying", mopo::Envelope::kDecaying)},
    {SWIG_LUA_CONSTTAB_INT("kReleasing", mopo::Envelope::kReleasing)},
    {SWIG_LUA_CONSTTAB_INT("kKilling", mopo::Envelope::kKilling)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Envelope_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Envelope_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Envelope_Sf_SwigStatic = {
    "Envelope",
    swig_Envelope_Sf_SwigStatic_methods,
    swig_Envelope_Sf_SwigStatic_attributes,
    swig_Envelope_Sf_SwigStatic_constants,
    swig_Envelope_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Envelope_bases[] = {0,0};
static const char *swig_Envelope_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_Envelope = { "Envelope", "Envelope", &SWIGTYPE_p_mopo__Envelope,_proxy__wrap_new_Envelope, swig_delete_Envelope, swig_Envelope_methods, swig_Envelope_attributes, &swig_Envelope_Sf_SwigStatic, swig_Envelope_meta, swig_Envelope_bases, swig_Envelope_base_names };

static int _wrap_new_Feedback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  mopo::Feedback *result = 0 ;
  
  SWIG_check_num_args("mopo::Feedback::Feedback",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("mopo::Feedback::Feedback",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (mopo::Feedback *)new mopo::Feedback(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Feedback,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Feedback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Feedback *result = 0 ;
  
  SWIG_check_num_args("mopo::Feedback::Feedback",0,0)
  result = (mopo::Feedback *)new mopo::Feedback();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Feedback,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Feedback(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Feedback__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Feedback__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Feedback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Feedback::Feedback(bool)\n"
    "    mopo::Feedback::Feedback()\n");
  lua_error(L);return 0;
}


static int _wrap_Feedback_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Feedback *arg1 = (mopo::Feedback *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Feedback::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Feedback::clone",1,"mopo::Feedback const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Feedback,0))){
    SWIG_fail_ptr("Feedback_clone",1,SWIGTYPE_p_mopo__Feedback);
  }
  
  result = (mopo::Processor *)((mopo::Feedback const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Feedback_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Feedback *arg1 = (mopo::Feedback *) 0 ;
  
  SWIG_check_num_args("mopo::Feedback::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Feedback::process",1,"mopo::Feedback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Feedback,0))){
    SWIG_fail_ptr("Feedback_process",1,SWIGTYPE_p_mopo__Feedback);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Feedback_refreshOutput(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Feedback *arg1 = (mopo::Feedback *) 0 ;
  
  SWIG_check_num_args("mopo::Feedback::refreshOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Feedback::refreshOutput",1,"mopo::Feedback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Feedback,0))){
    SWIG_fail_ptr("Feedback_refreshOutput",1,SWIGTYPE_p_mopo__Feedback);
  }
  
  (arg1)->refreshOutput();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Feedback_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Feedback *arg1 = (mopo::Feedback *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Feedback::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Feedback::tick",1,"mopo::Feedback *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Feedback::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Feedback,0))){
    SWIG_fail_ptr("Feedback_tick",1,SWIGTYPE_p_mopo__Feedback);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Feedback_tickBeginRefreshOutput(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Feedback *arg1 = (mopo::Feedback *) 0 ;
  
  SWIG_check_num_args("mopo::Feedback::tickBeginRefreshOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Feedback::tickBeginRefreshOutput",1,"mopo::Feedback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Feedback,0))){
    SWIG_fail_ptr("Feedback_tickBeginRefreshOutput",1,SWIGTYPE_p_mopo__Feedback);
  }
  
  (arg1)->tickBeginRefreshOutput();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Feedback_tickRefreshOutput(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Feedback *arg1 = (mopo::Feedback *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Feedback::tickRefreshOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Feedback::tickRefreshOutput",1,"mopo::Feedback *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Feedback::tickRefreshOutput",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Feedback,0))){
    SWIG_fail_ptr("Feedback_tickRefreshOutput",1,SWIGTYPE_p_mopo__Feedback);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tickRefreshOutput(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Feedback(void *obj) {
mopo::Feedback *arg1 = (mopo::Feedback *) obj;
delete arg1;
}
static int _proxy__wrap_new_Feedback(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Feedback);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Feedback_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Feedback_methods[]= {
    { "clone", _wrap_Feedback_clone},
    { "process", _wrap_Feedback_process},
    { "refreshOutput", _wrap_Feedback_refreshOutput},
    { "tick", _wrap_Feedback_tick},
    { "tickBeginRefreshOutput", _wrap_Feedback_tickBeginRefreshOutput},
    { "tickRefreshOutput", _wrap_Feedback_tickRefreshOutput},
    {0,0}
};
static swig_lua_method swig_Feedback_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Feedback_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Feedback_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Feedback_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Feedback_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Feedback_Sf_SwigStatic = {
    "Feedback",
    swig_Feedback_Sf_SwigStatic_methods,
    swig_Feedback_Sf_SwigStatic_attributes,
    swig_Feedback_Sf_SwigStatic_constants,
    swig_Feedback_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Feedback_bases[] = {0,0};
static const char *swig_Feedback_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_Feedback = { "Feedback", "Feedback", &SWIGTYPE_p_mopo__Feedback,_proxy__wrap_new_Feedback, swig_delete_Feedback, swig_Feedback_methods, swig_Feedback_attributes, &swig_Feedback_Sf_SwigStatic, swig_Feedback_meta, swig_Feedback_bases, swig_Feedback_base_names };

static int _wrap_new_FormantManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  mopo::FormantManager *result = 0 ;
  
  SWIG_check_num_args("mopo::FormantManager::FormantManager",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::FormantManager::FormantManager",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (mopo::FormantManager *)new mopo::FormantManager(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__FormantManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FormantManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FormantManager *result = 0 ;
  
  SWIG_check_num_args("mopo::FormantManager::FormantManager",0,0)
  result = (mopo::FormantManager *)new mopo::FormantManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__FormantManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FormantManager(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FormantManager__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FormantManager__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FormantManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::FormantManager::FormantManager(int)\n"
    "    mopo::FormantManager::FormantManager()\n");
  lua_error(L);return 0;
}


static int _wrap_FormantManager_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FormantManager *arg1 = (mopo::FormantManager *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::FormantManager::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FormantManager::clone",1,"mopo::FormantManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FormantManager,0))){
    SWIG_fail_ptr("FormantManager_clone",1,SWIGTYPE_p_mopo__FormantManager);
  }
  
  result = (mopo::Processor *)((mopo::FormantManager const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormantManager_getFormant__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FormantManager *arg1 = (mopo::FormantManager *) 0 ;
  int arg2 ;
  mopo::BiquadFilter *result = 0 ;
  
  SWIG_check_num_args("mopo::FormantManager::getFormant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FormantManager::getFormant",1,"mopo::FormantManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::FormantManager::getFormant",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FormantManager,0))){
    SWIG_fail_ptr("FormantManager_getFormant",1,SWIGTYPE_p_mopo__FormantManager);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (mopo::BiquadFilter *)(arg1)->getFormant(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__BiquadFilter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormantManager_getFormant__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FormantManager *arg1 = (mopo::FormantManager *) 0 ;
  mopo::BiquadFilter *result = 0 ;
  
  SWIG_check_num_args("mopo::FormantManager::getFormant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FormantManager::getFormant",1,"mopo::FormantManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FormantManager,0))){
    SWIG_fail_ptr("FormantManager_getFormant",1,SWIGTYPE_p_mopo__FormantManager);
  }
  
  result = (mopo::BiquadFilter *)(arg1)->getFormant();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__BiquadFilter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormantManager_getFormant(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__FormantManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FormantManager_getFormant__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__FormantManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FormantManager_getFormant__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FormantManager_getFormant'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::FormantManager::getFormant(int)\n"
    "    mopo::FormantManager::getFormant()\n");
  lua_error(L);return 0;
}


static int _wrap_FormantManager_num_formants(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FormantManager *arg1 = (mopo::FormantManager *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::FormantManager::num_formants",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FormantManager::num_formants",1,"mopo::FormantManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FormantManager,0))){
    SWIG_fail_ptr("FormantManager_num_formants",1,SWIGTYPE_p_mopo__FormantManager);
  }
  
  result = (int)(arg1)->num_formants();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormantManager_getResponse(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FormantManager *arg1 = (mopo::FormantManager *) 0 ;
  mopo::mopo_float arg2 ;
  std::complex< mopo::mopo_float > result;
  
  SWIG_check_num_args("mopo::FormantManager::getResponse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FormantManager::getResponse",1,"mopo::FormantManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::FormantManager::getResponse",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FormantManager,0))){
    SWIG_fail_ptr("FormantManager_getResponse",1,SWIGTYPE_p_mopo__FormantManager);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  result = (arg1)->getResponse(arg2);
  {
    std::complex< mopo::mopo_float > * resultptr = new std::complex< mopo::mopo_float >((const std::complex< mopo::mopo_float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormantManager_getAmplitudeResponse(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FormantManager *arg1 = (mopo::FormantManager *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::FormantManager::getAmplitudeResponse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FormantManager::getAmplitudeResponse",1,"mopo::FormantManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::FormantManager::getAmplitudeResponse",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FormantManager,0))){
    SWIG_fail_ptr("FormantManager_getAmplitudeResponse",1,SWIGTYPE_p_mopo__FormantManager);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  result = (mopo::mopo_float)(arg1)->getAmplitudeResponse(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormantManager_getPhaseResponse(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FormantManager *arg1 = (mopo::FormantManager *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::FormantManager::getPhaseResponse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FormantManager::getPhaseResponse",1,"mopo::FormantManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::FormantManager::getPhaseResponse",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FormantManager,0))){
    SWIG_fail_ptr("FormantManager_getPhaseResponse",1,SWIGTYPE_p_mopo__FormantManager);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  result = (mopo::mopo_float)(arg1)->getPhaseResponse(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FormantManager(void *obj) {
mopo::FormantManager *arg1 = (mopo::FormantManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_FormantManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FormantManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FormantManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FormantManager_methods[]= {
    { "clone", _wrap_FormantManager_clone},
    { "getFormant", _wrap_FormantManager_getFormant},
    { "num_formants", _wrap_FormantManager_num_formants},
    { "getResponse", _wrap_FormantManager_getResponse},
    { "getAmplitudeResponse", _wrap_FormantManager_getAmplitudeResponse},
    { "getPhaseResponse", _wrap_FormantManager_getPhaseResponse},
    {0,0}
};
static swig_lua_method swig_FormantManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FormantManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FormantManager_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::FormantManager::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kReset", mopo::FormantManager::kReset)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::FormantManager::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FormantManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FormantManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FormantManager_Sf_SwigStatic = {
    "FormantManager",
    swig_FormantManager_Sf_SwigStatic_methods,
    swig_FormantManager_Sf_SwigStatic_attributes,
    swig_FormantManager_Sf_SwigStatic_constants,
    swig_FormantManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FormantManager_bases[] = {0,0};
static const char *swig_FormantManager_base_names[] = {"mopo::ProcessorRouter *",0};
static swig_lua_class _wrap_class_FormantManager = { "FormantManager", "FormantManager", &SWIGTYPE_p_mopo__FormantManager,_proxy__wrap_new_FormantManager, swig_delete_FormantManager, swig_FormantManager_methods, swig_FormantManager_attributes, &swig_FormantManager_Sf_SwigStatic, swig_FormantManager_meta, swig_FormantManager_bases, swig_FormantManager_base_names };

static int _wrap_new_LinearSlope(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LinearSlope *result = 0 ;
  
  SWIG_check_num_args("mopo::LinearSlope::LinearSlope",0,0)
  result = (mopo::LinearSlope *)new mopo::LinearSlope();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__LinearSlope,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearSlope_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LinearSlope *arg1 = (mopo::LinearSlope *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::LinearSlope::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::LinearSlope::clone",1,"mopo::LinearSlope const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__LinearSlope,0))){
    SWIG_fail_ptr("LinearSlope_clone",1,SWIGTYPE_p_mopo__LinearSlope);
  }
  
  result = (mopo::Processor *)((mopo::LinearSlope const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearSlope_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LinearSlope *arg1 = (mopo::LinearSlope *) 0 ;
  
  SWIG_check_num_args("mopo::LinearSlope::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::LinearSlope::process",1,"mopo::LinearSlope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__LinearSlope,0))){
    SWIG_fail_ptr("LinearSlope_process",1,SWIGTYPE_p_mopo__LinearSlope);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearSlope_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LinearSlope *arg1 = (mopo::LinearSlope *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::LinearSlope::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::LinearSlope::tick",1,"mopo::LinearSlope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::LinearSlope::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__LinearSlope,0))){
    SWIG_fail_ptr("LinearSlope_tick",1,SWIGTYPE_p_mopo__LinearSlope);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LinearSlope(void *obj) {
mopo::LinearSlope *arg1 = (mopo::LinearSlope *) obj;
delete arg1;
}
static int _proxy__wrap_new_LinearSlope(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LinearSlope);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LinearSlope_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LinearSlope_methods[]= {
    { "clone", _wrap_LinearSlope_clone},
    { "process", _wrap_LinearSlope_process},
    { "tick", _wrap_LinearSlope_tick},
    {0,0}
};
static swig_lua_method swig_LinearSlope_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LinearSlope_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LinearSlope_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kTarget", mopo::LinearSlope::kTarget)},
    {SWIG_LUA_CONSTTAB_INT("kRunSeconds", mopo::LinearSlope::kRunSeconds)},
    {SWIG_LUA_CONSTTAB_INT("kTriggerJump", mopo::LinearSlope::kTriggerJump)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::LinearSlope::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LinearSlope_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LinearSlope_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LinearSlope_Sf_SwigStatic = {
    "LinearSlope",
    swig_LinearSlope_Sf_SwigStatic_methods,
    swig_LinearSlope_Sf_SwigStatic_attributes,
    swig_LinearSlope_Sf_SwigStatic_constants,
    swig_LinearSlope_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LinearSlope_bases[] = {0,0};
static const char *swig_LinearSlope_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_LinearSlope = { "LinearSlope", "LinearSlope", &SWIGTYPE_p_mopo__LinearSlope,_proxy__wrap_new_LinearSlope, swig_delete_LinearSlope, swig_LinearSlope_methods, swig_LinearSlope_attributes, &swig_LinearSlope_Sf_SwigStatic, swig_LinearSlope_meta, swig_LinearSlope_bases, swig_LinearSlope_base_names };

static int _wrap_new_MagnitudeLookupSingleton(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MagnitudeLookupSingleton *result = 0 ;
  
  SWIG_check_num_args("mopo::MagnitudeLookupSingleton::MagnitudeLookupSingleton",0,0)
  result = (mopo::MagnitudeLookupSingleton *)new mopo::MagnitudeLookupSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__MagnitudeLookupSingleton,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MagnitudeLookupSingleton_magnitudeLookup(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MagnitudeLookupSingleton *arg1 = (mopo::MagnitudeLookupSingleton *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::MagnitudeLookupSingleton::magnitudeLookup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::MagnitudeLookupSingleton::magnitudeLookup",1,"mopo::MagnitudeLookupSingleton const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::MagnitudeLookupSingleton::magnitudeLookup",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__MagnitudeLookupSingleton,0))){
    SWIG_fail_ptr("MagnitudeLookupSingleton_magnitudeLookup",1,SWIGTYPE_p_mopo__MagnitudeLookupSingleton);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  result = (mopo::mopo_float)((mopo::MagnitudeLookupSingleton const *)arg1)->magnitudeLookup(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MagnitudeLookupSingleton(void *obj) {
mopo::MagnitudeLookupSingleton *arg1 = (mopo::MagnitudeLookupSingleton *) obj;
delete arg1;
}
static int _proxy__wrap_new_MagnitudeLookupSingleton(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MagnitudeLookupSingleton);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MagnitudeLookupSingleton_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MagnitudeLookupSingleton_methods[]= {
    { "magnitudeLookup", _wrap_MagnitudeLookupSingleton_magnitudeLookup},
    {0,0}
};
static swig_lua_method swig_MagnitudeLookupSingleton_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MagnitudeLookupSingleton_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MagnitudeLookupSingleton_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MagnitudeLookupSingleton_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MagnitudeLookupSingleton_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MagnitudeLookupSingleton_Sf_SwigStatic = {
    "MagnitudeLookupSingleton",
    swig_MagnitudeLookupSingleton_Sf_SwigStatic_methods,
    swig_MagnitudeLookupSingleton_Sf_SwigStatic_attributes,
    swig_MagnitudeLookupSingleton_Sf_SwigStatic_constants,
    swig_MagnitudeLookupSingleton_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MagnitudeLookupSingleton_bases[] = {0};
static const char *swig_MagnitudeLookupSingleton_base_names[] = {0};
static swig_lua_class _wrap_class_MagnitudeLookupSingleton = { "MagnitudeLookupSingleton", "MagnitudeLookupSingleton", &SWIGTYPE_p_mopo__MagnitudeLookupSingleton,_proxy__wrap_new_MagnitudeLookupSingleton, swig_delete_MagnitudeLookupSingleton, swig_MagnitudeLookupSingleton_methods, swig_MagnitudeLookupSingleton_attributes, &swig_MagnitudeLookupSingleton_Sf_SwigStatic, swig_MagnitudeLookupSingleton_meta, swig_MagnitudeLookupSingleton_bases, swig_MagnitudeLookupSingleton_base_names };

static int _wrap_MagnitudeLookup_magnitudeLookup(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::MagnitudeLookup::magnitudeLookup",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::MagnitudeLookup::magnitudeLookup",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::mopo_float)mopo::MagnitudeLookup::magnitudeLookup(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MagnitudeLookup(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MagnitudeLookup *result = 0 ;
  
  SWIG_check_num_args("mopo::MagnitudeLookup::MagnitudeLookup",0,0)
  result = (mopo::MagnitudeLookup *)new mopo::MagnitudeLookup();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__MagnitudeLookup,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MagnitudeLookup(void *obj) {
mopo::MagnitudeLookup *arg1 = (mopo::MagnitudeLookup *) obj;
delete arg1;
}
static int _proxy__wrap_new_MagnitudeLookup(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MagnitudeLookup);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MagnitudeLookup_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MagnitudeLookup_methods[]= {
    {0,0}
};
static swig_lua_method swig_MagnitudeLookup_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MagnitudeLookup_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MagnitudeLookup_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MagnitudeLookup_SwigStatic_methods[]= {
    { "magnitudeLookup", _wrap_MagnitudeLookup_magnitudeLookup},
    {0,0}
};
static swig_lua_class* swig_MagnitudeLookup_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MagnitudeLookup_SwigStatic = {
    "MagnitudeLookup",
    swig_MagnitudeLookup_SwigStatic_methods,
    swig_MagnitudeLookup_SwigStatic_attributes,
    swig_MagnitudeLookup_SwigStatic_constants,
    swig_MagnitudeLookup_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MagnitudeLookup_bases[] = {0};
static const char *swig_MagnitudeLookup_base_names[] = {0};
static swig_lua_class _wrap_class_MagnitudeLookup = { "MagnitudeLookup", "MagnitudeLookup", &SWIGTYPE_p_mopo__MagnitudeLookup,_proxy__wrap_new_MagnitudeLookup, swig_delete_MagnitudeLookup, swig_MagnitudeLookup_methods, swig_MagnitudeLookup_attributes, &swig_MagnitudeLookup_SwigStatic, swig_MagnitudeLookup_meta, swig_MagnitudeLookup_bases, swig_MagnitudeLookup_base_names };

static int _wrap_new_Memory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  mopo::Memory *result = 0 ;
  
  SWIG_check_num_args("mopo::Memory::Memory",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Memory::Memory",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (mopo::Memory *)new mopo::Memory(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Memory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Memory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Memory *arg1 = 0 ;
  mopo::Memory *result = 0 ;
  
  SWIG_check_num_args("mopo::Memory::Memory",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::Memory::Memory",1,"mopo::Memory const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Memory,0))){
    SWIG_fail_ptr("new_Memory",1,SWIGTYPE_p_mopo__Memory);
  }
  
  result = (mopo::Memory *)new mopo::Memory((mopo::Memory const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Memory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Memory(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Memory, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Memory__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Memory__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Memory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Memory::Memory(int)\n"
    "    mopo::Memory::Memory(mopo::Memory const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Memory_push(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Memory *arg1 = (mopo::Memory *) 0 ;
  mopo::mopo_float arg2 ;
  
  SWIG_check_num_args("mopo::Memory::push",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Memory::push",1,"mopo::Memory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Memory::push",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Memory,0))){
    SWIG_fail_ptr("Memory_push",1,SWIGTYPE_p_mopo__Memory);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  (arg1)->push(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Memory_pushBlock(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Memory *arg1 = (mopo::Memory *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("mopo::Memory::pushBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Memory::pushBlock",1,"mopo::Memory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Memory::pushBlock",2,"mopo::mopo_float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Memory::pushBlock",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Memory,0))){
    SWIG_fail_ptr("Memory_pushBlock",1,SWIGTYPE_p_mopo__Memory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Memory_pushBlock",2,SWIGTYPE_p_double);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->pushBlock((mopo::mopo_float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Memory_pushZero(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Memory *arg1 = (mopo::Memory *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Memory::pushZero",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Memory::pushZero",1,"mopo::Memory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Memory::pushZero",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Memory,0))){
    SWIG_fail_ptr("Memory_pushZero",1,SWIGTYPE_p_mopo__Memory);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->pushZero(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Memory_getIndex(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Memory *arg1 = (mopo::Memory *) 0 ;
  int arg2 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Memory::getIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Memory::getIndex",1,"mopo::Memory const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Memory::getIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Memory,0))){
    SWIG_fail_ptr("Memory_getIndex",1,SWIGTYPE_p_mopo__Memory);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (mopo::mopo_float)((mopo::Memory const *)arg1)->getIndex(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Memory_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Memory *arg1 = (mopo::Memory *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Memory::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Memory::get",1,"mopo::Memory const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Memory::get",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Memory,0))){
    SWIG_fail_ptr("Memory_get",1,SWIGTYPE_p_mopo__Memory);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  result = (mopo::mopo_float)((mopo::Memory const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Memory_getOffset(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Memory *arg1 = (mopo::Memory *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("mopo::Memory::getOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Memory::getOffset",1,"mopo::Memory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Memory,0))){
    SWIG_fail_ptr("Memory_getOffset",1,SWIGTYPE_p_mopo__Memory);
  }
  
  result = (unsigned int)((mopo::Memory const *)arg1)->getOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Memory_setOffset(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Memory *arg1 = (mopo::Memory *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Memory::setOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Memory::setOffset",1,"mopo::Memory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Memory::setOffset",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Memory,0))){
    SWIG_fail_ptr("Memory_setOffset",1,SWIGTYPE_p_mopo__Memory);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Memory_getPointer(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Memory *arg1 = (mopo::Memory *) 0 ;
  int arg2 ;
  mopo::mopo_float *result = 0 ;
  
  SWIG_check_num_args("mopo::Memory::getPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Memory::getPointer",1,"mopo::Memory const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Memory::getPointer",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Memory,0))){
    SWIG_fail_ptr("Memory_getPointer",1,SWIGTYPE_p_mopo__Memory);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (mopo::mopo_float *)((mopo::Memory const *)arg1)->getPointer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Memory_getBuffer(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Memory *arg1 = (mopo::Memory *) 0 ;
  mopo::mopo_float *result = 0 ;
  
  SWIG_check_num_args("mopo::Memory::getBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Memory::getBuffer",1,"mopo::Memory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Memory,0))){
    SWIG_fail_ptr("Memory_getBuffer",1,SWIGTYPE_p_mopo__Memory);
  }
  
  result = (mopo::mopo_float *)((mopo::Memory const *)arg1)->getBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Memory_getSize(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Memory *arg1 = (mopo::Memory *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::Memory::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Memory::getSize",1,"mopo::Memory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Memory,0))){
    SWIG_fail_ptr("Memory_getSize",1,SWIGTYPE_p_mopo__Memory);
  }
  
  result = (int)((mopo::Memory const *)arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Memory(void *obj) {
mopo::Memory *arg1 = (mopo::Memory *) obj;
delete arg1;
}
static int _proxy__wrap_new_Memory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Memory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Memory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Memory_methods[]= {
    { "push", _wrap_Memory_push},
    { "pushBlock", _wrap_Memory_pushBlock},
    { "pushZero", _wrap_Memory_pushZero},
    { "getIndex", _wrap_Memory_getIndex},
    { "get", _wrap_Memory_get},
    { "getOffset", _wrap_Memory_getOffset},
    { "setOffset", _wrap_Memory_setOffset},
    { "getPointer", _wrap_Memory_getPointer},
    { "getBuffer", _wrap_Memory_getBuffer},
    { "getSize", _wrap_Memory_getSize},
    {0,0}
};
static swig_lua_method swig_Memory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Memory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Memory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Memory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Memory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Memory_Sf_SwigStatic = {
    "Memory",
    swig_Memory_Sf_SwigStatic_methods,
    swig_Memory_Sf_SwigStatic_attributes,
    swig_Memory_Sf_SwigStatic_constants,
    swig_Memory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Memory_bases[] = {0};
static const char *swig_Memory_base_names[] = {0};
static swig_lua_class _wrap_class_Memory = { "Memory", "Memory", &SWIGTYPE_p_mopo__Memory,_proxy__wrap_new_Memory, swig_delete_Memory, swig_Memory_methods, swig_Memory_attributes, &swig_Memory_Sf_SwigStatic, swig_Memory_meta, swig_Memory_bases, swig_Memory_base_names };

static int _wrap_new_MidiLookupSingleton(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MidiLookupSingleton *result = 0 ;
  
  SWIG_check_num_args("mopo::MidiLookupSingleton::MidiLookupSingleton",0,0)
  result = (mopo::MidiLookupSingleton *)new mopo::MidiLookupSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__MidiLookupSingleton,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiLookupSingleton_centsLookup(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MidiLookupSingleton *arg1 = (mopo::MidiLookupSingleton *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::MidiLookupSingleton::centsLookup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::MidiLookupSingleton::centsLookup",1,"mopo::MidiLookupSingleton const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::MidiLookupSingleton::centsLookup",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__MidiLookupSingleton,0))){
    SWIG_fail_ptr("MidiLookupSingleton_centsLookup",1,SWIGTYPE_p_mopo__MidiLookupSingleton);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  result = (mopo::mopo_float)((mopo::MidiLookupSingleton const *)arg1)->centsLookup(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MidiLookupSingleton(void *obj) {
mopo::MidiLookupSingleton *arg1 = (mopo::MidiLookupSingleton *) obj;
delete arg1;
}
static int _proxy__wrap_new_MidiLookupSingleton(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MidiLookupSingleton);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MidiLookupSingleton_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MidiLookupSingleton_methods[]= {
    { "centsLookup", _wrap_MidiLookupSingleton_centsLookup},
    {0,0}
};
static swig_lua_method swig_MidiLookupSingleton_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MidiLookupSingleton_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MidiLookupSingleton_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MidiLookupSingleton_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MidiLookupSingleton_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MidiLookupSingleton_Sf_SwigStatic = {
    "MidiLookupSingleton",
    swig_MidiLookupSingleton_Sf_SwigStatic_methods,
    swig_MidiLookupSingleton_Sf_SwigStatic_attributes,
    swig_MidiLookupSingleton_Sf_SwigStatic_constants,
    swig_MidiLookupSingleton_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MidiLookupSingleton_bases[] = {0};
static const char *swig_MidiLookupSingleton_base_names[] = {0};
static swig_lua_class _wrap_class_MidiLookupSingleton = { "MidiLookupSingleton", "MidiLookupSingleton", &SWIGTYPE_p_mopo__MidiLookupSingleton,_proxy__wrap_new_MidiLookupSingleton, swig_delete_MidiLookupSingleton, swig_MidiLookupSingleton_methods, swig_MidiLookupSingleton_attributes, &swig_MidiLookupSingleton_Sf_SwigStatic, swig_MidiLookupSingleton_meta, swig_MidiLookupSingleton_bases, swig_MidiLookupSingleton_base_names };

static int _wrap_MidiLookup_centsLookup(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::MidiLookup::centsLookup",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::MidiLookup::centsLookup",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::mopo_float)mopo::MidiLookup::centsLookup(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MidiLookup(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MidiLookup *result = 0 ;
  
  SWIG_check_num_args("mopo::MidiLookup::MidiLookup",0,0)
  result = (mopo::MidiLookup *)new mopo::MidiLookup();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__MidiLookup,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MidiLookup(void *obj) {
mopo::MidiLookup *arg1 = (mopo::MidiLookup *) obj;
delete arg1;
}
static int _proxy__wrap_new_MidiLookup(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MidiLookup);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MidiLookup_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MidiLookup_methods[]= {
    {0,0}
};
static swig_lua_method swig_MidiLookup_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MidiLookup_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MidiLookup_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MidiLookup_SwigStatic_methods[]= {
    { "centsLookup", _wrap_MidiLookup_centsLookup},
    {0,0}
};
static swig_lua_class* swig_MidiLookup_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MidiLookup_SwigStatic = {
    "MidiLookup",
    swig_MidiLookup_SwigStatic_methods,
    swig_MidiLookup_SwigStatic_attributes,
    swig_MidiLookup_SwigStatic_constants,
    swig_MidiLookup_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MidiLookup_bases[] = {0};
static const char *swig_MidiLookup_base_names[] = {0};
static swig_lua_class _wrap_class_MidiLookup = { "MidiLookup", "MidiLookup", &SWIGTYPE_p_mopo__MidiLookup,_proxy__wrap_new_MidiLookup, swig_delete_MidiLookup, swig_MidiLookup_methods, swig_MidiLookup_attributes, &swig_MidiLookup_SwigStatic, swig_MidiLookup_meta, swig_MidiLookup_bases, swig_MidiLookup_base_names };

static int _wrap_new_MonoPanner(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MonoPanner *result = 0 ;
  
  SWIG_check_num_args("mopo::MonoPanner::MonoPanner",0,0)
  result = (mopo::MonoPanner *)new mopo::MonoPanner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__MonoPanner,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoPanner_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MonoPanner *arg1 = (mopo::MonoPanner *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::MonoPanner::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::MonoPanner::clone",1,"mopo::MonoPanner const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__MonoPanner,0))){
    SWIG_fail_ptr("MonoPanner_clone",1,SWIGTYPE_p_mopo__MonoPanner);
  }
  
  result = (mopo::Processor *)((mopo::MonoPanner const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoPanner_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MonoPanner *arg1 = (mopo::MonoPanner *) 0 ;
  
  SWIG_check_num_args("mopo::MonoPanner::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::MonoPanner::process",1,"mopo::MonoPanner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__MonoPanner,0))){
    SWIG_fail_ptr("MonoPanner_process",1,SWIGTYPE_p_mopo__MonoPanner);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoPanner(void *obj) {
mopo::MonoPanner *arg1 = (mopo::MonoPanner *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoPanner(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoPanner);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoPanner_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MonoPanner_methods[]= {
    { "clone", _wrap_MonoPanner_clone},
    { "process", _wrap_MonoPanner_process},
    {0,0}
};
static swig_lua_method swig_MonoPanner_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoPanner_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoPanner_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::MonoPanner::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kPan", mopo::MonoPanner::kPan)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::MonoPanner::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("kLeft", mopo::MonoPanner::kLeft)},
    {SWIG_LUA_CONSTTAB_INT("kRight", mopo::MonoPanner::kRight)},
    {SWIG_LUA_CONSTTAB_INT("kNumOutputs", mopo::MonoPanner::kNumOutputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoPanner_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoPanner_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoPanner_Sf_SwigStatic = {
    "MonoPanner",
    swig_MonoPanner_Sf_SwigStatic_methods,
    swig_MonoPanner_Sf_SwigStatic_attributes,
    swig_MonoPanner_Sf_SwigStatic_constants,
    swig_MonoPanner_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoPanner_bases[] = {0,0};
static const char *swig_MonoPanner_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_MonoPanner = { "MonoPanner", "MonoPanner", &SWIGTYPE_p_mopo__MonoPanner,_proxy__wrap_new_MonoPanner, swig_delete_MonoPanner, swig_MonoPanner_methods, swig_MonoPanner_attributes, &swig_MonoPanner_Sf_SwigStatic, swig_MonoPanner_meta, swig_MonoPanner_bases, swig_MonoPanner_base_names };

static int _wrap_Operator_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Operator *arg1 = (mopo::Operator *) 0 ;
  
  SWIG_check_num_args("mopo::Operator::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Operator::process",1,"mopo::Operator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Operator,0))){
    SWIG_fail_ptr("Operator_process",1,SWIGTYPE_p_mopo__Operator);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Operator_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Operator *arg1 = (mopo::Operator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Operator::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Operator::tick",1,"mopo::Operator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Operator::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Operator,0))){
    SWIG_fail_ptr("Operator_tick",1,SWIGTYPE_p_mopo__Operator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Operator_processTriggers(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Operator *arg1 = (mopo::Operator *) 0 ;
  
  SWIG_check_num_args("mopo::Operator::processTriggers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Operator::processTriggers",1,"mopo::Operator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Operator,0))){
    SWIG_fail_ptr("Operator_processTriggers",1,SWIGTYPE_p_mopo__Operator);
  }
  
  (arg1)->processTriggers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Operator(void *obj) {
mopo::Operator *arg1 = (mopo::Operator *) obj;
delete arg1;
}
static swig_lua_attribute swig_Operator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Operator_methods[]= {
    { "process", _wrap_Operator_process},
    { "tick", _wrap_Operator_tick},
    { "processTriggers", _wrap_Operator_processTriggers},
    {0,0}
};
static swig_lua_method swig_Operator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Operator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Operator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Operator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Operator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Operator_Sf_SwigStatic = {
    "Operator",
    swig_Operator_Sf_SwigStatic_methods,
    swig_Operator_Sf_SwigStatic_attributes,
    swig_Operator_Sf_SwigStatic_constants,
    swig_Operator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Operator_bases[] = {0,0};
static const char *swig_Operator_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_Operator = { "Operator", "Operator", &SWIGTYPE_p_mopo__Operator,0, swig_delete_Operator, swig_Operator_methods, swig_Operator_attributes, &swig_Operator_Sf_SwigStatic, swig_Operator_meta, swig_Operator_bases, swig_Operator_base_names };

static int _wrap_new_Clamp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::mopo_float arg2 ;
  mopo::Clamp *result = 0 ;
  
  SWIG_check_num_args("mopo::Clamp::Clamp",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Clamp::Clamp",1,"mopo::mopo_float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Clamp::Clamp",2,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  result = (mopo::Clamp *)new mopo::Clamp(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Clamp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Clamp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::Clamp *result = 0 ;
  
  SWIG_check_num_args("mopo::Clamp::Clamp",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Clamp::Clamp",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::Clamp *)new mopo::Clamp(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Clamp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Clamp__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Clamp *result = 0 ;
  
  SWIG_check_num_args("mopo::Clamp::Clamp",0,0)
  result = (mopo::Clamp *)new mopo::Clamp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Clamp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Clamp(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Clamp__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Clamp__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Clamp__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Clamp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Clamp::Clamp(mopo::mopo_float,mopo::mopo_float)\n"
    "    mopo::Clamp::Clamp(mopo::mopo_float)\n"
    "    mopo::Clamp::Clamp()\n");
  lua_error(L);return 0;
}


static int _wrap_Clamp_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Clamp *arg1 = (mopo::Clamp *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Clamp::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Clamp::clone",1,"mopo::Clamp const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Clamp,0))){
    SWIG_fail_ptr("Clamp_clone",1,SWIGTYPE_p_mopo__Clamp);
  }
  
  result = (mopo::Processor *)((mopo::Clamp const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clamp_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Clamp *arg1 = (mopo::Clamp *) 0 ;
  
  SWIG_check_num_args("mopo::Clamp::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Clamp::process",1,"mopo::Clamp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Clamp,0))){
    SWIG_fail_ptr("Clamp_process",1,SWIGTYPE_p_mopo__Clamp);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clamp_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Clamp *arg1 = (mopo::Clamp *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Clamp::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Clamp::tick",1,"mopo::Clamp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Clamp::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Clamp,0))){
    SWIG_fail_ptr("Clamp_tick",1,SWIGTYPE_p_mopo__Clamp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clamp_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Clamp *arg1 = (mopo::Clamp *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::Clamp::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Clamp::bufferTick",1,"mopo::Clamp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Clamp::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::Clamp::bufferTick",3,"mopo::mopo_float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::Clamp::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Clamp,0))){
    SWIG_fail_ptr("Clamp_bufferTick",1,SWIGTYPE_p_mopo__Clamp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Clamp_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Clamp_bufferTick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Clamp(void *obj) {
mopo::Clamp *arg1 = (mopo::Clamp *) obj;
delete arg1;
}
static int _proxy__wrap_new_Clamp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Clamp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Clamp_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Clamp_methods[]= {
    { "clone", _wrap_Clamp_clone},
    { "process", _wrap_Clamp_process},
    { "tick", _wrap_Clamp_tick},
    { "bufferTick", _wrap_Clamp_bufferTick},
    {0,0}
};
static swig_lua_method swig_Clamp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Clamp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Clamp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Clamp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Clamp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Clamp_SwigStatic = {
    "Clamp",
    swig_Clamp_SwigStatic_methods,
    swig_Clamp_SwigStatic_attributes,
    swig_Clamp_SwigStatic_constants,
    swig_Clamp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Clamp_bases[] = {0,0};
static const char *swig_Clamp_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_Clamp = { "Clamp", "Clamp", &SWIGTYPE_p_mopo__Clamp,_proxy__wrap_new_Clamp, swig_delete_Clamp, swig_Clamp_methods, swig_Clamp_attributes, &swig_Clamp_SwigStatic, swig_Clamp_meta, swig_Clamp_bases, swig_Clamp_base_names };

static int _wrap_new_Bypass(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Bypass *result = 0 ;
  
  SWIG_check_num_args("mopo::Bypass::Bypass",0,0)
  result = (mopo::Bypass *)new mopo::Bypass();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Bypass,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bypass_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Bypass *arg1 = (mopo::Bypass *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Bypass::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Bypass::clone",1,"mopo::Bypass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Bypass,0))){
    SWIG_fail_ptr("Bypass_clone",1,SWIGTYPE_p_mopo__Bypass);
  }
  
  result = (mopo::Processor *)((mopo::Bypass const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bypass_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Bypass *arg1 = (mopo::Bypass *) 0 ;
  
  SWIG_check_num_args("mopo::Bypass::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Bypass::process",1,"mopo::Bypass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Bypass,0))){
    SWIG_fail_ptr("Bypass_process",1,SWIGTYPE_p_mopo__Bypass);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bypass_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Bypass *arg1 = (mopo::Bypass *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Bypass::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Bypass::tick",1,"mopo::Bypass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Bypass::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Bypass,0))){
    SWIG_fail_ptr("Bypass_tick",1,SWIGTYPE_p_mopo__Bypass);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bypass_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Bypass *arg1 = (mopo::Bypass *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::Bypass::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Bypass::bufferTick",1,"mopo::Bypass *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Bypass::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::Bypass::bufferTick",3,"mopo::mopo_float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::Bypass::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Bypass,0))){
    SWIG_fail_ptr("Bypass_bufferTick",1,SWIGTYPE_p_mopo__Bypass);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Bypass_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Bypass_bufferTick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Bypass(void *obj) {
mopo::Bypass *arg1 = (mopo::Bypass *) obj;
delete arg1;
}
static int _proxy__wrap_new_Bypass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Bypass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Bypass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Bypass_methods[]= {
    { "clone", _wrap_Bypass_clone},
    { "process", _wrap_Bypass_process},
    { "tick", _wrap_Bypass_tick},
    { "bufferTick", _wrap_Bypass_bufferTick},
    {0,0}
};
static swig_lua_method swig_Bypass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Bypass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Bypass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Bypass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Bypass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Bypass_Sf_SwigStatic = {
    "Bypass",
    swig_Bypass_Sf_SwigStatic_methods,
    swig_Bypass_Sf_SwigStatic_attributes,
    swig_Bypass_Sf_SwigStatic_constants,
    swig_Bypass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Bypass_bases[] = {0,0};
static const char *swig_Bypass_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_Bypass = { "Bypass", "Bypass", &SWIGTYPE_p_mopo__Bypass,_proxy__wrap_new_Bypass, swig_delete_Bypass, swig_Bypass_methods, swig_Bypass_attributes, &swig_Bypass_Sf_SwigStatic, swig_Bypass_meta, swig_Bypass_bases, swig_Bypass_base_names };

static int _wrap_new_Negate(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Negate *result = 0 ;
  
  SWIG_check_num_args("mopo::Negate::Negate",0,0)
  result = (mopo::Negate *)new mopo::Negate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Negate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Negate_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Negate *arg1 = (mopo::Negate *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Negate::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Negate::clone",1,"mopo::Negate const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Negate,0))){
    SWIG_fail_ptr("Negate_clone",1,SWIGTYPE_p_mopo__Negate);
  }
  
  result = (mopo::Processor *)((mopo::Negate const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Negate_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Negate *arg1 = (mopo::Negate *) 0 ;
  
  SWIG_check_num_args("mopo::Negate::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Negate::process",1,"mopo::Negate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Negate,0))){
    SWIG_fail_ptr("Negate_process",1,SWIGTYPE_p_mopo__Negate);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Negate_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Negate *arg1 = (mopo::Negate *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Negate::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Negate::tick",1,"mopo::Negate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Negate::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Negate,0))){
    SWIG_fail_ptr("Negate_tick",1,SWIGTYPE_p_mopo__Negate);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Negate_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Negate *arg1 = (mopo::Negate *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::Negate::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Negate::bufferTick",1,"mopo::Negate *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Negate::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::Negate::bufferTick",3,"mopo::mopo_float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::Negate::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Negate,0))){
    SWIG_fail_ptr("Negate_bufferTick",1,SWIGTYPE_p_mopo__Negate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Negate_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Negate_bufferTick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Negate(void *obj) {
mopo::Negate *arg1 = (mopo::Negate *) obj;
delete arg1;
}
static int _proxy__wrap_new_Negate(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Negate);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Negate_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Negate_methods[]= {
    { "clone", _wrap_Negate_clone},
    { "process", _wrap_Negate_process},
    { "tick", _wrap_Negate_tick},
    { "bufferTick", _wrap_Negate_bufferTick},
    {0,0}
};
static swig_lua_method swig_Negate_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Negate_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Negate_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Negate_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Negate_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Negate_Sf_SwigStatic = {
    "Negate",
    swig_Negate_Sf_SwigStatic_methods,
    swig_Negate_Sf_SwigStatic_attributes,
    swig_Negate_Sf_SwigStatic_constants,
    swig_Negate_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Negate_bases[] = {0,0};
static const char *swig_Negate_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_Negate = { "Negate", "Negate", &SWIGTYPE_p_mopo__Negate,_proxy__wrap_new_Negate, swig_delete_Negate, swig_Negate_methods, swig_Negate_attributes, &swig_Negate_Sf_SwigStatic, swig_Negate_meta, swig_Negate_bases, swig_Negate_base_names };

static int _wrap_new_Inverse(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Inverse *result = 0 ;
  
  SWIG_check_num_args("mopo::Inverse::Inverse",0,0)
  result = (mopo::Inverse *)new mopo::Inverse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Inverse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Inverse_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Inverse *arg1 = (mopo::Inverse *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Inverse::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Inverse::clone",1,"mopo::Inverse const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Inverse,0))){
    SWIG_fail_ptr("Inverse_clone",1,SWIGTYPE_p_mopo__Inverse);
  }
  
  result = (mopo::Processor *)((mopo::Inverse const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Inverse_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Inverse *arg1 = (mopo::Inverse *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Inverse::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Inverse::tick",1,"mopo::Inverse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Inverse::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Inverse,0))){
    SWIG_fail_ptr("Inverse_tick",1,SWIGTYPE_p_mopo__Inverse);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Inverse_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Inverse *arg1 = (mopo::Inverse *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::Inverse::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Inverse::bufferTick",1,"mopo::Inverse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Inverse::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::Inverse::bufferTick",3,"mopo::mopo_float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::Inverse::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Inverse,0))){
    SWIG_fail_ptr("Inverse_bufferTick",1,SWIGTYPE_p_mopo__Inverse);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Inverse_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Inverse_bufferTick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Inverse_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Inverse *arg1 = (mopo::Inverse *) 0 ;
  
  SWIG_check_num_args("mopo::Inverse::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Inverse::process",1,"mopo::Inverse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Inverse,0))){
    SWIG_fail_ptr("Inverse_process",1,SWIGTYPE_p_mopo__Inverse);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Inverse(void *obj) {
mopo::Inverse *arg1 = (mopo::Inverse *) obj;
delete arg1;
}
static int _proxy__wrap_new_Inverse(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Inverse);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Inverse_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Inverse_methods[]= {
    { "clone", _wrap_Inverse_clone},
    { "tick", _wrap_Inverse_tick},
    { "bufferTick", _wrap_Inverse_bufferTick},
    { "process", _wrap_Inverse_process},
    {0,0}
};
static swig_lua_method swig_Inverse_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Inverse_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Inverse_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Inverse_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Inverse_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Inverse_Sf_SwigStatic = {
    "Inverse",
    swig_Inverse_Sf_SwigStatic_methods,
    swig_Inverse_Sf_SwigStatic_attributes,
    swig_Inverse_Sf_SwigStatic_constants,
    swig_Inverse_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Inverse_bases[] = {0,0};
static const char *swig_Inverse_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_Inverse = { "Inverse", "Inverse", &SWIGTYPE_p_mopo__Inverse,_proxy__wrap_new_Inverse, swig_delete_Inverse, swig_Inverse_methods, swig_Inverse_attributes, &swig_Inverse_Sf_SwigStatic, swig_Inverse_meta, swig_Inverse_bases, swig_Inverse_base_names };

static int _wrap_new_LinearScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::LinearScale *result = 0 ;
  
  SWIG_check_num_args("mopo::LinearScale::LinearScale",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::LinearScale::LinearScale",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::LinearScale *)new mopo::LinearScale(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__LinearScale,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LinearScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LinearScale *result = 0 ;
  
  SWIG_check_num_args("mopo::LinearScale::LinearScale",0,0)
  result = (mopo::LinearScale *)new mopo::LinearScale();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__LinearScale,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LinearScale(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LinearScale__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_LinearScale__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_LinearScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::LinearScale::LinearScale(mopo::mopo_float)\n"
    "    mopo::LinearScale::LinearScale()\n");
  lua_error(L);return 0;
}


static int _wrap_LinearScale_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LinearScale *arg1 = (mopo::LinearScale *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::LinearScale::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::LinearScale::clone",1,"mopo::LinearScale const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__LinearScale,0))){
    SWIG_fail_ptr("LinearScale_clone",1,SWIGTYPE_p_mopo__LinearScale);
  }
  
  result = (mopo::Processor *)((mopo::LinearScale const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearScale_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LinearScale *arg1 = (mopo::LinearScale *) 0 ;
  
  SWIG_check_num_args("mopo::LinearScale::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::LinearScale::process",1,"mopo::LinearScale *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__LinearScale,0))){
    SWIG_fail_ptr("LinearScale_process",1,SWIGTYPE_p_mopo__LinearScale);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearScale_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LinearScale *arg1 = (mopo::LinearScale *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::LinearScale::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::LinearScale::tick",1,"mopo::LinearScale *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::LinearScale::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__LinearScale,0))){
    SWIG_fail_ptr("LinearScale_tick",1,SWIGTYPE_p_mopo__LinearScale);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearScale_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LinearScale *arg1 = (mopo::LinearScale *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::LinearScale::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::LinearScale::bufferTick",1,"mopo::LinearScale *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::LinearScale::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::LinearScale::bufferTick",3,"mopo::mopo_float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::LinearScale::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__LinearScale,0))){
    SWIG_fail_ptr("LinearScale_bufferTick",1,SWIGTYPE_p_mopo__LinearScale);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LinearScale_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LinearScale_bufferTick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LinearScale(void *obj) {
mopo::LinearScale *arg1 = (mopo::LinearScale *) obj;
delete arg1;
}
static int _proxy__wrap_new_LinearScale(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LinearScale);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LinearScale_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LinearScale_methods[]= {
    { "clone", _wrap_LinearScale_clone},
    { "process", _wrap_LinearScale_process},
    { "tick", _wrap_LinearScale_tick},
    { "bufferTick", _wrap_LinearScale_bufferTick},
    {0,0}
};
static swig_lua_method swig_LinearScale_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LinearScale_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LinearScale_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LinearScale_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LinearScale_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LinearScale_Sf_SwigStatic = {
    "LinearScale",
    swig_LinearScale_Sf_SwigStatic_methods,
    swig_LinearScale_Sf_SwigStatic_attributes,
    swig_LinearScale_Sf_SwigStatic_constants,
    swig_LinearScale_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LinearScale_bases[] = {0,0};
static const char *swig_LinearScale_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_LinearScale = { "LinearScale", "LinearScale", &SWIGTYPE_p_mopo__LinearScale,_proxy__wrap_new_LinearScale, swig_delete_LinearScale, swig_LinearScale_methods, swig_LinearScale_attributes, &swig_LinearScale_Sf_SwigStatic, swig_LinearScale_meta, swig_LinearScale_bases, swig_LinearScale_base_names };

static int _wrap_new_Square(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Square *result = 0 ;
  
  SWIG_check_num_args("mopo::Square::Square",0,0)
  result = (mopo::Square *)new mopo::Square();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Square,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Square_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Square *arg1 = (mopo::Square *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Square::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Square::clone",1,"mopo::Square const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Square,0))){
    SWIG_fail_ptr("Square_clone",1,SWIGTYPE_p_mopo__Square);
  }
  
  result = (mopo::Processor *)((mopo::Square const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Square_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Square *arg1 = (mopo::Square *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Square::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Square::tick",1,"mopo::Square *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Square::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Square,0))){
    SWIG_fail_ptr("Square_tick",1,SWIGTYPE_p_mopo__Square);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Square_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Square *arg1 = (mopo::Square *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::Square::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Square::bufferTick",1,"mopo::Square *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Square::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::Square::bufferTick",3,"mopo::mopo_float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::Square::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Square,0))){
    SWIG_fail_ptr("Square_bufferTick",1,SWIGTYPE_p_mopo__Square);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Square_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Square_bufferTick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Square_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Square *arg1 = (mopo::Square *) 0 ;
  
  SWIG_check_num_args("mopo::Square::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Square::process",1,"mopo::Square *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Square,0))){
    SWIG_fail_ptr("Square_process",1,SWIGTYPE_p_mopo__Square);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Square(void *obj) {
mopo::Square *arg1 = (mopo::Square *) obj;
delete arg1;
}
static int _proxy__wrap_new_Square(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Square);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Square_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Square_methods[]= {
    { "clone", _wrap_Square_clone},
    { "tick", _wrap_Square_tick},
    { "bufferTick", _wrap_Square_bufferTick},
    { "process", _wrap_Square_process},
    {0,0}
};
static swig_lua_method swig_Square_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Square_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Square_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Square_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Square_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Square_Sf_SwigStatic = {
    "Square",
    swig_Square_Sf_SwigStatic_methods,
    swig_Square_Sf_SwigStatic_attributes,
    swig_Square_Sf_SwigStatic_constants,
    swig_Square_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Square_bases[] = {0,0};
static const char *swig_Square_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_Square = { "Square", "Square", &SWIGTYPE_p_mopo__Square,_proxy__wrap_new_Square, swig_delete_Square, swig_Square_methods, swig_Square_attributes, &swig_Square_Sf_SwigStatic, swig_Square_meta, swig_Square_bases, swig_Square_base_names };

static int _wrap_new_ExponentialScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::ExponentialScale *result = 0 ;
  
  SWIG_check_num_args("mopo::ExponentialScale::ExponentialScale",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::ExponentialScale::ExponentialScale",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::ExponentialScale *)new mopo::ExponentialScale(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ExponentialScale,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ExponentialScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ExponentialScale *result = 0 ;
  
  SWIG_check_num_args("mopo::ExponentialScale::ExponentialScale",0,0)
  result = (mopo::ExponentialScale *)new mopo::ExponentialScale();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ExponentialScale,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ExponentialScale(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ExponentialScale__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ExponentialScale__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ExponentialScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::ExponentialScale::ExponentialScale(mopo::mopo_float)\n"
    "    mopo::ExponentialScale::ExponentialScale()\n");
  lua_error(L);return 0;
}


static int _wrap_ExponentialScale_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ExponentialScale *arg1 = (mopo::ExponentialScale *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::ExponentialScale::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ExponentialScale::clone",1,"mopo::ExponentialScale const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ExponentialScale,0))){
    SWIG_fail_ptr("ExponentialScale_clone",1,SWIGTYPE_p_mopo__ExponentialScale);
  }
  
  result = (mopo::Processor *)((mopo::ExponentialScale const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExponentialScale_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ExponentialScale *arg1 = (mopo::ExponentialScale *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::ExponentialScale::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ExponentialScale::tick",1,"mopo::ExponentialScale *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::ExponentialScale::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ExponentialScale,0))){
    SWIG_fail_ptr("ExponentialScale_tick",1,SWIGTYPE_p_mopo__ExponentialScale);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExponentialScale_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ExponentialScale *arg1 = (mopo::ExponentialScale *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::ExponentialScale::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ExponentialScale::bufferTick",1,"mopo::ExponentialScale *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::ExponentialScale::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::ExponentialScale::bufferTick",3,"mopo::mopo_float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::ExponentialScale::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ExponentialScale,0))){
    SWIG_fail_ptr("ExponentialScale_bufferTick",1,SWIGTYPE_p_mopo__ExponentialScale);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ExponentialScale_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ExponentialScale_bufferTick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExponentialScale_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ExponentialScale *arg1 = (mopo::ExponentialScale *) 0 ;
  
  SWIG_check_num_args("mopo::ExponentialScale::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ExponentialScale::process",1,"mopo::ExponentialScale *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ExponentialScale,0))){
    SWIG_fail_ptr("ExponentialScale_process",1,SWIGTYPE_p_mopo__ExponentialScale);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ExponentialScale(void *obj) {
mopo::ExponentialScale *arg1 = (mopo::ExponentialScale *) obj;
delete arg1;
}
static int _proxy__wrap_new_ExponentialScale(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ExponentialScale);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ExponentialScale_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ExponentialScale_methods[]= {
    { "clone", _wrap_ExponentialScale_clone},
    { "tick", _wrap_ExponentialScale_tick},
    { "bufferTick", _wrap_ExponentialScale_bufferTick},
    { "process", _wrap_ExponentialScale_process},
    {0,0}
};
static swig_lua_method swig_ExponentialScale_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ExponentialScale_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ExponentialScale_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ExponentialScale_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ExponentialScale_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ExponentialScale_Sf_SwigStatic = {
    "ExponentialScale",
    swig_ExponentialScale_Sf_SwigStatic_methods,
    swig_ExponentialScale_Sf_SwigStatic_attributes,
    swig_ExponentialScale_Sf_SwigStatic_constants,
    swig_ExponentialScale_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ExponentialScale_bases[] = {0,0};
static const char *swig_ExponentialScale_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_ExponentialScale = { "ExponentialScale", "ExponentialScale", &SWIGTYPE_p_mopo__ExponentialScale,_proxy__wrap_new_ExponentialScale, swig_delete_ExponentialScale, swig_ExponentialScale_methods, swig_ExponentialScale_attributes, &swig_ExponentialScale_Sf_SwigStatic, swig_ExponentialScale_meta, swig_ExponentialScale_bases, swig_ExponentialScale_base_names };

static int _wrap_new_MidiScale(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MidiScale *result = 0 ;
  
  SWIG_check_num_args("mopo::MidiScale::MidiScale",0,0)
  result = (mopo::MidiScale *)new mopo::MidiScale();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__MidiScale,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiScale_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MidiScale *arg1 = (mopo::MidiScale *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::MidiScale::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::MidiScale::clone",1,"mopo::MidiScale const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__MidiScale,0))){
    SWIG_fail_ptr("MidiScale_clone",1,SWIGTYPE_p_mopo__MidiScale);
  }
  
  result = (mopo::Processor *)((mopo::MidiScale const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiScale_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MidiScale *arg1 = (mopo::MidiScale *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::MidiScale::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::MidiScale::tick",1,"mopo::MidiScale *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::MidiScale::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__MidiScale,0))){
    SWIG_fail_ptr("MidiScale_tick",1,SWIGTYPE_p_mopo__MidiScale);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiScale_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MidiScale *arg1 = (mopo::MidiScale *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::MidiScale::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::MidiScale::bufferTick",1,"mopo::MidiScale *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::MidiScale::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::MidiScale::bufferTick",3,"mopo::mopo_float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::MidiScale::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__MidiScale,0))){
    SWIG_fail_ptr("MidiScale_bufferTick",1,SWIGTYPE_p_mopo__MidiScale);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MidiScale_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MidiScale_bufferTick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiScale_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MidiScale *arg1 = (mopo::MidiScale *) 0 ;
  
  SWIG_check_num_args("mopo::MidiScale::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::MidiScale::process",1,"mopo::MidiScale *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__MidiScale,0))){
    SWIG_fail_ptr("MidiScale_process",1,SWIGTYPE_p_mopo__MidiScale);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MidiScale(void *obj) {
mopo::MidiScale *arg1 = (mopo::MidiScale *) obj;
delete arg1;
}
static int _proxy__wrap_new_MidiScale(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MidiScale);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MidiScale_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MidiScale_methods[]= {
    { "clone", _wrap_MidiScale_clone},
    { "tick", _wrap_MidiScale_tick},
    { "bufferTick", _wrap_MidiScale_bufferTick},
    { "process", _wrap_MidiScale_process},
    {0,0}
};
static swig_lua_method swig_MidiScale_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MidiScale_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MidiScale_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MidiScale_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MidiScale_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MidiScale_Sf_SwigStatic = {
    "MidiScale",
    swig_MidiScale_Sf_SwigStatic_methods,
    swig_MidiScale_Sf_SwigStatic_attributes,
    swig_MidiScale_Sf_SwigStatic_constants,
    swig_MidiScale_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MidiScale_bases[] = {0,0};
static const char *swig_MidiScale_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_MidiScale = { "MidiScale", "MidiScale", &SWIGTYPE_p_mopo__MidiScale,_proxy__wrap_new_MidiScale, swig_delete_MidiScale, swig_MidiScale_methods, swig_MidiScale_attributes, &swig_MidiScale_Sf_SwigStatic, swig_MidiScale_meta, swig_MidiScale_bases, swig_MidiScale_base_names };

static int _wrap_new_ResonanceScale(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ResonanceScale *result = 0 ;
  
  SWIG_check_num_args("mopo::ResonanceScale::ResonanceScale",0,0)
  result = (mopo::ResonanceScale *)new mopo::ResonanceScale();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ResonanceScale,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResonanceScale_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ResonanceScale *arg1 = (mopo::ResonanceScale *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::ResonanceScale::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ResonanceScale::clone",1,"mopo::ResonanceScale const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ResonanceScale,0))){
    SWIG_fail_ptr("ResonanceScale_clone",1,SWIGTYPE_p_mopo__ResonanceScale);
  }
  
  result = (mopo::Processor *)((mopo::ResonanceScale const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResonanceScale_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ResonanceScale *arg1 = (mopo::ResonanceScale *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::ResonanceScale::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ResonanceScale::tick",1,"mopo::ResonanceScale *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::ResonanceScale::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ResonanceScale,0))){
    SWIG_fail_ptr("ResonanceScale_tick",1,SWIGTYPE_p_mopo__ResonanceScale);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResonanceScale_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ResonanceScale *arg1 = (mopo::ResonanceScale *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::ResonanceScale::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ResonanceScale::bufferTick",1,"mopo::ResonanceScale *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::ResonanceScale::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::ResonanceScale::bufferTick",3,"mopo::mopo_float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::ResonanceScale::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ResonanceScale,0))){
    SWIG_fail_ptr("ResonanceScale_bufferTick",1,SWIGTYPE_p_mopo__ResonanceScale);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ResonanceScale_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ResonanceScale_bufferTick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResonanceScale_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ResonanceScale *arg1 = (mopo::ResonanceScale *) 0 ;
  
  SWIG_check_num_args("mopo::ResonanceScale::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ResonanceScale::process",1,"mopo::ResonanceScale *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ResonanceScale,0))){
    SWIG_fail_ptr("ResonanceScale_process",1,SWIGTYPE_p_mopo__ResonanceScale);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ResonanceScale(void *obj) {
mopo::ResonanceScale *arg1 = (mopo::ResonanceScale *) obj;
delete arg1;
}
static int _proxy__wrap_new_ResonanceScale(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ResonanceScale);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ResonanceScale_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ResonanceScale_methods[]= {
    { "clone", _wrap_ResonanceScale_clone},
    { "tick", _wrap_ResonanceScale_tick},
    { "bufferTick", _wrap_ResonanceScale_bufferTick},
    { "process", _wrap_ResonanceScale_process},
    {0,0}
};
static swig_lua_method swig_ResonanceScale_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ResonanceScale_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ResonanceScale_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ResonanceScale_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ResonanceScale_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ResonanceScale_Sf_SwigStatic = {
    "ResonanceScale",
    swig_ResonanceScale_Sf_SwigStatic_methods,
    swig_ResonanceScale_Sf_SwigStatic_attributes,
    swig_ResonanceScale_Sf_SwigStatic_constants,
    swig_ResonanceScale_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ResonanceScale_bases[] = {0,0};
static const char *swig_ResonanceScale_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_ResonanceScale = { "ResonanceScale", "ResonanceScale", &SWIGTYPE_p_mopo__ResonanceScale,_proxy__wrap_new_ResonanceScale, swig_delete_ResonanceScale, swig_ResonanceScale_methods, swig_ResonanceScale_attributes, &swig_ResonanceScale_Sf_SwigStatic, swig_ResonanceScale_meta, swig_ResonanceScale_bases, swig_ResonanceScale_base_names };

static int _wrap_new_MagnitudeScale(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MagnitudeScale *result = 0 ;
  
  SWIG_check_num_args("mopo::MagnitudeScale::MagnitudeScale",0,0)
  result = (mopo::MagnitudeScale *)new mopo::MagnitudeScale();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__MagnitudeScale,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MagnitudeScale_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MagnitudeScale *arg1 = (mopo::MagnitudeScale *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::MagnitudeScale::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::MagnitudeScale::clone",1,"mopo::MagnitudeScale const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__MagnitudeScale,0))){
    SWIG_fail_ptr("MagnitudeScale_clone",1,SWIGTYPE_p_mopo__MagnitudeScale);
  }
  
  result = (mopo::Processor *)((mopo::MagnitudeScale const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MagnitudeScale_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MagnitudeScale *arg1 = (mopo::MagnitudeScale *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::MagnitudeScale::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::MagnitudeScale::tick",1,"mopo::MagnitudeScale *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::MagnitudeScale::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__MagnitudeScale,0))){
    SWIG_fail_ptr("MagnitudeScale_tick",1,SWIGTYPE_p_mopo__MagnitudeScale);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MagnitudeScale_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MagnitudeScale *arg1 = (mopo::MagnitudeScale *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::MagnitudeScale::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::MagnitudeScale::bufferTick",1,"mopo::MagnitudeScale *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::MagnitudeScale::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::MagnitudeScale::bufferTick",3,"mopo::mopo_float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::MagnitudeScale::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__MagnitudeScale,0))){
    SWIG_fail_ptr("MagnitudeScale_bufferTick",1,SWIGTYPE_p_mopo__MagnitudeScale);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MagnitudeScale_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MagnitudeScale_bufferTick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MagnitudeScale_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::MagnitudeScale *arg1 = (mopo::MagnitudeScale *) 0 ;
  
  SWIG_check_num_args("mopo::MagnitudeScale::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::MagnitudeScale::process",1,"mopo::MagnitudeScale *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__MagnitudeScale,0))){
    SWIG_fail_ptr("MagnitudeScale_process",1,SWIGTYPE_p_mopo__MagnitudeScale);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MagnitudeScale(void *obj) {
mopo::MagnitudeScale *arg1 = (mopo::MagnitudeScale *) obj;
delete arg1;
}
static int _proxy__wrap_new_MagnitudeScale(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MagnitudeScale);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MagnitudeScale_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MagnitudeScale_methods[]= {
    { "clone", _wrap_MagnitudeScale_clone},
    { "tick", _wrap_MagnitudeScale_tick},
    { "bufferTick", _wrap_MagnitudeScale_bufferTick},
    { "process", _wrap_MagnitudeScale_process},
    {0,0}
};
static swig_lua_method swig_MagnitudeScale_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MagnitudeScale_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MagnitudeScale_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MagnitudeScale_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MagnitudeScale_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MagnitudeScale_Sf_SwigStatic = {
    "MagnitudeScale",
    swig_MagnitudeScale_Sf_SwigStatic_methods,
    swig_MagnitudeScale_Sf_SwigStatic_attributes,
    swig_MagnitudeScale_Sf_SwigStatic_constants,
    swig_MagnitudeScale_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MagnitudeScale_bases[] = {0,0};
static const char *swig_MagnitudeScale_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_MagnitudeScale = { "MagnitudeScale", "MagnitudeScale", &SWIGTYPE_p_mopo__MagnitudeScale,_proxy__wrap_new_MagnitudeScale, swig_delete_MagnitudeScale, swig_MagnitudeScale_methods, swig_MagnitudeScale_attributes, &swig_MagnitudeScale_Sf_SwigStatic, swig_MagnitudeScale_meta, swig_MagnitudeScale_bases, swig_MagnitudeScale_base_names };

static int _wrap_new_Add(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Add *result = 0 ;
  
  SWIG_check_num_args("mopo::Add::Add",0,0)
  result = (mopo::Add *)new mopo::Add();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Add,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Add_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Add *arg1 = (mopo::Add *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Add::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Add::clone",1,"mopo::Add const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Add,0))){
    SWIG_fail_ptr("Add_clone",1,SWIGTYPE_p_mopo__Add);
  }
  
  result = (mopo::Processor *)((mopo::Add const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Add_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Add *arg1 = (mopo::Add *) 0 ;
  
  SWIG_check_num_args("mopo::Add::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Add::process",1,"mopo::Add *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Add,0))){
    SWIG_fail_ptr("Add_process",1,SWIGTYPE_p_mopo__Add);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Add_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Add *arg1 = (mopo::Add *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Add::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Add::tick",1,"mopo::Add *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Add::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Add,0))){
    SWIG_fail_ptr("Add_tick",1,SWIGTYPE_p_mopo__Add);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Add_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Add *arg1 = (mopo::Add *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg4 = (mopo::mopo_float *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("mopo::Add::bufferTick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Add::bufferTick",1,"mopo::Add *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Add::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::Add::bufferTick",3,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("mopo::Add::bufferTick",4,"mopo::mopo_float const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("mopo::Add::bufferTick",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Add,0))){
    SWIG_fail_ptr("Add_bufferTick",1,SWIGTYPE_p_mopo__Add);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Add_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Add_bufferTick",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Add_bufferTick",4,SWIGTYPE_p_double);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,(mopo::mopo_float const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Add(void *obj) {
mopo::Add *arg1 = (mopo::Add *) obj;
delete arg1;
}
static int _proxy__wrap_new_Add(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Add);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Add_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Add_methods[]= {
    { "clone", _wrap_Add_clone},
    { "process", _wrap_Add_process},
    { "tick", _wrap_Add_tick},
    { "bufferTick", _wrap_Add_bufferTick},
    {0,0}
};
static swig_lua_method swig_Add_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Add_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Add_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Add_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Add_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Add_Sf_SwigStatic = {
    "Add",
    swig_Add_Sf_SwigStatic_methods,
    swig_Add_Sf_SwigStatic_attributes,
    swig_Add_Sf_SwigStatic_constants,
    swig_Add_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Add_bases[] = {0,0};
static const char *swig_Add_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_Add = { "Add", "Add", &SWIGTYPE_p_mopo__Add,_proxy__wrap_new_Add, swig_delete_Add, swig_Add_methods, swig_Add_attributes, &swig_Add_Sf_SwigStatic, swig_Add_meta, swig_Add_bases, swig_Add_base_names };

static int _wrap_new_VariableAdd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  mopo::VariableAdd *result = 0 ;
  
  SWIG_check_num_args("mopo::VariableAdd::VariableAdd",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::VariableAdd::VariableAdd",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (mopo::VariableAdd *)new mopo::VariableAdd(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__VariableAdd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VariableAdd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VariableAdd *result = 0 ;
  
  SWIG_check_num_args("mopo::VariableAdd::VariableAdd",0,0)
  result = (mopo::VariableAdd *)new mopo::VariableAdd();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__VariableAdd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VariableAdd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_VariableAdd__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_VariableAdd__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_VariableAdd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::VariableAdd::VariableAdd(int)\n"
    "    mopo::VariableAdd::VariableAdd()\n");
  lua_error(L);return 0;
}


static int _wrap_VariableAdd_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VariableAdd *arg1 = (mopo::VariableAdd *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::VariableAdd::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VariableAdd::clone",1,"mopo::VariableAdd const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VariableAdd,0))){
    SWIG_fail_ptr("VariableAdd_clone",1,SWIGTYPE_p_mopo__VariableAdd);
  }
  
  result = (mopo::Processor *)((mopo::VariableAdd const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableAdd_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VariableAdd *arg1 = (mopo::VariableAdd *) 0 ;
  
  SWIG_check_num_args("mopo::VariableAdd::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VariableAdd::process",1,"mopo::VariableAdd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VariableAdd,0))){
    SWIG_fail_ptr("VariableAdd_process",1,SWIGTYPE_p_mopo__VariableAdd);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableAdd_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VariableAdd *arg1 = (mopo::VariableAdd *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::VariableAdd::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VariableAdd::tick",1,"mopo::VariableAdd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VariableAdd::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VariableAdd,0))){
    SWIG_fail_ptr("VariableAdd_tick",1,SWIGTYPE_p_mopo__VariableAdd);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VariableAdd(void *obj) {
mopo::VariableAdd *arg1 = (mopo::VariableAdd *) obj;
delete arg1;
}
static int _proxy__wrap_new_VariableAdd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VariableAdd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VariableAdd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VariableAdd_methods[]= {
    { "clone", _wrap_VariableAdd_clone},
    { "process", _wrap_VariableAdd_process},
    { "tick", _wrap_VariableAdd_tick},
    {0,0}
};
static swig_lua_method swig_VariableAdd_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VariableAdd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VariableAdd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VariableAdd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VariableAdd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VariableAdd_Sf_SwigStatic = {
    "VariableAdd",
    swig_VariableAdd_Sf_SwigStatic_methods,
    swig_VariableAdd_Sf_SwigStatic_attributes,
    swig_VariableAdd_Sf_SwigStatic_constants,
    swig_VariableAdd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VariableAdd_bases[] = {0,0};
static const char *swig_VariableAdd_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_VariableAdd = { "VariableAdd", "VariableAdd", &SWIGTYPE_p_mopo__VariableAdd,_proxy__wrap_new_VariableAdd, swig_delete_VariableAdd, swig_VariableAdd_methods, swig_VariableAdd_attributes, &swig_VariableAdd_Sf_SwigStatic, swig_VariableAdd_meta, swig_VariableAdd_bases, swig_VariableAdd_base_names };

static int _wrap_new_Subtract(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Subtract *result = 0 ;
  
  SWIG_check_num_args("mopo::Subtract::Subtract",0,0)
  result = (mopo::Subtract *)new mopo::Subtract();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Subtract,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Subtract_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Subtract *arg1 = (mopo::Subtract *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Subtract::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Subtract::clone",1,"mopo::Subtract const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Subtract,0))){
    SWIG_fail_ptr("Subtract_clone",1,SWIGTYPE_p_mopo__Subtract);
  }
  
  result = (mopo::Processor *)((mopo::Subtract const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Subtract_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Subtract *arg1 = (mopo::Subtract *) 0 ;
  
  SWIG_check_num_args("mopo::Subtract::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Subtract::process",1,"mopo::Subtract *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Subtract,0))){
    SWIG_fail_ptr("Subtract_process",1,SWIGTYPE_p_mopo__Subtract);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Subtract_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Subtract *arg1 = (mopo::Subtract *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Subtract::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Subtract::tick",1,"mopo::Subtract *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Subtract::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Subtract,0))){
    SWIG_fail_ptr("Subtract_tick",1,SWIGTYPE_p_mopo__Subtract);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Subtract_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Subtract *arg1 = (mopo::Subtract *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg4 = (mopo::mopo_float *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("mopo::Subtract::bufferTick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Subtract::bufferTick",1,"mopo::Subtract *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Subtract::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::Subtract::bufferTick",3,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("mopo::Subtract::bufferTick",4,"mopo::mopo_float const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("mopo::Subtract::bufferTick",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Subtract,0))){
    SWIG_fail_ptr("Subtract_bufferTick",1,SWIGTYPE_p_mopo__Subtract);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Subtract_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Subtract_bufferTick",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Subtract_bufferTick",4,SWIGTYPE_p_double);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,(mopo::mopo_float const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Subtract(void *obj) {
mopo::Subtract *arg1 = (mopo::Subtract *) obj;
delete arg1;
}
static int _proxy__wrap_new_Subtract(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Subtract);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Subtract_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Subtract_methods[]= {
    { "clone", _wrap_Subtract_clone},
    { "process", _wrap_Subtract_process},
    { "tick", _wrap_Subtract_tick},
    { "bufferTick", _wrap_Subtract_bufferTick},
    {0,0}
};
static swig_lua_method swig_Subtract_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Subtract_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Subtract_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Subtract_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Subtract_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Subtract_Sf_SwigStatic = {
    "Subtract",
    swig_Subtract_Sf_SwigStatic_methods,
    swig_Subtract_Sf_SwigStatic_attributes,
    swig_Subtract_Sf_SwigStatic_constants,
    swig_Subtract_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Subtract_bases[] = {0,0};
static const char *swig_Subtract_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_Subtract = { "Subtract", "Subtract", &SWIGTYPE_p_mopo__Subtract,_proxy__wrap_new_Subtract, swig_delete_Subtract, swig_Subtract_methods, swig_Subtract_attributes, &swig_Subtract_Sf_SwigStatic, swig_Subtract_meta, swig_Subtract_bases, swig_Subtract_base_names };

static int _wrap_new_Multiply(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Multiply *result = 0 ;
  
  SWIG_check_num_args("mopo::Multiply::Multiply",0,0)
  result = (mopo::Multiply *)new mopo::Multiply();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Multiply,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Multiply_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Multiply *arg1 = (mopo::Multiply *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Multiply::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Multiply::clone",1,"mopo::Multiply const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Multiply,0))){
    SWIG_fail_ptr("Multiply_clone",1,SWIGTYPE_p_mopo__Multiply);
  }
  
  result = (mopo::Processor *)((mopo::Multiply const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Multiply_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Multiply *arg1 = (mopo::Multiply *) 0 ;
  
  SWIG_check_num_args("mopo::Multiply::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Multiply::process",1,"mopo::Multiply *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Multiply,0))){
    SWIG_fail_ptr("Multiply_process",1,SWIGTYPE_p_mopo__Multiply);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Multiply_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Multiply *arg1 = (mopo::Multiply *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Multiply::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Multiply::tick",1,"mopo::Multiply *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Multiply::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Multiply,0))){
    SWIG_fail_ptr("Multiply_tick",1,SWIGTYPE_p_mopo__Multiply);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Multiply_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Multiply *arg1 = (mopo::Multiply *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg4 = (mopo::mopo_float *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("mopo::Multiply::bufferTick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Multiply::bufferTick",1,"mopo::Multiply *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Multiply::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::Multiply::bufferTick",3,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("mopo::Multiply::bufferTick",4,"mopo::mopo_float const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("mopo::Multiply::bufferTick",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Multiply,0))){
    SWIG_fail_ptr("Multiply_bufferTick",1,SWIGTYPE_p_mopo__Multiply);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Multiply_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Multiply_bufferTick",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Multiply_bufferTick",4,SWIGTYPE_p_double);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,(mopo::mopo_float const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Multiply(void *obj) {
mopo::Multiply *arg1 = (mopo::Multiply *) obj;
delete arg1;
}
static int _proxy__wrap_new_Multiply(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Multiply);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Multiply_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Multiply_methods[]= {
    { "clone", _wrap_Multiply_clone},
    { "process", _wrap_Multiply_process},
    { "tick", _wrap_Multiply_tick},
    { "bufferTick", _wrap_Multiply_bufferTick},
    {0,0}
};
static swig_lua_method swig_Multiply_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Multiply_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Multiply_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Multiply_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Multiply_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Multiply_Sf_SwigStatic = {
    "Multiply",
    swig_Multiply_Sf_SwigStatic_methods,
    swig_Multiply_Sf_SwigStatic_attributes,
    swig_Multiply_Sf_SwigStatic_constants,
    swig_Multiply_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Multiply_bases[] = {0,0};
static const char *swig_Multiply_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_Multiply = { "Multiply", "Multiply", &SWIGTYPE_p_mopo__Multiply,_proxy__wrap_new_Multiply, swig_delete_Multiply, swig_Multiply_methods, swig_Multiply_attributes, &swig_Multiply_Sf_SwigStatic, swig_Multiply_meta, swig_Multiply_bases, swig_Multiply_base_names };

static int _wrap_new_Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Interpolate *result = 0 ;
  
  SWIG_check_num_args("mopo::Interpolate::Interpolate",0,0)
  result = (mopo::Interpolate *)new mopo::Interpolate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Interpolate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Interpolate_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Interpolate *arg1 = (mopo::Interpolate *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Interpolate::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Interpolate::clone",1,"mopo::Interpolate const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Interpolate,0))){
    SWIG_fail_ptr("Interpolate_clone",1,SWIGTYPE_p_mopo__Interpolate);
  }
  
  result = (mopo::Processor *)((mopo::Interpolate const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Interpolate_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Interpolate *arg1 = (mopo::Interpolate *) 0 ;
  
  SWIG_check_num_args("mopo::Interpolate::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Interpolate::process",1,"mopo::Interpolate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Interpolate,0))){
    SWIG_fail_ptr("Interpolate_process",1,SWIGTYPE_p_mopo__Interpolate);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Interpolate_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Interpolate *arg1 = (mopo::Interpolate *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Interpolate::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Interpolate::tick",1,"mopo::Interpolate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Interpolate::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Interpolate,0))){
    SWIG_fail_ptr("Interpolate_tick",1,SWIGTYPE_p_mopo__Interpolate);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Interpolate_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Interpolate *arg1 = (mopo::Interpolate *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg4 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg5 = (mopo::mopo_float *) 0 ;
  int arg6 ;
  
  SWIG_check_num_args("mopo::Interpolate::bufferTick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Interpolate::bufferTick",1,"mopo::Interpolate *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::Interpolate::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::Interpolate::bufferTick",3,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("mopo::Interpolate::bufferTick",4,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("mopo::Interpolate::bufferTick",5,"mopo::mopo_float const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("mopo::Interpolate::bufferTick",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Interpolate,0))){
    SWIG_fail_ptr("Interpolate_bufferTick",1,SWIGTYPE_p_mopo__Interpolate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Interpolate_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Interpolate_bufferTick",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Interpolate_bufferTick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Interpolate_bufferTick",5,SWIGTYPE_p_double);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,(mopo::mopo_float const *)arg4,(mopo::mopo_float const *)arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Interpolate(void *obj) {
mopo::Interpolate *arg1 = (mopo::Interpolate *) obj;
delete arg1;
}
static int _proxy__wrap_new_Interpolate(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Interpolate);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Interpolate_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Interpolate_methods[]= {
    { "clone", _wrap_Interpolate_clone},
    { "process", _wrap_Interpolate_process},
    { "tick", _wrap_Interpolate_tick},
    { "bufferTick", _wrap_Interpolate_bufferTick},
    {0,0}
};
static swig_lua_method swig_Interpolate_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Interpolate_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Interpolate_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kFrom", mopo::Interpolate::kFrom)},
    {SWIG_LUA_CONSTTAB_INT("kTo", mopo::Interpolate::kTo)},
    {SWIG_LUA_CONSTTAB_INT("kFractional", mopo::Interpolate::kFractional)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::Interpolate::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Interpolate_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Interpolate_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Interpolate_Sf_SwigStatic = {
    "Interpolate",
    swig_Interpolate_Sf_SwigStatic_methods,
    swig_Interpolate_Sf_SwigStatic_attributes,
    swig_Interpolate_Sf_SwigStatic_constants,
    swig_Interpolate_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Interpolate_bases[] = {0,0};
static const char *swig_Interpolate_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_Interpolate = { "Interpolate", "Interpolate", &SWIGTYPE_p_mopo__Interpolate,_proxy__wrap_new_Interpolate, swig_delete_Interpolate, swig_Interpolate_methods, swig_Interpolate_attributes, &swig_Interpolate_Sf_SwigStatic, swig_Interpolate_meta, swig_Interpolate_bases, swig_Interpolate_base_names };

static int _wrap_new_BilinearInterpolate(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BilinearInterpolate *result = 0 ;
  
  SWIG_check_num_args("mopo::BilinearInterpolate::BilinearInterpolate",0,0)
  result = (mopo::BilinearInterpolate *)new mopo::BilinearInterpolate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__BilinearInterpolate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BilinearInterpolate_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BilinearInterpolate *arg1 = (mopo::BilinearInterpolate *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::BilinearInterpolate::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BilinearInterpolate::clone",1,"mopo::BilinearInterpolate const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BilinearInterpolate,0))){
    SWIG_fail_ptr("BilinearInterpolate_clone",1,SWIGTYPE_p_mopo__BilinearInterpolate);
  }
  
  result = (mopo::Processor *)((mopo::BilinearInterpolate const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BilinearInterpolate_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BilinearInterpolate *arg1 = (mopo::BilinearInterpolate *) 0 ;
  
  SWIG_check_num_args("mopo::BilinearInterpolate::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BilinearInterpolate::process",1,"mopo::BilinearInterpolate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BilinearInterpolate,0))){
    SWIG_fail_ptr("BilinearInterpolate_process",1,SWIGTYPE_p_mopo__BilinearInterpolate);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BilinearInterpolate_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::BilinearInterpolate *arg1 = (mopo::BilinearInterpolate *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::BilinearInterpolate::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::BilinearInterpolate::tick",1,"mopo::BilinearInterpolate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::BilinearInterpolate::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__BilinearInterpolate,0))){
    SWIG_fail_ptr("BilinearInterpolate_tick",1,SWIGTYPE_p_mopo__BilinearInterpolate);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BilinearInterpolate(void *obj) {
mopo::BilinearInterpolate *arg1 = (mopo::BilinearInterpolate *) obj;
delete arg1;
}
static int _proxy__wrap_new_BilinearInterpolate(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BilinearInterpolate);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BilinearInterpolate_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BilinearInterpolate_methods[]= {
    { "clone", _wrap_BilinearInterpolate_clone},
    { "process", _wrap_BilinearInterpolate_process},
    { "tick", _wrap_BilinearInterpolate_tick},
    {0,0}
};
static swig_lua_method swig_BilinearInterpolate_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BilinearInterpolate_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BilinearInterpolate_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kTopLeft", mopo::BilinearInterpolate::kTopLeft)},
    {SWIG_LUA_CONSTTAB_INT("kTopRight", mopo::BilinearInterpolate::kTopRight)},
    {SWIG_LUA_CONSTTAB_INT("kBottomLeft", mopo::BilinearInterpolate::kBottomLeft)},
    {SWIG_LUA_CONSTTAB_INT("kBottomRight", mopo::BilinearInterpolate::kBottomRight)},
    {SWIG_LUA_CONSTTAB_INT("kXPosition", mopo::BilinearInterpolate::kXPosition)},
    {SWIG_LUA_CONSTTAB_INT("kYPosition", mopo::BilinearInterpolate::kYPosition)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::BilinearInterpolate::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BilinearInterpolate_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BilinearInterpolate_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BilinearInterpolate_Sf_SwigStatic = {
    "BilinearInterpolate",
    swig_BilinearInterpolate_Sf_SwigStatic_methods,
    swig_BilinearInterpolate_Sf_SwigStatic_attributes,
    swig_BilinearInterpolate_Sf_SwigStatic_constants,
    swig_BilinearInterpolate_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BilinearInterpolate_bases[] = {0,0};
static const char *swig_BilinearInterpolate_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_BilinearInterpolate = { "BilinearInterpolate", "BilinearInterpolate", &SWIGTYPE_p_mopo__BilinearInterpolate,_proxy__wrap_new_BilinearInterpolate, swig_delete_BilinearInterpolate, swig_BilinearInterpolate_methods, swig_BilinearInterpolate_attributes, &swig_BilinearInterpolate_Sf_SwigStatic, swig_BilinearInterpolate_meta, swig_BilinearInterpolate_bases, swig_BilinearInterpolate_base_names };

static int _wrap_new_FrequencyToPhase(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FrequencyToPhase *result = 0 ;
  
  SWIG_check_num_args("mopo::FrequencyToPhase::FrequencyToPhase",0,0)
  result = (mopo::FrequencyToPhase *)new mopo::FrequencyToPhase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__FrequencyToPhase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrequencyToPhase_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FrequencyToPhase *arg1 = (mopo::FrequencyToPhase *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::FrequencyToPhase::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FrequencyToPhase::clone",1,"mopo::FrequencyToPhase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FrequencyToPhase,0))){
    SWIG_fail_ptr("FrequencyToPhase_clone",1,SWIGTYPE_p_mopo__FrequencyToPhase);
  }
  
  result = (mopo::Processor *)((mopo::FrequencyToPhase const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrequencyToPhase_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FrequencyToPhase *arg1 = (mopo::FrequencyToPhase *) 0 ;
  
  SWIG_check_num_args("mopo::FrequencyToPhase::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FrequencyToPhase::process",1,"mopo::FrequencyToPhase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FrequencyToPhase,0))){
    SWIG_fail_ptr("FrequencyToPhase_process",1,SWIGTYPE_p_mopo__FrequencyToPhase);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrequencyToPhase_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FrequencyToPhase *arg1 = (mopo::FrequencyToPhase *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::FrequencyToPhase::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FrequencyToPhase::tick",1,"mopo::FrequencyToPhase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::FrequencyToPhase::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FrequencyToPhase,0))){
    SWIG_fail_ptr("FrequencyToPhase_tick",1,SWIGTYPE_p_mopo__FrequencyToPhase);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrequencyToPhase_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FrequencyToPhase *arg1 = (mopo::FrequencyToPhase *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::FrequencyToPhase::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FrequencyToPhase::bufferTick",1,"mopo::FrequencyToPhase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::FrequencyToPhase::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::FrequencyToPhase::bufferTick",3,"mopo::mopo_float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::FrequencyToPhase::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FrequencyToPhase,0))){
    SWIG_fail_ptr("FrequencyToPhase_bufferTick",1,SWIGTYPE_p_mopo__FrequencyToPhase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FrequencyToPhase_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FrequencyToPhase_bufferTick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FrequencyToPhase(void *obj) {
mopo::FrequencyToPhase *arg1 = (mopo::FrequencyToPhase *) obj;
delete arg1;
}
static int _proxy__wrap_new_FrequencyToPhase(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FrequencyToPhase);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FrequencyToPhase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FrequencyToPhase_methods[]= {
    { "clone", _wrap_FrequencyToPhase_clone},
    { "process", _wrap_FrequencyToPhase_process},
    { "tick", _wrap_FrequencyToPhase_tick},
    { "bufferTick", _wrap_FrequencyToPhase_bufferTick},
    {0,0}
};
static swig_lua_method swig_FrequencyToPhase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FrequencyToPhase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FrequencyToPhase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FrequencyToPhase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FrequencyToPhase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FrequencyToPhase_Sf_SwigStatic = {
    "FrequencyToPhase",
    swig_FrequencyToPhase_Sf_SwigStatic_methods,
    swig_FrequencyToPhase_Sf_SwigStatic_attributes,
    swig_FrequencyToPhase_Sf_SwigStatic_constants,
    swig_FrequencyToPhase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FrequencyToPhase_bases[] = {0,0};
static const char *swig_FrequencyToPhase_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_FrequencyToPhase = { "FrequencyToPhase", "FrequencyToPhase", &SWIGTYPE_p_mopo__FrequencyToPhase,_proxy__wrap_new_FrequencyToPhase, swig_delete_FrequencyToPhase, swig_FrequencyToPhase_methods, swig_FrequencyToPhase_attributes, &swig_FrequencyToPhase_Sf_SwigStatic, swig_FrequencyToPhase_meta, swig_FrequencyToPhase_bases, swig_FrequencyToPhase_base_names };

static int _wrap_new_FrequencyToSamples(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FrequencyToSamples *result = 0 ;
  
  SWIG_check_num_args("mopo::FrequencyToSamples::FrequencyToSamples",0,0)
  result = (mopo::FrequencyToSamples *)new mopo::FrequencyToSamples();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__FrequencyToSamples,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrequencyToSamples_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FrequencyToSamples *arg1 = (mopo::FrequencyToSamples *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::FrequencyToSamples::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FrequencyToSamples::clone",1,"mopo::FrequencyToSamples const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FrequencyToSamples,0))){
    SWIG_fail_ptr("FrequencyToSamples_clone",1,SWIGTYPE_p_mopo__FrequencyToSamples);
  }
  
  result = (mopo::Processor *)((mopo::FrequencyToSamples const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrequencyToSamples_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FrequencyToSamples *arg1 = (mopo::FrequencyToSamples *) 0 ;
  
  SWIG_check_num_args("mopo::FrequencyToSamples::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FrequencyToSamples::process",1,"mopo::FrequencyToSamples *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FrequencyToSamples,0))){
    SWIG_fail_ptr("FrequencyToSamples_process",1,SWIGTYPE_p_mopo__FrequencyToSamples);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrequencyToSamples_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FrequencyToSamples *arg1 = (mopo::FrequencyToSamples *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::FrequencyToSamples::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FrequencyToSamples::tick",1,"mopo::FrequencyToSamples *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::FrequencyToSamples::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FrequencyToSamples,0))){
    SWIG_fail_ptr("FrequencyToSamples_tick",1,SWIGTYPE_p_mopo__FrequencyToSamples);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrequencyToSamples_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::FrequencyToSamples *arg1 = (mopo::FrequencyToSamples *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::FrequencyToSamples::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::FrequencyToSamples::bufferTick",1,"mopo::FrequencyToSamples *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::FrequencyToSamples::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::FrequencyToSamples::bufferTick",3,"mopo::mopo_float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::FrequencyToSamples::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__FrequencyToSamples,0))){
    SWIG_fail_ptr("FrequencyToSamples_bufferTick",1,SWIGTYPE_p_mopo__FrequencyToSamples);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FrequencyToSamples_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FrequencyToSamples_bufferTick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FrequencyToSamples(void *obj) {
mopo::FrequencyToSamples *arg1 = (mopo::FrequencyToSamples *) obj;
delete arg1;
}
static int _proxy__wrap_new_FrequencyToSamples(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FrequencyToSamples);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FrequencyToSamples_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FrequencyToSamples_methods[]= {
    { "clone", _wrap_FrequencyToSamples_clone},
    { "process", _wrap_FrequencyToSamples_process},
    { "tick", _wrap_FrequencyToSamples_tick},
    { "bufferTick", _wrap_FrequencyToSamples_bufferTick},
    {0,0}
};
static swig_lua_method swig_FrequencyToSamples_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FrequencyToSamples_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FrequencyToSamples_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FrequencyToSamples_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FrequencyToSamples_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FrequencyToSamples_Sf_SwigStatic = {
    "FrequencyToSamples",
    swig_FrequencyToSamples_Sf_SwigStatic_methods,
    swig_FrequencyToSamples_Sf_SwigStatic_attributes,
    swig_FrequencyToSamples_Sf_SwigStatic_constants,
    swig_FrequencyToSamples_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FrequencyToSamples_bases[] = {0,0};
static const char *swig_FrequencyToSamples_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_FrequencyToSamples = { "FrequencyToSamples", "FrequencyToSamples", &SWIGTYPE_p_mopo__FrequencyToSamples,_proxy__wrap_new_FrequencyToSamples, swig_delete_FrequencyToSamples, swig_FrequencyToSamples_methods, swig_FrequencyToSamples_attributes, &swig_FrequencyToSamples_Sf_SwigStatic, swig_FrequencyToSamples_meta, swig_FrequencyToSamples_bases, swig_FrequencyToSamples_base_names };

static int _wrap_new_TimeToSamples(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TimeToSamples *result = 0 ;
  
  SWIG_check_num_args("mopo::TimeToSamples::TimeToSamples",0,0)
  result = (mopo::TimeToSamples *)new mopo::TimeToSamples();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__TimeToSamples,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimeToSamples_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TimeToSamples *arg1 = (mopo::TimeToSamples *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::TimeToSamples::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TimeToSamples::clone",1,"mopo::TimeToSamples const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TimeToSamples,0))){
    SWIG_fail_ptr("TimeToSamples_clone",1,SWIGTYPE_p_mopo__TimeToSamples);
  }
  
  result = (mopo::Processor *)((mopo::TimeToSamples const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimeToSamples_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TimeToSamples *arg1 = (mopo::TimeToSamples *) 0 ;
  
  SWIG_check_num_args("mopo::TimeToSamples::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TimeToSamples::process",1,"mopo::TimeToSamples *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TimeToSamples,0))){
    SWIG_fail_ptr("TimeToSamples_process",1,SWIGTYPE_p_mopo__TimeToSamples);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimeToSamples_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TimeToSamples *arg1 = (mopo::TimeToSamples *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::TimeToSamples::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TimeToSamples::tick",1,"mopo::TimeToSamples *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::TimeToSamples::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TimeToSamples,0))){
    SWIG_fail_ptr("TimeToSamples_tick",1,SWIGTYPE_p_mopo__TimeToSamples);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimeToSamples_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TimeToSamples *arg1 = (mopo::TimeToSamples *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::TimeToSamples::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TimeToSamples::bufferTick",1,"mopo::TimeToSamples *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::TimeToSamples::bufferTick",2,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::TimeToSamples::bufferTick",3,"mopo::mopo_float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::TimeToSamples::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TimeToSamples,0))){
    SWIG_fail_ptr("TimeToSamples_bufferTick",1,SWIGTYPE_p_mopo__TimeToSamples);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("TimeToSamples_bufferTick",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("TimeToSamples_bufferTick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,(mopo::mopo_float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TimeToSamples(void *obj) {
mopo::TimeToSamples *arg1 = (mopo::TimeToSamples *) obj;
delete arg1;
}
static int _proxy__wrap_new_TimeToSamples(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TimeToSamples);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TimeToSamples_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TimeToSamples_methods[]= {
    { "clone", _wrap_TimeToSamples_clone},
    { "process", _wrap_TimeToSamples_process},
    { "tick", _wrap_TimeToSamples_tick},
    { "bufferTick", _wrap_TimeToSamples_bufferTick},
    {0,0}
};
static swig_lua_method swig_TimeToSamples_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TimeToSamples_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TimeToSamples_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TimeToSamples_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TimeToSamples_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TimeToSamples_Sf_SwigStatic = {
    "TimeToSamples",
    swig_TimeToSamples_Sf_SwigStatic_methods,
    swig_TimeToSamples_Sf_SwigStatic_attributes,
    swig_TimeToSamples_Sf_SwigStatic_constants,
    swig_TimeToSamples_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TimeToSamples_bases[] = {0,0};
static const char *swig_TimeToSamples_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_TimeToSamples = { "TimeToSamples", "TimeToSamples", &SWIGTYPE_p_mopo__TimeToSamples,_proxy__wrap_new_TimeToSamples, swig_delete_TimeToSamples, swig_TimeToSamples_methods, swig_TimeToSamples_attributes, &swig_TimeToSamples_Sf_SwigStatic, swig_TimeToSamples_meta, swig_TimeToSamples_bases, swig_TimeToSamples_base_names };

static int _wrap_new_SampleAndHoldBuffer(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SampleAndHoldBuffer *result = 0 ;
  
  SWIG_check_num_args("mopo::SampleAndHoldBuffer::SampleAndHoldBuffer",0,0)
  result = (mopo::SampleAndHoldBuffer *)new mopo::SampleAndHoldBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__SampleAndHoldBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleAndHoldBuffer_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SampleAndHoldBuffer *arg1 = (mopo::SampleAndHoldBuffer *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::SampleAndHoldBuffer::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SampleAndHoldBuffer::clone",1,"mopo::SampleAndHoldBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SampleAndHoldBuffer,0))){
    SWIG_fail_ptr("SampleAndHoldBuffer_clone",1,SWIGTYPE_p_mopo__SampleAndHoldBuffer);
  }
  
  result = (mopo::Processor *)((mopo::SampleAndHoldBuffer const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleAndHoldBuffer_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SampleAndHoldBuffer *arg1 = (mopo::SampleAndHoldBuffer *) 0 ;
  
  SWIG_check_num_args("mopo::SampleAndHoldBuffer::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SampleAndHoldBuffer::process",1,"mopo::SampleAndHoldBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SampleAndHoldBuffer,0))){
    SWIG_fail_ptr("SampleAndHoldBuffer_process",1,SWIGTYPE_p_mopo__SampleAndHoldBuffer);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleAndHoldBuffer_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SampleAndHoldBuffer *arg1 = (mopo::SampleAndHoldBuffer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::SampleAndHoldBuffer::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SampleAndHoldBuffer::tick",1,"mopo::SampleAndHoldBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::SampleAndHoldBuffer::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SampleAndHoldBuffer,0))){
    SWIG_fail_ptr("SampleAndHoldBuffer_tick",1,SWIGTYPE_p_mopo__SampleAndHoldBuffer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleAndHoldBuffer_bufferTick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SampleAndHoldBuffer *arg1 = (mopo::SampleAndHoldBuffer *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::SampleAndHoldBuffer::bufferTick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SampleAndHoldBuffer::bufferTick",1,"mopo::SampleAndHoldBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::SampleAndHoldBuffer::bufferTick",2,"mopo::mopo_float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::SampleAndHoldBuffer::bufferTick",3,"mopo::mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::SampleAndHoldBuffer::bufferTick",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SampleAndHoldBuffer,0))){
    SWIG_fail_ptr("SampleAndHoldBuffer_bufferTick",1,SWIGTYPE_p_mopo__SampleAndHoldBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SampleAndHoldBuffer_bufferTick",2,SWIGTYPE_p_double);
  }
  
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->bufferTick(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SampleAndHoldBuffer(void *obj) {
mopo::SampleAndHoldBuffer *arg1 = (mopo::SampleAndHoldBuffer *) obj;
delete arg1;
}
static int _proxy__wrap_new_SampleAndHoldBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SampleAndHoldBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SampleAndHoldBuffer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SampleAndHoldBuffer_methods[]= {
    { "clone", _wrap_SampleAndHoldBuffer_clone},
    { "process", _wrap_SampleAndHoldBuffer_process},
    { "tick", _wrap_SampleAndHoldBuffer_tick},
    { "bufferTick", _wrap_SampleAndHoldBuffer_bufferTick},
    {0,0}
};
static swig_lua_method swig_SampleAndHoldBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SampleAndHoldBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SampleAndHoldBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SampleAndHoldBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SampleAndHoldBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SampleAndHoldBuffer_Sf_SwigStatic = {
    "SampleAndHoldBuffer",
    swig_SampleAndHoldBuffer_Sf_SwigStatic_methods,
    swig_SampleAndHoldBuffer_Sf_SwigStatic_attributes,
    swig_SampleAndHoldBuffer_Sf_SwigStatic_constants,
    swig_SampleAndHoldBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SampleAndHoldBuffer_bases[] = {0,0};
static const char *swig_SampleAndHoldBuffer_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_SampleAndHoldBuffer = { "SampleAndHoldBuffer", "SampleAndHoldBuffer", &SWIGTYPE_p_mopo__SampleAndHoldBuffer,_proxy__wrap_new_SampleAndHoldBuffer, swig_delete_SampleAndHoldBuffer, swig_SampleAndHoldBuffer_methods, swig_SampleAndHoldBuffer_attributes, &swig_SampleAndHoldBuffer_Sf_SwigStatic, swig_SampleAndHoldBuffer_meta, swig_SampleAndHoldBuffer_bases, swig_SampleAndHoldBuffer_base_names };

static int _wrap_new_LinearSmoothBuffer(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LinearSmoothBuffer *result = 0 ;
  
  SWIG_check_num_args("mopo::LinearSmoothBuffer::LinearSmoothBuffer",0,0)
  result = (mopo::LinearSmoothBuffer *)new mopo::LinearSmoothBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__LinearSmoothBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearSmoothBuffer_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LinearSmoothBuffer *arg1 = (mopo::LinearSmoothBuffer *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::LinearSmoothBuffer::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::LinearSmoothBuffer::clone",1,"mopo::LinearSmoothBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__LinearSmoothBuffer,0))){
    SWIG_fail_ptr("LinearSmoothBuffer_clone",1,SWIGTYPE_p_mopo__LinearSmoothBuffer);
  }
  
  result = (mopo::Processor *)((mopo::LinearSmoothBuffer const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearSmoothBuffer_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LinearSmoothBuffer *arg1 = (mopo::LinearSmoothBuffer *) 0 ;
  
  SWIG_check_num_args("mopo::LinearSmoothBuffer::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::LinearSmoothBuffer::process",1,"mopo::LinearSmoothBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__LinearSmoothBuffer,0))){
    SWIG_fail_ptr("LinearSmoothBuffer_process",1,SWIGTYPE_p_mopo__LinearSmoothBuffer);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LinearSmoothBuffer_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LinearSmoothBuffer *arg1 = (mopo::LinearSmoothBuffer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::LinearSmoothBuffer::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::LinearSmoothBuffer::tick",1,"mopo::LinearSmoothBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::LinearSmoothBuffer::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__LinearSmoothBuffer,0))){
    SWIG_fail_ptr("LinearSmoothBuffer_tick",1,SWIGTYPE_p_mopo__LinearSmoothBuffer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LinearSmoothBuffer(void *obj) {
mopo::LinearSmoothBuffer *arg1 = (mopo::LinearSmoothBuffer *) obj;
delete arg1;
}
static int _proxy__wrap_new_LinearSmoothBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LinearSmoothBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LinearSmoothBuffer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LinearSmoothBuffer_methods[]= {
    { "clone", _wrap_LinearSmoothBuffer_clone},
    { "process", _wrap_LinearSmoothBuffer_process},
    { "tick", _wrap_LinearSmoothBuffer_tick},
    {0,0}
};
static swig_lua_method swig_LinearSmoothBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LinearSmoothBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LinearSmoothBuffer_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kValue", mopo::LinearSmoothBuffer::kValue)},
    {SWIG_LUA_CONSTTAB_INT("kTrigger", mopo::LinearSmoothBuffer::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::LinearSmoothBuffer::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LinearSmoothBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LinearSmoothBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LinearSmoothBuffer_Sf_SwigStatic = {
    "LinearSmoothBuffer",
    swig_LinearSmoothBuffer_Sf_SwigStatic_methods,
    swig_LinearSmoothBuffer_Sf_SwigStatic_attributes,
    swig_LinearSmoothBuffer_Sf_SwigStatic_constants,
    swig_LinearSmoothBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LinearSmoothBuffer_bases[] = {0,0};
static const char *swig_LinearSmoothBuffer_base_names[] = {"mopo::Operator *",0};
static swig_lua_class _wrap_class_LinearSmoothBuffer = { "LinearSmoothBuffer", "LinearSmoothBuffer", &SWIGTYPE_p_mopo__LinearSmoothBuffer,_proxy__wrap_new_LinearSmoothBuffer, swig_delete_LinearSmoothBuffer, swig_LinearSmoothBuffer_methods, swig_LinearSmoothBuffer_attributes, &swig_LinearSmoothBuffer_Sf_SwigStatic, swig_LinearSmoothBuffer_meta, swig_LinearSmoothBuffer_bases, swig_LinearSmoothBuffer_base_names };

static int _wrap_new_Oscillator(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Oscillator *result = 0 ;
  
  SWIG_check_num_args("mopo::Oscillator::Oscillator",0,0)
  result = (mopo::Oscillator *)new mopo::Oscillator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Oscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Oscillator *arg1 = (mopo::Oscillator *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Oscillator::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Oscillator::clone",1,"mopo::Oscillator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_clone",1,SWIGTYPE_p_mopo__Oscillator);
  }
  
  result = (mopo::Processor *)((mopo::Oscillator const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_preprocess(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Oscillator *arg1 = (mopo::Oscillator *) 0 ;
  
  SWIG_check_num_args("mopo::Oscillator::preprocess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Oscillator::preprocess",1,"mopo::Oscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_preprocess",1,SWIGTYPE_p_mopo__Oscillator);
  }
  
  (arg1)->preprocess();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Oscillator *arg1 = (mopo::Oscillator *) 0 ;
  
  SWIG_check_num_args("mopo::Oscillator::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Oscillator::process",1,"mopo::Oscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_process",1,SWIGTYPE_p_mopo__Oscillator);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Oscillator *arg1 = (mopo::Oscillator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Oscillator::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Oscillator::tick",1,"mopo::Oscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Oscillator::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_tick",1,SWIGTYPE_p_mopo__Oscillator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Oscillator(void *obj) {
mopo::Oscillator *arg1 = (mopo::Oscillator *) obj;
delete arg1;
}
static int _proxy__wrap_new_Oscillator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Oscillator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Oscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Oscillator_methods[]= {
    { "clone", _wrap_Oscillator_clone},
    { "preprocess", _wrap_Oscillator_preprocess},
    { "process", _wrap_Oscillator_process},
    { "tick", _wrap_Oscillator_tick},
    {0,0}
};
static swig_lua_method swig_Oscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Oscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Oscillator_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kFrequency", mopo::Oscillator::kFrequency)},
    {SWIG_LUA_CONSTTAB_INT("kPhase", mopo::Oscillator::kPhase)},
    {SWIG_LUA_CONSTTAB_INT("kWaveform", mopo::Oscillator::kWaveform)},
    {SWIG_LUA_CONSTTAB_INT("kReset", mopo::Oscillator::kReset)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::Oscillator::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::Oscillator::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kOscPhase", mopo::Oscillator::kOscPhase)},
    {SWIG_LUA_CONSTTAB_INT("kNumOutputs", mopo::Oscillator::kNumOutputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Oscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Oscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Oscillator_Sf_SwigStatic = {
    "Oscillator",
    swig_Oscillator_Sf_SwigStatic_methods,
    swig_Oscillator_Sf_SwigStatic_attributes,
    swig_Oscillator_Sf_SwigStatic_constants,
    swig_Oscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Oscillator_bases[] = {0,0};
static const char *swig_Oscillator_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_Oscillator = { "Oscillator", "Oscillator", &SWIGTYPE_p_mopo__Oscillator,_proxy__wrap_new_Oscillator, swig_delete_Oscillator, swig_Oscillator_methods, swig_Oscillator_attributes, &swig_Oscillator_Sf_SwigStatic, swig_Oscillator_meta, swig_Oscillator_bases, swig_Oscillator_base_names };

static int _wrap_new_PortamentoSlope(lua_State* L) {
  int SWIG_arg = 0;
  mopo::PortamentoSlope *result = 0 ;
  
  SWIG_check_num_args("mopo::PortamentoSlope::PortamentoSlope",0,0)
  result = (mopo::PortamentoSlope *)new mopo::PortamentoSlope();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__PortamentoSlope,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortamentoSlope_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::PortamentoSlope *arg1 = (mopo::PortamentoSlope *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::PortamentoSlope::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::PortamentoSlope::clone",1,"mopo::PortamentoSlope const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__PortamentoSlope,0))){
    SWIG_fail_ptr("PortamentoSlope_clone",1,SWIGTYPE_p_mopo__PortamentoSlope);
  }
  
  result = (mopo::Processor *)((mopo::PortamentoSlope const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortamentoSlope_processTriggers(lua_State* L) {
  int SWIG_arg = 0;
  mopo::PortamentoSlope *arg1 = (mopo::PortamentoSlope *) 0 ;
  
  SWIG_check_num_args("mopo::PortamentoSlope::processTriggers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::PortamentoSlope::processTriggers",1,"mopo::PortamentoSlope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__PortamentoSlope,0))){
    SWIG_fail_ptr("PortamentoSlope_processTriggers",1,SWIGTYPE_p_mopo__PortamentoSlope);
  }
  
  (arg1)->processTriggers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortamentoSlope_processBypass(lua_State* L) {
  int SWIG_arg = 0;
  mopo::PortamentoSlope *arg1 = (mopo::PortamentoSlope *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::PortamentoSlope::processBypass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::PortamentoSlope::processBypass",1,"mopo::PortamentoSlope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::PortamentoSlope::processBypass",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__PortamentoSlope,0))){
    SWIG_fail_ptr("PortamentoSlope_processBypass",1,SWIGTYPE_p_mopo__PortamentoSlope);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->processBypass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortamentoSlope_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::PortamentoSlope *arg1 = (mopo::PortamentoSlope *) 0 ;
  
  SWIG_check_num_args("mopo::PortamentoSlope::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::PortamentoSlope::process",1,"mopo::PortamentoSlope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__PortamentoSlope,0))){
    SWIG_fail_ptr("PortamentoSlope_process",1,SWIGTYPE_p_mopo__PortamentoSlope);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortamentoSlope_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::PortamentoSlope *arg1 = (mopo::PortamentoSlope *) 0 ;
  int arg2 ;
  mopo::mopo_float arg3 ;
  mopo::mopo_float arg4 ;
  mopo::mopo_float arg5 ;
  
  SWIG_check_num_args("mopo::PortamentoSlope::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::PortamentoSlope::tick",1,"mopo::PortamentoSlope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::PortamentoSlope::tick",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::PortamentoSlope::tick",3,"mopo::mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::PortamentoSlope::tick",4,"mopo::mopo_float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("mopo::PortamentoSlope::tick",5,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__PortamentoSlope,0))){
    SWIG_fail_ptr("PortamentoSlope_tick",1,SWIGTYPE_p_mopo__PortamentoSlope);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  arg4 = (mopo::mopo_float)lua_tonumber(L, 4);
  arg5 = (mopo::mopo_float)lua_tonumber(L, 5);
  (arg1)->tick(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PortamentoSlope(void *obj) {
mopo::PortamentoSlope *arg1 = (mopo::PortamentoSlope *) obj;
delete arg1;
}
static int _proxy__wrap_new_PortamentoSlope(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PortamentoSlope);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PortamentoSlope_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PortamentoSlope_methods[]= {
    { "clone", _wrap_PortamentoSlope_clone},
    { "processTriggers", _wrap_PortamentoSlope_processTriggers},
    { "processBypass", _wrap_PortamentoSlope_processBypass},
    { "process", _wrap_PortamentoSlope_process},
    { "tick", _wrap_PortamentoSlope_tick},
    {0,0}
};
static swig_lua_method swig_PortamentoSlope_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PortamentoSlope_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PortamentoSlope_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kTarget", mopo::PortamentoSlope::kTarget)},
    {SWIG_LUA_CONSTTAB_INT("kPortamentoType", mopo::PortamentoSlope::kPortamentoType)},
    {SWIG_LUA_CONSTTAB_INT("kNoteNumber", mopo::PortamentoSlope::kNoteNumber)},
    {SWIG_LUA_CONSTTAB_INT("kRunSeconds", mopo::PortamentoSlope::kRunSeconds)},
    {SWIG_LUA_CONSTTAB_INT("kTriggerJump", mopo::PortamentoSlope::kTriggerJump)},
    {SWIG_LUA_CONSTTAB_INT("kTriggerStart", mopo::PortamentoSlope::kTriggerStart)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::PortamentoSlope::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("kPortamentoOff", mopo::PortamentoSlope::kPortamentoOff)},
    {SWIG_LUA_CONSTTAB_INT("kPortamentoAuto", mopo::PortamentoSlope::kPortamentoAuto)},
    {SWIG_LUA_CONSTTAB_INT("kPortamentoOn", mopo::PortamentoSlope::kPortamentoOn)},
    {SWIG_LUA_CONSTTAB_INT("kNumPortamentoStates", mopo::PortamentoSlope::kNumPortamentoStates)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PortamentoSlope_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PortamentoSlope_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PortamentoSlope_Sf_SwigStatic = {
    "PortamentoSlope",
    swig_PortamentoSlope_Sf_SwigStatic_methods,
    swig_PortamentoSlope_Sf_SwigStatic_attributes,
    swig_PortamentoSlope_Sf_SwigStatic_constants,
    swig_PortamentoSlope_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PortamentoSlope_bases[] = {0,0};
static const char *swig_PortamentoSlope_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_PortamentoSlope = { "PortamentoSlope", "PortamentoSlope", &SWIGTYPE_p_mopo__PortamentoSlope,_proxy__wrap_new_PortamentoSlope, swig_delete_PortamentoSlope, swig_PortamentoSlope_methods, swig_PortamentoSlope_attributes, &swig_PortamentoSlope_Sf_SwigStatic, swig_PortamentoSlope_meta, swig_PortamentoSlope_bases, swig_PortamentoSlope_base_names };

static int _wrap_new_ResonanceLookupSingleton(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ResonanceLookupSingleton *result = 0 ;
  
  SWIG_check_num_args("mopo::ResonanceLookupSingleton::ResonanceLookupSingleton",0,0)
  result = (mopo::ResonanceLookupSingleton *)new mopo::ResonanceLookupSingleton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ResonanceLookupSingleton,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResonanceLookupSingleton_qLookup(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ResonanceLookupSingleton *arg1 = (mopo::ResonanceLookupSingleton *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::ResonanceLookupSingleton::qLookup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ResonanceLookupSingleton::qLookup",1,"mopo::ResonanceLookupSingleton const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::ResonanceLookupSingleton::qLookup",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ResonanceLookupSingleton,0))){
    SWIG_fail_ptr("ResonanceLookupSingleton_qLookup",1,SWIGTYPE_p_mopo__ResonanceLookupSingleton);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  result = (mopo::mopo_float)((mopo::ResonanceLookupSingleton const *)arg1)->qLookup(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ResonanceLookupSingleton(void *obj) {
mopo::ResonanceLookupSingleton *arg1 = (mopo::ResonanceLookupSingleton *) obj;
delete arg1;
}
static int _proxy__wrap_new_ResonanceLookupSingleton(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ResonanceLookupSingleton);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ResonanceLookupSingleton_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ResonanceLookupSingleton_methods[]= {
    { "qLookup", _wrap_ResonanceLookupSingleton_qLookup},
    {0,0}
};
static swig_lua_method swig_ResonanceLookupSingleton_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ResonanceLookupSingleton_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ResonanceLookupSingleton_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ResonanceLookupSingleton_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ResonanceLookupSingleton_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ResonanceLookupSingleton_Sf_SwigStatic = {
    "ResonanceLookupSingleton",
    swig_ResonanceLookupSingleton_Sf_SwigStatic_methods,
    swig_ResonanceLookupSingleton_Sf_SwigStatic_attributes,
    swig_ResonanceLookupSingleton_Sf_SwigStatic_constants,
    swig_ResonanceLookupSingleton_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ResonanceLookupSingleton_bases[] = {0};
static const char *swig_ResonanceLookupSingleton_base_names[] = {0};
static swig_lua_class _wrap_class_ResonanceLookupSingleton = { "ResonanceLookupSingleton", "ResonanceLookupSingleton", &SWIGTYPE_p_mopo__ResonanceLookupSingleton,_proxy__wrap_new_ResonanceLookupSingleton, swig_delete_ResonanceLookupSingleton, swig_ResonanceLookupSingleton_methods, swig_ResonanceLookupSingleton_attributes, &swig_ResonanceLookupSingleton_Sf_SwigStatic, swig_ResonanceLookupSingleton_meta, swig_ResonanceLookupSingleton_bases, swig_ResonanceLookupSingleton_base_names };

static int _wrap_ResonanceLookup_qLookup(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::ResonanceLookup::qLookup",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::ResonanceLookup::qLookup",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::mopo_float)mopo::ResonanceLookup::qLookup(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ResonanceLookup(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ResonanceLookup *result = 0 ;
  
  SWIG_check_num_args("mopo::ResonanceLookup::ResonanceLookup",0,0)
  result = (mopo::ResonanceLookup *)new mopo::ResonanceLookup();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ResonanceLookup,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ResonanceLookup(void *obj) {
mopo::ResonanceLookup *arg1 = (mopo::ResonanceLookup *) obj;
delete arg1;
}
static int _proxy__wrap_new_ResonanceLookup(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ResonanceLookup);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ResonanceLookup_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ResonanceLookup_methods[]= {
    {0,0}
};
static swig_lua_method swig_ResonanceLookup_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ResonanceLookup_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ResonanceLookup_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ResonanceLookup_SwigStatic_methods[]= {
    { "qLookup", _wrap_ResonanceLookup_qLookup},
    {0,0}
};
static swig_lua_class* swig_ResonanceLookup_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ResonanceLookup_SwigStatic = {
    "ResonanceLookup",
    swig_ResonanceLookup_SwigStatic_methods,
    swig_ResonanceLookup_SwigStatic_attributes,
    swig_ResonanceLookup_SwigStatic_constants,
    swig_ResonanceLookup_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ResonanceLookup_bases[] = {0};
static const char *swig_ResonanceLookup_base_names[] = {0};
static swig_lua_class _wrap_class_ResonanceLookup = { "ResonanceLookup", "ResonanceLookup", &SWIGTYPE_p_mopo__ResonanceLookup,_proxy__wrap_new_ResonanceLookup, swig_delete_ResonanceLookup, swig_ResonanceLookup_methods, swig_ResonanceLookup_attributes, &swig_ResonanceLookup_SwigStatic, swig_ResonanceLookup_meta, swig_ResonanceLookup_bases, swig_ResonanceLookup_base_names };

static int _wrap_new_Reverb(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Reverb *result = 0 ;
  
  SWIG_check_num_args("mopo::Reverb::Reverb",0,0)
  result = (mopo::Reverb *)new mopo::Reverb();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Reverb,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Reverb_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Reverb *arg1 = (mopo::Reverb *) 0 ;
  
  SWIG_check_num_args("mopo::Reverb::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Reverb::process",1,"mopo::Reverb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Reverb,0))){
    SWIG_fail_ptr("Reverb_process",1,SWIGTYPE_p_mopo__Reverb);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Reverb_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Reverb *arg1 = (mopo::Reverb *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Reverb::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Reverb::clone",1,"mopo::Reverb const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Reverb,0))){
    SWIG_fail_ptr("Reverb_clone",1,SWIGTYPE_p_mopo__Reverb);
  }
  
  result = (mopo::Processor *)((mopo::Reverb const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Reverb(void *obj) {
mopo::Reverb *arg1 = (mopo::Reverb *) obj;
delete arg1;
}
static int _proxy__wrap_new_Reverb(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Reverb);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Reverb_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Reverb_methods[]= {
    { "process", _wrap_Reverb_process},
    { "clone", _wrap_Reverb_clone},
    {0,0}
};
static swig_lua_method swig_Reverb_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Reverb_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Reverb_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::Reverb::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kFeedback", mopo::Reverb::kFeedback)},
    {SWIG_LUA_CONSTTAB_INT("kDamping", mopo::Reverb::kDamping)},
    {SWIG_LUA_CONSTTAB_INT("kStereoWidth", mopo::Reverb::kStereoWidth)},
    {SWIG_LUA_CONSTTAB_INT("kWet", mopo::Reverb::kWet)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::Reverb::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Reverb_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Reverb_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Reverb_Sf_SwigStatic = {
    "Reverb",
    swig_Reverb_Sf_SwigStatic_methods,
    swig_Reverb_Sf_SwigStatic_attributes,
    swig_Reverb_Sf_SwigStatic_constants,
    swig_Reverb_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Reverb_bases[] = {0,0};
static const char *swig_Reverb_base_names[] = {"mopo::ProcessorRouter *",0};
static swig_lua_class _wrap_class_Reverb = { "Reverb", "Reverb", &SWIGTYPE_p_mopo__Reverb,_proxy__wrap_new_Reverb, swig_delete_Reverb, swig_Reverb_methods, swig_Reverb_attributes, &swig_Reverb_Sf_SwigStatic, swig_Reverb_meta, swig_Reverb_bases, swig_Reverb_base_names };

static int _wrap_new_ReverbAllPass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  mopo::ReverbAllPass *result = 0 ;
  
  SWIG_check_num_args("mopo::ReverbAllPass::ReverbAllPass",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::ReverbAllPass::ReverbAllPass",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (mopo::ReverbAllPass *)new mopo::ReverbAllPass(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ReverbAllPass,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ReverbAllPass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ReverbAllPass *arg1 = 0 ;
  mopo::ReverbAllPass *result = 0 ;
  
  SWIG_check_num_args("mopo::ReverbAllPass::ReverbAllPass",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::ReverbAllPass::ReverbAllPass",1,"mopo::ReverbAllPass const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ReverbAllPass,0))){
    SWIG_fail_ptr("new_ReverbAllPass",1,SWIGTYPE_p_mopo__ReverbAllPass);
  }
  
  result = (mopo::ReverbAllPass *)new mopo::ReverbAllPass((mopo::ReverbAllPass const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ReverbAllPass,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ReverbAllPass(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__ReverbAllPass, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ReverbAllPass__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ReverbAllPass__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ReverbAllPass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::ReverbAllPass::ReverbAllPass(int)\n"
    "    mopo::ReverbAllPass::ReverbAllPass(mopo::ReverbAllPass const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ReverbAllPass_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ReverbAllPass *arg1 = (mopo::ReverbAllPass *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::ReverbAllPass::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ReverbAllPass::clone",1,"mopo::ReverbAllPass const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ReverbAllPass,0))){
    SWIG_fail_ptr("ReverbAllPass_clone",1,SWIGTYPE_p_mopo__ReverbAllPass);
  }
  
  result = (mopo::Processor *)((mopo::ReverbAllPass const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbAllPass_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ReverbAllPass *arg1 = (mopo::ReverbAllPass *) 0 ;
  
  SWIG_check_num_args("mopo::ReverbAllPass::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ReverbAllPass::process",1,"mopo::ReverbAllPass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ReverbAllPass,0))){
    SWIG_fail_ptr("ReverbAllPass_process",1,SWIGTYPE_p_mopo__ReverbAllPass);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbAllPass_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ReverbAllPass *arg1 = (mopo::ReverbAllPass *) 0 ;
  int arg2 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  mopo::mopo_float *arg5 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg6 = (mopo::mopo_float *) 0 ;
  
  SWIG_check_num_args("mopo::ReverbAllPass::tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ReverbAllPass::tick",1,"mopo::ReverbAllPass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::ReverbAllPass::tick",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::ReverbAllPass::tick",3,"mopo::mopo_float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::ReverbAllPass::tick",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("mopo::ReverbAllPass::tick",5,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("mopo::ReverbAllPass::tick",6,"mopo::mopo_float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ReverbAllPass,0))){
    SWIG_fail_ptr("ReverbAllPass_tick",1,SWIGTYPE_p_mopo__ReverbAllPass);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ReverbAllPass_tick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ReverbAllPass_tick",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ReverbAllPass_tick",6,SWIGTYPE_p_double);
  }
  
  (arg1)->tick(arg2,arg3,arg4,(mopo::mopo_float const *)arg5,(mopo::mopo_float const *)arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ReverbAllPass(void *obj) {
mopo::ReverbAllPass *arg1 = (mopo::ReverbAllPass *) obj;
delete arg1;
}
static int _proxy__wrap_new_ReverbAllPass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ReverbAllPass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ReverbAllPass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ReverbAllPass_methods[]= {
    { "clone", _wrap_ReverbAllPass_clone},
    { "process", _wrap_ReverbAllPass_process},
    { "tick", _wrap_ReverbAllPass_tick},
    {0,0}
};
static swig_lua_method swig_ReverbAllPass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ReverbAllPass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ReverbAllPass_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::ReverbAllPass::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kSampleDelay", mopo::ReverbAllPass::kSampleDelay)},
    {SWIG_LUA_CONSTTAB_INT("kFeedback", mopo::ReverbAllPass::kFeedback)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::ReverbAllPass::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ReverbAllPass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ReverbAllPass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ReverbAllPass_Sf_SwigStatic = {
    "ReverbAllPass",
    swig_ReverbAllPass_Sf_SwigStatic_methods,
    swig_ReverbAllPass_Sf_SwigStatic_attributes,
    swig_ReverbAllPass_Sf_SwigStatic_constants,
    swig_ReverbAllPass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ReverbAllPass_bases[] = {0,0};
static const char *swig_ReverbAllPass_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_ReverbAllPass = { "ReverbAllPass", "ReverbAllPass", &SWIGTYPE_p_mopo__ReverbAllPass,_proxy__wrap_new_ReverbAllPass, swig_delete_ReverbAllPass, swig_ReverbAllPass_methods, swig_ReverbAllPass_attributes, &swig_ReverbAllPass_Sf_SwigStatic, swig_ReverbAllPass_meta, swig_ReverbAllPass_bases, swig_ReverbAllPass_base_names };

static int _wrap_new_ReverbComb__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  mopo::ReverbComb *result = 0 ;
  
  SWIG_check_num_args("mopo::ReverbComb::ReverbComb",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::ReverbComb::ReverbComb",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (mopo::ReverbComb *)new mopo::ReverbComb(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ReverbComb,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ReverbComb__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ReverbComb *arg1 = 0 ;
  mopo::ReverbComb *result = 0 ;
  
  SWIG_check_num_args("mopo::ReverbComb::ReverbComb",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::ReverbComb::ReverbComb",1,"mopo::ReverbComb const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ReverbComb,0))){
    SWIG_fail_ptr("new_ReverbComb",1,SWIGTYPE_p_mopo__ReverbComb);
  }
  
  result = (mopo::ReverbComb *)new mopo::ReverbComb((mopo::ReverbComb const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ReverbComb,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ReverbComb(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__ReverbComb, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ReverbComb__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ReverbComb__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ReverbComb'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::ReverbComb::ReverbComb(int)\n"
    "    mopo::ReverbComb::ReverbComb(mopo::ReverbComb const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ReverbComb_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ReverbComb *arg1 = (mopo::ReverbComb *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::ReverbComb::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ReverbComb::clone",1,"mopo::ReverbComb const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ReverbComb,0))){
    SWIG_fail_ptr("ReverbComb_clone",1,SWIGTYPE_p_mopo__ReverbComb);
  }
  
  result = (mopo::Processor *)((mopo::ReverbComb const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbComb_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ReverbComb *arg1 = (mopo::ReverbComb *) 0 ;
  
  SWIG_check_num_args("mopo::ReverbComb::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ReverbComb::process",1,"mopo::ReverbComb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ReverbComb,0))){
    SWIG_fail_ptr("ReverbComb_process",1,SWIGTYPE_p_mopo__ReverbComb);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbComb_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::ReverbComb *arg1 = (mopo::ReverbComb *) 0 ;
  int arg2 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  int arg4 ;
  mopo::mopo_float *arg5 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg6 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg7 = (mopo::mopo_float *) 0 ;
  
  SWIG_check_num_args("mopo::ReverbComb::tick",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::ReverbComb::tick",1,"mopo::ReverbComb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::ReverbComb::tick",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::ReverbComb::tick",3,"mopo::mopo_float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::ReverbComb::tick",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("mopo::ReverbComb::tick",5,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("mopo::ReverbComb::tick",6,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("mopo::ReverbComb::tick",7,"mopo::mopo_float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__ReverbComb,0))){
    SWIG_fail_ptr("ReverbComb_tick",1,SWIGTYPE_p_mopo__ReverbComb);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ReverbComb_tick",3,SWIGTYPE_p_double);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ReverbComb_tick",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ReverbComb_tick",6,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ReverbComb_tick",7,SWIGTYPE_p_double);
  }
  
  (arg1)->tick(arg2,arg3,arg4,(mopo::mopo_float const *)arg5,(mopo::mopo_float const *)arg6,(mopo::mopo_float const *)arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ReverbComb(void *obj) {
mopo::ReverbComb *arg1 = (mopo::ReverbComb *) obj;
delete arg1;
}
static int _proxy__wrap_new_ReverbComb(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ReverbComb);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ReverbComb_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ReverbComb_methods[]= {
    { "clone", _wrap_ReverbComb_clone},
    { "process", _wrap_ReverbComb_process},
    { "tick", _wrap_ReverbComb_tick},
    {0,0}
};
static swig_lua_method swig_ReverbComb_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ReverbComb_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ReverbComb_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::ReverbComb::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kSampleDelay", mopo::ReverbComb::kSampleDelay)},
    {SWIG_LUA_CONSTTAB_INT("kFeedback", mopo::ReverbComb::kFeedback)},
    {SWIG_LUA_CONSTTAB_INT("kDamping", mopo::ReverbComb::kDamping)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::ReverbComb::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ReverbComb_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ReverbComb_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ReverbComb_Sf_SwigStatic = {
    "ReverbComb",
    swig_ReverbComb_Sf_SwigStatic_methods,
    swig_ReverbComb_Sf_SwigStatic_attributes,
    swig_ReverbComb_Sf_SwigStatic_constants,
    swig_ReverbComb_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ReverbComb_bases[] = {0,0};
static const char *swig_ReverbComb_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_ReverbComb = { "ReverbComb", "ReverbComb", &SWIGTYPE_p_mopo__ReverbComb,_proxy__wrap_new_ReverbComb, swig_delete_ReverbComb, swig_ReverbComb_methods, swig_ReverbComb_attributes, &swig_ReverbComb_Sf_SwigStatic, swig_ReverbComb_meta, swig_ReverbComb_bases, swig_ReverbComb_base_names };

static int _wrap_new_SimpleDelay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  mopo::SimpleDelay *result = 0 ;
  
  SWIG_check_num_args("mopo::SimpleDelay::SimpleDelay",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::SimpleDelay::SimpleDelay",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (mopo::SimpleDelay *)new mopo::SimpleDelay(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__SimpleDelay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SimpleDelay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SimpleDelay *arg1 = 0 ;
  mopo::SimpleDelay *result = 0 ;
  
  SWIG_check_num_args("mopo::SimpleDelay::SimpleDelay",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::SimpleDelay::SimpleDelay",1,"mopo::SimpleDelay const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SimpleDelay,0))){
    SWIG_fail_ptr("new_SimpleDelay",1,SWIGTYPE_p_mopo__SimpleDelay);
  }
  
  result = (mopo::SimpleDelay *)new mopo::SimpleDelay((mopo::SimpleDelay const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__SimpleDelay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SimpleDelay(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__SimpleDelay, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SimpleDelay__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SimpleDelay__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SimpleDelay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::SimpleDelay::SimpleDelay(int)\n"
    "    mopo::SimpleDelay::SimpleDelay(mopo::SimpleDelay const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SimpleDelay_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SimpleDelay *arg1 = (mopo::SimpleDelay *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::SimpleDelay::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SimpleDelay::clone",1,"mopo::SimpleDelay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SimpleDelay,0))){
    SWIG_fail_ptr("SimpleDelay_clone",1,SWIGTYPE_p_mopo__SimpleDelay);
  }
  
  result = (mopo::Processor *)((mopo::SimpleDelay const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleDelay_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SimpleDelay *arg1 = (mopo::SimpleDelay *) 0 ;
  
  SWIG_check_num_args("mopo::SimpleDelay::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SimpleDelay::process",1,"mopo::SimpleDelay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SimpleDelay,0))){
    SWIG_fail_ptr("SimpleDelay_process",1,SWIGTYPE_p_mopo__SimpleDelay);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimpleDelay_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SimpleDelay *arg1 = (mopo::SimpleDelay *) 0 ;
  int arg2 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg4 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg5 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg6 = (mopo::mopo_float *) 0 ;
  
  SWIG_check_num_args("mopo::SimpleDelay::tick",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SimpleDelay::tick",1,"mopo::SimpleDelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::SimpleDelay::tick",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::SimpleDelay::tick",3,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("mopo::SimpleDelay::tick",4,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("mopo::SimpleDelay::tick",5,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("mopo::SimpleDelay::tick",6,"mopo::mopo_float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SimpleDelay,0))){
    SWIG_fail_ptr("SimpleDelay_tick",1,SWIGTYPE_p_mopo__SimpleDelay);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SimpleDelay_tick",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SimpleDelay_tick",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SimpleDelay_tick",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SimpleDelay_tick",6,SWIGTYPE_p_double);
  }
  
  (arg1)->tick(arg2,arg3,(mopo::mopo_float const *)arg4,(mopo::mopo_float const *)arg5,(mopo::mopo_float const *)arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SimpleDelay(void *obj) {
mopo::SimpleDelay *arg1 = (mopo::SimpleDelay *) obj;
delete arg1;
}
static int _proxy__wrap_new_SimpleDelay(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SimpleDelay);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SimpleDelay_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SimpleDelay_methods[]= {
    { "clone", _wrap_SimpleDelay_clone},
    { "process", _wrap_SimpleDelay_process},
    { "tick", _wrap_SimpleDelay_tick},
    {0,0}
};
static swig_lua_method swig_SimpleDelay_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SimpleDelay_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SimpleDelay_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::SimpleDelay::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kSampleDelay", mopo::SimpleDelay::kSampleDelay)},
    {SWIG_LUA_CONSTTAB_INT("kFeedback", mopo::SimpleDelay::kFeedback)},
    {SWIG_LUA_CONSTTAB_INT("kReset", mopo::SimpleDelay::kReset)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::SimpleDelay::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SimpleDelay_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SimpleDelay_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SimpleDelay_Sf_SwigStatic = {
    "SimpleDelay",
    swig_SimpleDelay_Sf_SwigStatic_methods,
    swig_SimpleDelay_Sf_SwigStatic_attributes,
    swig_SimpleDelay_Sf_SwigStatic_constants,
    swig_SimpleDelay_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SimpleDelay_bases[] = {0,0};
static const char *swig_SimpleDelay_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_SimpleDelay = { "SimpleDelay", "SimpleDelay", &SWIGTYPE_p_mopo__SimpleDelay,_proxy__wrap_new_SimpleDelay, swig_delete_SimpleDelay, swig_SimpleDelay_methods, swig_SimpleDelay_attributes, &swig_SimpleDelay_Sf_SwigStatic, swig_SimpleDelay_meta, swig_SimpleDelay_bases, swig_SimpleDelay_base_names };

static int _wrap_new_SmoothFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::SmoothFilter *result = 0 ;
  
  SWIG_check_num_args("mopo::SmoothFilter::SmoothFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::SmoothFilter::SmoothFilter",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::SmoothFilter *)new mopo::SmoothFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__SmoothFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SmoothFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SmoothFilter *result = 0 ;
  
  SWIG_check_num_args("mopo::SmoothFilter::SmoothFilter",0,0)
  result = (mopo::SmoothFilter *)new mopo::SmoothFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__SmoothFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SmoothFilter(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SmoothFilter__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SmoothFilter__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SmoothFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::SmoothFilter::SmoothFilter(mopo::mopo_float)\n"
    "    mopo::SmoothFilter::SmoothFilter()\n");
  lua_error(L);return 0;
}


static int _wrap_SmoothFilter_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SmoothFilter *arg1 = (mopo::SmoothFilter *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::SmoothFilter::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SmoothFilter::clone",1,"mopo::SmoothFilter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SmoothFilter,0))){
    SWIG_fail_ptr("SmoothFilter_clone",1,SWIGTYPE_p_mopo__SmoothFilter);
  }
  
  result = (mopo::Processor *)((mopo::SmoothFilter const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmoothFilter_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SmoothFilter *arg1 = (mopo::SmoothFilter *) 0 ;
  
  SWIG_check_num_args("mopo::SmoothFilter::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SmoothFilter::process",1,"mopo::SmoothFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SmoothFilter,0))){
    SWIG_fail_ptr("SmoothFilter_process",1,SWIGTYPE_p_mopo__SmoothFilter);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmoothFilter(void *obj) {
mopo::SmoothFilter *arg1 = (mopo::SmoothFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_SmoothFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SmoothFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SmoothFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SmoothFilter_methods[]= {
    { "clone", _wrap_SmoothFilter_clone},
    { "process", _wrap_SmoothFilter_process},
    {0,0}
};
static swig_lua_method swig_SmoothFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SmoothFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SmoothFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kTarget", mopo::SmoothFilter::kTarget)},
    {SWIG_LUA_CONSTTAB_INT("kHalfLife", mopo::SmoothFilter::kHalfLife)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::SmoothFilter::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SmoothFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SmoothFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SmoothFilter_Sf_SwigStatic = {
    "SmoothFilter",
    swig_SmoothFilter_Sf_SwigStatic_methods,
    swig_SmoothFilter_Sf_SwigStatic_attributes,
    swig_SmoothFilter_Sf_SwigStatic_constants,
    swig_SmoothFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SmoothFilter_bases[] = {0,0};
static const char *swig_SmoothFilter_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_SmoothFilter = { "SmoothFilter", "SmoothFilter", &SWIGTYPE_p_mopo__SmoothFilter,_proxy__wrap_new_SmoothFilter, swig_delete_SmoothFilter, swig_SmoothFilter_methods, swig_SmoothFilter_attributes, &swig_SmoothFilter_Sf_SwigStatic, swig_SmoothFilter_meta, swig_SmoothFilter_bases, swig_SmoothFilter_base_names };

static int _wrap_new_SmoothValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::SmoothValue *result = 0 ;
  
  SWIG_check_num_args("mopo::SmoothValue::SmoothValue",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::SmoothValue::SmoothValue",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::SmoothValue *)new mopo::SmoothValue(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__SmoothValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SmoothValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SmoothValue *result = 0 ;
  
  SWIG_check_num_args("mopo::SmoothValue::SmoothValue",0,0)
  result = (mopo::SmoothValue *)new mopo::SmoothValue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__SmoothValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SmoothValue(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SmoothValue__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SmoothValue__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SmoothValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::SmoothValue::SmoothValue(mopo::mopo_float)\n"
    "    mopo::SmoothValue::SmoothValue()\n");
  lua_error(L);return 0;
}


static int _wrap_SmoothValue_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SmoothValue *arg1 = (mopo::SmoothValue *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::SmoothValue::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SmoothValue::clone",1,"mopo::SmoothValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SmoothValue,0))){
    SWIG_fail_ptr("SmoothValue_clone",1,SWIGTYPE_p_mopo__SmoothValue);
  }
  
  result = (mopo::Processor *)((mopo::SmoothValue const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmoothValue_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SmoothValue *arg1 = (mopo::SmoothValue *) 0 ;
  
  SWIG_check_num_args("mopo::SmoothValue::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SmoothValue::process",1,"mopo::SmoothValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SmoothValue,0))){
    SWIG_fail_ptr("SmoothValue_process",1,SWIGTYPE_p_mopo__SmoothValue);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmoothValue_setSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SmoothValue *arg1 = (mopo::SmoothValue *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::SmoothValue::setSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SmoothValue::setSampleRate",1,"mopo::SmoothValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::SmoothValue::setSampleRate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SmoothValue,0))){
    SWIG_fail_ptr("SmoothValue_setSampleRate",1,SWIGTYPE_p_mopo__SmoothValue);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmoothValue_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SmoothValue *arg1 = (mopo::SmoothValue *) 0 ;
  mopo::mopo_float arg2 ;
  
  SWIG_check_num_args("mopo::SmoothValue::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SmoothValue::set",1,"mopo::SmoothValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::SmoothValue::set",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SmoothValue,0))){
    SWIG_fail_ptr("SmoothValue_set",1,SWIGTYPE_p_mopo__SmoothValue);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  (arg1)->set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmoothValue_setHard(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SmoothValue *arg1 = (mopo::SmoothValue *) 0 ;
  mopo::mopo_float arg2 ;
  
  SWIG_check_num_args("mopo::SmoothValue::setHard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SmoothValue::setHard",1,"mopo::SmoothValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::SmoothValue::setHard",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SmoothValue,0))){
    SWIG_fail_ptr("SmoothValue_setHard",1,SWIGTYPE_p_mopo__SmoothValue);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  (arg1)->setHard(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmoothValue_value(lua_State* L) {
  int SWIG_arg = 0;
  mopo::SmoothValue *arg1 = (mopo::SmoothValue *) 0 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::SmoothValue::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::SmoothValue::value",1,"mopo::SmoothValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__SmoothValue,0))){
    SWIG_fail_ptr("SmoothValue_value",1,SWIGTYPE_p_mopo__SmoothValue);
  }
  
  result = (mopo::mopo_float)((mopo::SmoothValue const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmoothValue(void *obj) {
mopo::SmoothValue *arg1 = (mopo::SmoothValue *) obj;
delete arg1;
}
static int _proxy__wrap_new_SmoothValue(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SmoothValue);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SmoothValue_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SmoothValue_methods[]= {
    { "clone", _wrap_SmoothValue_clone},
    { "process", _wrap_SmoothValue_process},
    { "setSampleRate", _wrap_SmoothValue_setSampleRate},
    { "set", _wrap_SmoothValue_set},
    { "setHard", _wrap_SmoothValue_setHard},
    { "value", _wrap_SmoothValue_value},
    {0,0}
};
static swig_lua_method swig_SmoothValue_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SmoothValue_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SmoothValue_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SmoothValue_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SmoothValue_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SmoothValue_Sf_SwigStatic = {
    "SmoothValue",
    swig_SmoothValue_Sf_SwigStatic_methods,
    swig_SmoothValue_Sf_SwigStatic_attributes,
    swig_SmoothValue_Sf_SwigStatic_constants,
    swig_SmoothValue_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SmoothValue_bases[] = {0,0};
static const char *swig_SmoothValue_base_names[] = {"mopo::Value *",0};
static swig_lua_class _wrap_class_SmoothValue = { "SmoothValue", "SmoothValue", &SWIGTYPE_p_mopo__SmoothValue,_proxy__wrap_new_SmoothValue, swig_delete_SmoothValue, swig_SmoothValue_methods, swig_SmoothValue_attributes, &swig_SmoothValue_Sf_SwigStatic, swig_SmoothValue_meta, swig_SmoothValue_bases, swig_SmoothValue_base_names };

static int _wrap_new_StateVariableFilter(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StateVariableFilter *result = 0 ;
  
  SWIG_check_num_args("mopo::StateVariableFilter::StateVariableFilter",0,0)
  result = (mopo::StateVariableFilter *)new mopo::StateVariableFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__StateVariableFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateVariableFilter_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StateVariableFilter *arg1 = (mopo::StateVariableFilter *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::StateVariableFilter::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::StateVariableFilter::clone",1,"mopo::StateVariableFilter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__StateVariableFilter,0))){
    SWIG_fail_ptr("StateVariableFilter_clone",1,SWIGTYPE_p_mopo__StateVariableFilter);
  }
  
  result = (mopo::Processor *)((mopo::StateVariableFilter const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateVariableFilter_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StateVariableFilter *arg1 = (mopo::StateVariableFilter *) 0 ;
  
  SWIG_check_num_args("mopo::StateVariableFilter::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::StateVariableFilter::process",1,"mopo::StateVariableFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__StateVariableFilter,0))){
    SWIG_fail_ptr("StateVariableFilter_process",1,SWIGTYPE_p_mopo__StateVariableFilter);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateVariableFilter_process12db(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StateVariableFilter *arg1 = (mopo::StateVariableFilter *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  
  SWIG_check_num_args("mopo::StateVariableFilter::process12db",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::StateVariableFilter::process12db",1,"mopo::StateVariableFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::StateVariableFilter::process12db",2,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::StateVariableFilter::process12db",3,"mopo::mopo_float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__StateVariableFilter,0))){
    SWIG_fail_ptr("StateVariableFilter_process12db",1,SWIGTYPE_p_mopo__StateVariableFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StateVariableFilter_process12db",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StateVariableFilter_process12db",3,SWIGTYPE_p_double);
  }
  
  (arg1)->process12db((mopo::mopo_float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateVariableFilter_process24db(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StateVariableFilter *arg1 = (mopo::StateVariableFilter *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  
  SWIG_check_num_args("mopo::StateVariableFilter::process24db",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::StateVariableFilter::process24db",1,"mopo::StateVariableFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::StateVariableFilter::process24db",2,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::StateVariableFilter::process24db",3,"mopo::mopo_float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__StateVariableFilter,0))){
    SWIG_fail_ptr("StateVariableFilter_process24db",1,SWIGTYPE_p_mopo__StateVariableFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StateVariableFilter_process24db",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StateVariableFilter_process24db",3,SWIGTYPE_p_double);
  }
  
  (arg1)->process24db((mopo::mopo_float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateVariableFilter_processAllPass(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StateVariableFilter *arg1 = (mopo::StateVariableFilter *) 0 ;
  mopo::mopo_float *arg2 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  
  SWIG_check_num_args("mopo::StateVariableFilter::processAllPass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::StateVariableFilter::processAllPass",1,"mopo::StateVariableFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::StateVariableFilter::processAllPass",2,"mopo::mopo_float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::StateVariableFilter::processAllPass",3,"mopo::mopo_float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__StateVariableFilter,0))){
    SWIG_fail_ptr("StateVariableFilter_processAllPass",1,SWIGTYPE_p_mopo__StateVariableFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StateVariableFilter_processAllPass",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StateVariableFilter_processAllPass",3,SWIGTYPE_p_double);
  }
  
  (arg1)->processAllPass((mopo::mopo_float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateVariableFilter_computePassCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StateVariableFilter *arg1 = (mopo::StateVariableFilter *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float arg3 ;
  mopo::mopo_float arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("mopo::StateVariableFilter::computePassCoefficients",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::StateVariableFilter::computePassCoefficients",1,"mopo::StateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::StateVariableFilter::computePassCoefficients",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::StateVariableFilter::computePassCoefficients",3,"mopo::mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::StateVariableFilter::computePassCoefficients",4,"mopo::mopo_float");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("mopo::StateVariableFilter::computePassCoefficients",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__StateVariableFilter,0))){
    SWIG_fail_ptr("StateVariableFilter_computePassCoefficients",1,SWIGTYPE_p_mopo__StateVariableFilter);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  arg4 = (mopo::mopo_float)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->computePassCoefficients(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateVariableFilter_computeShelfCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StateVariableFilter *arg1 = (mopo::StateVariableFilter *) 0 ;
  mopo::StateVariableFilter::Shelves arg2 ;
  mopo::mopo_float arg3 ;
  mopo::mopo_float arg4 ;
  
  SWIG_check_num_args("mopo::StateVariableFilter::computeShelfCoefficients",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::StateVariableFilter::computeShelfCoefficients",1,"mopo::StateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::StateVariableFilter::computeShelfCoefficients",2,"mopo::StateVariableFilter::Shelves");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::StateVariableFilter::computeShelfCoefficients",3,"mopo::mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::StateVariableFilter::computeShelfCoefficients",4,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__StateVariableFilter,0))){
    SWIG_fail_ptr("StateVariableFilter_computeShelfCoefficients",1,SWIGTYPE_p_mopo__StateVariableFilter);
  }
  
  arg2 = (mopo::StateVariableFilter::Shelves)(int)lua_tonumber(L, 2);
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  arg4 = (mopo::mopo_float)lua_tonumber(L, 4);
  (arg1)->computeShelfCoefficients(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateVariableFilter_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StateVariableFilter *arg1 = (mopo::StateVariableFilter *) 0 ;
  int arg2 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg4 = (mopo::mopo_float *) 0 ;
  
  SWIG_check_num_args("mopo::StateVariableFilter::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::StateVariableFilter::tick",1,"mopo::StateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::StateVariableFilter::tick",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::StateVariableFilter::tick",3,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("mopo::StateVariableFilter::tick",4,"mopo::mopo_float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__StateVariableFilter,0))){
    SWIG_fail_ptr("StateVariableFilter_tick",1,SWIGTYPE_p_mopo__StateVariableFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StateVariableFilter_tick",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StateVariableFilter_tick",4,SWIGTYPE_p_double);
  }
  
  (arg1)->tick(arg2,arg3,(mopo::mopo_float const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StateVariableFilter_tick24db(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StateVariableFilter *arg1 = (mopo::StateVariableFilter *) 0 ;
  int arg2 ;
  mopo::mopo_float *arg3 = (mopo::mopo_float *) 0 ;
  mopo::mopo_float *arg4 = (mopo::mopo_float *) 0 ;
  
  SWIG_check_num_args("mopo::StateVariableFilter::tick24db",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::StateVariableFilter::tick24db",1,"mopo::StateVariableFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::StateVariableFilter::tick24db",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("mopo::StateVariableFilter::tick24db",3,"mopo::mopo_float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("mopo::StateVariableFilter::tick24db",4,"mopo::mopo_float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__StateVariableFilter,0))){
    SWIG_fail_ptr("StateVariableFilter_tick24db",1,SWIGTYPE_p_mopo__StateVariableFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StateVariableFilter_tick24db",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StateVariableFilter_tick24db",4,SWIGTYPE_p_double);
  }
  
  (arg1)->tick24db(arg2,arg3,(mopo::mopo_float const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StateVariableFilter(void *obj) {
mopo::StateVariableFilter *arg1 = (mopo::StateVariableFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_StateVariableFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StateVariableFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StateVariableFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StateVariableFilter_methods[]= {
    { "clone", _wrap_StateVariableFilter_clone},
    { "process", _wrap_StateVariableFilter_process},
    { "process12db", _wrap_StateVariableFilter_process12db},
    { "process24db", _wrap_StateVariableFilter_process24db},
    { "processAllPass", _wrap_StateVariableFilter_processAllPass},
    { "computePassCoefficients", _wrap_StateVariableFilter_computePassCoefficients},
    { "computeShelfCoefficients", _wrap_StateVariableFilter_computeShelfCoefficients},
    { "tick", _wrap_StateVariableFilter_tick},
    { "tick24db", _wrap_StateVariableFilter_tick24db},
    {0,0}
};
static swig_lua_method swig_StateVariableFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StateVariableFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StateVariableFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::StateVariableFilter::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kOn", mopo::StateVariableFilter::kOn)},
    {SWIG_LUA_CONSTTAB_INT("kStyle", mopo::StateVariableFilter::kStyle)},
    {SWIG_LUA_CONSTTAB_INT("kPassBlend", mopo::StateVariableFilter::kPassBlend)},
    {SWIG_LUA_CONSTTAB_INT("kShelfChoice", mopo::StateVariableFilter::kShelfChoice)},
    {SWIG_LUA_CONSTTAB_INT("kCutoff", mopo::StateVariableFilter::kCutoff)},
    {SWIG_LUA_CONSTTAB_INT("kResonance", mopo::StateVariableFilter::kResonance)},
    {SWIG_LUA_CONSTTAB_INT("kGain", mopo::StateVariableFilter::kGain)},
    {SWIG_LUA_CONSTTAB_INT("kDrive", mopo::StateVariableFilter::kDrive)},
    {SWIG_LUA_CONSTTAB_INT("kReset", mopo::StateVariableFilter::kReset)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::StateVariableFilter::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("k12dB", mopo::StateVariableFilter::k12dB)},
    {SWIG_LUA_CONSTTAB_INT("k24dB", mopo::StateVariableFilter::k24dB)},
    {SWIG_LUA_CONSTTAB_INT("kShelf", mopo::StateVariableFilter::kShelf)},
    {SWIG_LUA_CONSTTAB_INT("kNumStyles", mopo::StateVariableFilter::kNumStyles)},
    {SWIG_LUA_CONSTTAB_INT("kLowShelf", mopo::StateVariableFilter::kLowShelf)},
    {SWIG_LUA_CONSTTAB_INT("kBandShelf", mopo::StateVariableFilter::kBandShelf)},
    {SWIG_LUA_CONSTTAB_INT("kHighShelf", mopo::StateVariableFilter::kHighShelf)},
    {SWIG_LUA_CONSTTAB_INT("kNumShelves", mopo::StateVariableFilter::kNumShelves)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StateVariableFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StateVariableFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StateVariableFilter_Sf_SwigStatic = {
    "StateVariableFilter",
    swig_StateVariableFilter_Sf_SwigStatic_methods,
    swig_StateVariableFilter_Sf_SwigStatic_attributes,
    swig_StateVariableFilter_Sf_SwigStatic_constants,
    swig_StateVariableFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StateVariableFilter_bases[] = {0,0};
static const char *swig_StateVariableFilter_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_StateVariableFilter = { "StateVariableFilter", "StateVariableFilter", &SWIGTYPE_p_mopo__StateVariableFilter,_proxy__wrap_new_StateVariableFilter, swig_delete_StateVariableFilter, swig_StateVariableFilter_methods, swig_StateVariableFilter_attributes, &swig_StateVariableFilter_Sf_SwigStatic, swig_StateVariableFilter_meta, swig_StateVariableFilter_bases, swig_StateVariableFilter_base_names };

static int _wrap_new_StepGenerator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  mopo::StepGenerator *result = 0 ;
  
  SWIG_check_num_args("mopo::StepGenerator::StepGenerator",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::StepGenerator::StepGenerator",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (mopo::StepGenerator *)new mopo::StepGenerator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__StepGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StepGenerator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StepGenerator *result = 0 ;
  
  SWIG_check_num_args("mopo::StepGenerator::StepGenerator",0,0)
  result = (mopo::StepGenerator *)new mopo::StepGenerator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__StepGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StepGenerator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StepGenerator__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StepGenerator__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StepGenerator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::StepGenerator::StepGenerator(int)\n"
    "    mopo::StepGenerator::StepGenerator()\n");
  lua_error(L);return 0;
}


static int _wrap_StepGenerator_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StepGenerator *arg1 = (mopo::StepGenerator *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::StepGenerator::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::StepGenerator::clone",1,"mopo::StepGenerator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__StepGenerator,0))){
    SWIG_fail_ptr("StepGenerator_clone",1,SWIGTYPE_p_mopo__StepGenerator);
  }
  
  result = (mopo::Processor *)((mopo::StepGenerator const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StepGenerator_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StepGenerator *arg1 = (mopo::StepGenerator *) 0 ;
  
  SWIG_check_num_args("mopo::StepGenerator::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::StepGenerator::process",1,"mopo::StepGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__StepGenerator,0))){
    SWIG_fail_ptr("StepGenerator_process",1,SWIGTYPE_p_mopo__StepGenerator);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StepGenerator_correctToTime(lua_State* L) {
  int SWIG_arg = 0;
  mopo::StepGenerator *arg1 = (mopo::StepGenerator *) 0 ;
  mopo::mopo_float arg2 ;
  
  SWIG_check_num_args("mopo::StepGenerator::correctToTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::StepGenerator::correctToTime",1,"mopo::StepGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::StepGenerator::correctToTime",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__StepGenerator,0))){
    SWIG_fail_ptr("StepGenerator_correctToTime",1,SWIGTYPE_p_mopo__StepGenerator);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  (arg1)->correctToTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StepGenerator(void *obj) {
mopo::StepGenerator *arg1 = (mopo::StepGenerator *) obj;
delete arg1;
}
static int _proxy__wrap_new_StepGenerator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StepGenerator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StepGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StepGenerator_methods[]= {
    { "clone", _wrap_StepGenerator_clone},
    { "process", _wrap_StepGenerator_process},
    { "correctToTime", _wrap_StepGenerator_correctToTime},
    {0,0}
};
static swig_lua_method swig_StepGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StepGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StepGenerator_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kFrequency", mopo::StepGenerator::kFrequency)},
    {SWIG_LUA_CONSTTAB_INT("kNumSteps", mopo::StepGenerator::kNumSteps)},
    {SWIG_LUA_CONSTTAB_INT("kReset", mopo::StepGenerator::kReset)},
    {SWIG_LUA_CONSTTAB_INT("kSteps", mopo::StepGenerator::kSteps)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::StepGenerator::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("kValue", mopo::StepGenerator::kValue)},
    {SWIG_LUA_CONSTTAB_INT("kStep", mopo::StepGenerator::kStep)},
    {SWIG_LUA_CONSTTAB_INT("kNumOutputs", mopo::StepGenerator::kNumOutputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StepGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StepGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StepGenerator_Sf_SwigStatic = {
    "StepGenerator",
    swig_StepGenerator_Sf_SwigStatic_methods,
    swig_StepGenerator_Sf_SwigStatic_attributes,
    swig_StepGenerator_Sf_SwigStatic_constants,
    swig_StepGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StepGenerator_bases[] = {0,0};
static const char *swig_StepGenerator_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_StepGenerator = { "StepGenerator", "StepGenerator", &SWIGTYPE_p_mopo__StepGenerator,_proxy__wrap_new_StepGenerator, swig_delete_StepGenerator, swig_StepGenerator_methods, swig_StepGenerator_attributes, &swig_StepGenerator_Sf_SwigStatic, swig_StepGenerator_meta, swig_StepGenerator_bases, swig_StepGenerator_base_names };

static int _wrap_new_Stutter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  mopo::Stutter *result = 0 ;
  
  SWIG_check_num_args("mopo::Stutter::Stutter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Stutter::Stutter",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (mopo::Stutter *)new mopo::Stutter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Stutter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Stutter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Stutter *arg1 = 0 ;
  mopo::Stutter *result = 0 ;
  
  SWIG_check_num_args("mopo::Stutter::Stutter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("mopo::Stutter::Stutter",1,"mopo::Stutter const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Stutter,0))){
    SWIG_fail_ptr("new_Stutter",1,SWIGTYPE_p_mopo__Stutter);
  }
  
  result = (mopo::Stutter *)new mopo::Stutter((mopo::Stutter const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Stutter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Stutter(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Stutter, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Stutter__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Stutter__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Stutter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Stutter::Stutter(int)\n"
    "    mopo::Stutter::Stutter(mopo::Stutter const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Stutter_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Stutter *arg1 = (mopo::Stutter *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Stutter::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Stutter::clone",1,"mopo::Stutter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Stutter,0))){
    SWIG_fail_ptr("Stutter_clone",1,SWIGTYPE_p_mopo__Stutter);
  }
  
  result = (mopo::Processor *)((mopo::Stutter const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Stutter_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Stutter *arg1 = (mopo::Stutter *) 0 ;
  
  SWIG_check_num_args("mopo::Stutter::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Stutter::process",1,"mopo::Stutter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Stutter,0))){
    SWIG_fail_ptr("Stutter_process",1,SWIGTYPE_p_mopo__Stutter);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Stutter(void *obj) {
mopo::Stutter *arg1 = (mopo::Stutter *) obj;
delete arg1;
}
static int _proxy__wrap_new_Stutter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Stutter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Stutter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Stutter_methods[]= {
    { "clone", _wrap_Stutter_clone},
    { "process", _wrap_Stutter_process},
    {0,0}
};
static swig_lua_method swig_Stutter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Stutter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Stutter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kAudio", mopo::Stutter::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("kStutterFrequency", mopo::Stutter::kStutterFrequency)},
    {SWIG_LUA_CONSTTAB_INT("kResampleFrequency", mopo::Stutter::kResampleFrequency)},
    {SWIG_LUA_CONSTTAB_INT("kWindowSoftness", mopo::Stutter::kWindowSoftness)},
    {SWIG_LUA_CONSTTAB_INT("kReset", mopo::Stutter::kReset)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::Stutter::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Stutter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Stutter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Stutter_Sf_SwigStatic = {
    "Stutter",
    swig_Stutter_Sf_SwigStatic_methods,
    swig_Stutter_Sf_SwigStatic_attributes,
    swig_Stutter_Sf_SwigStatic_constants,
    swig_Stutter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Stutter_bases[] = {0,0};
static const char *swig_Stutter_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_Stutter = { "Stutter", "Stutter", &SWIGTYPE_p_mopo__Stutter,_proxy__wrap_new_Stutter, swig_delete_Stutter, swig_Stutter_methods, swig_Stutter_attributes, &swig_Stutter_Sf_SwigStatic, swig_Stutter_meta, swig_Stutter_bases, swig_Stutter_base_names };

static int _wrap_TickRouter_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TickRouter *arg1 = (mopo::TickRouter *) 0 ;
  
  SWIG_check_num_args("mopo::TickRouter::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TickRouter::process",1,"mopo::TickRouter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TickRouter,0))){
    SWIG_fail_ptr("TickRouter_process",1,SWIGTYPE_p_mopo__TickRouter);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TickRouter_tick(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TickRouter *arg1 = (mopo::TickRouter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::TickRouter::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TickRouter::tick",1,"mopo::TickRouter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::TickRouter::tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TickRouter,0))){
    SWIG_fail_ptr("TickRouter_tick",1,SWIGTYPE_p_mopo__TickRouter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TickRouter(void *obj) {
mopo::TickRouter *arg1 = (mopo::TickRouter *) obj;
delete arg1;
}
static swig_lua_attribute swig_TickRouter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TickRouter_methods[]= {
    { "process", _wrap_TickRouter_process},
    { "tick", _wrap_TickRouter_tick},
    {0,0}
};
static swig_lua_method swig_TickRouter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TickRouter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TickRouter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TickRouter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TickRouter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TickRouter_Sf_SwigStatic = {
    "TickRouter",
    swig_TickRouter_Sf_SwigStatic_methods,
    swig_TickRouter_Sf_SwigStatic_attributes,
    swig_TickRouter_Sf_SwigStatic_constants,
    swig_TickRouter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TickRouter_bases[] = {0,0};
static const char *swig_TickRouter_base_names[] = {"mopo::ProcessorRouter *",0};
static swig_lua_class _wrap_class_TickRouter = { "TickRouter", "TickRouter", &SWIGTYPE_p_mopo__TickRouter,0, swig_delete_TickRouter, swig_TickRouter_methods, swig_TickRouter_attributes, &swig_TickRouter_Sf_SwigStatic, swig_TickRouter_meta, swig_TickRouter_bases, swig_TickRouter_base_names };

static int _wrap_new_TriggerCombiner(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerCombiner *result = 0 ;
  
  SWIG_check_num_args("mopo::TriggerCombiner::TriggerCombiner",0,0)
  result = (mopo::TriggerCombiner *)new mopo::TriggerCombiner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__TriggerCombiner,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerCombiner_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerCombiner *arg1 = (mopo::TriggerCombiner *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::TriggerCombiner::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TriggerCombiner::clone",1,"mopo::TriggerCombiner const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TriggerCombiner,0))){
    SWIG_fail_ptr("TriggerCombiner_clone",1,SWIGTYPE_p_mopo__TriggerCombiner);
  }
  
  result = (mopo::Processor *)((mopo::TriggerCombiner const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerCombiner_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerCombiner *arg1 = (mopo::TriggerCombiner *) 0 ;
  
  SWIG_check_num_args("mopo::TriggerCombiner::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TriggerCombiner::process",1,"mopo::TriggerCombiner *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TriggerCombiner,0))){
    SWIG_fail_ptr("TriggerCombiner_process",1,SWIGTYPE_p_mopo__TriggerCombiner);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TriggerCombiner(void *obj) {
mopo::TriggerCombiner *arg1 = (mopo::TriggerCombiner *) obj;
delete arg1;
}
static int _proxy__wrap_new_TriggerCombiner(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TriggerCombiner);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TriggerCombiner_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TriggerCombiner_methods[]= {
    { "clone", _wrap_TriggerCombiner_clone},
    { "process", _wrap_TriggerCombiner_process},
    {0,0}
};
static swig_lua_method swig_TriggerCombiner_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TriggerCombiner_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TriggerCombiner_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TriggerCombiner_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TriggerCombiner_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TriggerCombiner_Sf_SwigStatic = {
    "TriggerCombiner",
    swig_TriggerCombiner_Sf_SwigStatic_methods,
    swig_TriggerCombiner_Sf_SwigStatic_attributes,
    swig_TriggerCombiner_Sf_SwigStatic_constants,
    swig_TriggerCombiner_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TriggerCombiner_bases[] = {0,0};
static const char *swig_TriggerCombiner_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_TriggerCombiner = { "TriggerCombiner", "TriggerCombiner", &SWIGTYPE_p_mopo__TriggerCombiner,_proxy__wrap_new_TriggerCombiner, swig_delete_TriggerCombiner, swig_TriggerCombiner_methods, swig_TriggerCombiner_attributes, &swig_TriggerCombiner_Sf_SwigStatic, swig_TriggerCombiner_meta, swig_TriggerCombiner_bases, swig_TriggerCombiner_base_names };

static int _wrap_new_TriggerWait(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerWait *result = 0 ;
  
  SWIG_check_num_args("mopo::TriggerWait::TriggerWait",0,0)
  result = (mopo::TriggerWait *)new mopo::TriggerWait();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__TriggerWait,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerWait_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerWait *arg1 = (mopo::TriggerWait *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::TriggerWait::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TriggerWait::clone",1,"mopo::TriggerWait const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TriggerWait,0))){
    SWIG_fail_ptr("TriggerWait_clone",1,SWIGTYPE_p_mopo__TriggerWait);
  }
  
  result = (mopo::Processor *)((mopo::TriggerWait const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerWait_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerWait *arg1 = (mopo::TriggerWait *) 0 ;
  
  SWIG_check_num_args("mopo::TriggerWait::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TriggerWait::process",1,"mopo::TriggerWait *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TriggerWait,0))){
    SWIG_fail_ptr("TriggerWait_process",1,SWIGTYPE_p_mopo__TriggerWait);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TriggerWait(void *obj) {
mopo::TriggerWait *arg1 = (mopo::TriggerWait *) obj;
delete arg1;
}
static int _proxy__wrap_new_TriggerWait(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TriggerWait);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TriggerWait_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TriggerWait_methods[]= {
    { "clone", _wrap_TriggerWait_clone},
    { "process", _wrap_TriggerWait_process},
    {0,0}
};
static swig_lua_method swig_TriggerWait_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TriggerWait_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TriggerWait_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kWait", mopo::TriggerWait::kWait)},
    {SWIG_LUA_CONSTTAB_INT("kTrigger", mopo::TriggerWait::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::TriggerWait::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TriggerWait_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TriggerWait_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TriggerWait_Sf_SwigStatic = {
    "TriggerWait",
    swig_TriggerWait_Sf_SwigStatic_methods,
    swig_TriggerWait_Sf_SwigStatic_attributes,
    swig_TriggerWait_Sf_SwigStatic_constants,
    swig_TriggerWait_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TriggerWait_bases[] = {0,0};
static const char *swig_TriggerWait_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_TriggerWait = { "TriggerWait", "TriggerWait", &SWIGTYPE_p_mopo__TriggerWait,_proxy__wrap_new_TriggerWait, swig_delete_TriggerWait, swig_TriggerWait_methods, swig_TriggerWait_attributes, &swig_TriggerWait_Sf_SwigStatic, swig_TriggerWait_meta, swig_TriggerWait_bases, swig_TriggerWait_base_names };

static int _wrap_new_TriggerFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::TriggerFilter *result = 0 ;
  
  SWIG_check_num_args("mopo::TriggerFilter::TriggerFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::TriggerFilter::TriggerFilter",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::TriggerFilter *)new mopo::TriggerFilter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__TriggerFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TriggerFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerFilter *result = 0 ;
  
  SWIG_check_num_args("mopo::TriggerFilter::TriggerFilter",0,0)
  result = (mopo::TriggerFilter *)new mopo::TriggerFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__TriggerFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TriggerFilter(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TriggerFilter__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TriggerFilter__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TriggerFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::TriggerFilter::TriggerFilter(mopo::mopo_float)\n"
    "    mopo::TriggerFilter::TriggerFilter()\n");
  lua_error(L);return 0;
}


static int _wrap_TriggerFilter_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerFilter *arg1 = (mopo::TriggerFilter *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::TriggerFilter::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TriggerFilter::clone",1,"mopo::TriggerFilter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TriggerFilter,0))){
    SWIG_fail_ptr("TriggerFilter_clone",1,SWIGTYPE_p_mopo__TriggerFilter);
  }
  
  result = (mopo::Processor *)((mopo::TriggerFilter const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerFilter_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerFilter *arg1 = (mopo::TriggerFilter *) 0 ;
  
  SWIG_check_num_args("mopo::TriggerFilter::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TriggerFilter::process",1,"mopo::TriggerFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TriggerFilter,0))){
    SWIG_fail_ptr("TriggerFilter_process",1,SWIGTYPE_p_mopo__TriggerFilter);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TriggerFilter(void *obj) {
mopo::TriggerFilter *arg1 = (mopo::TriggerFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_TriggerFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TriggerFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TriggerFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TriggerFilter_methods[]= {
    { "clone", _wrap_TriggerFilter_clone},
    { "process", _wrap_TriggerFilter_process},
    {0,0}
};
static swig_lua_method swig_TriggerFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TriggerFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TriggerFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kTrigger", mopo::TriggerFilter::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::TriggerFilter::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TriggerFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TriggerFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TriggerFilter_Sf_SwigStatic = {
    "TriggerFilter",
    swig_TriggerFilter_Sf_SwigStatic_methods,
    swig_TriggerFilter_Sf_SwigStatic_attributes,
    swig_TriggerFilter_Sf_SwigStatic_constants,
    swig_TriggerFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TriggerFilter_bases[] = {0,0};
static const char *swig_TriggerFilter_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_TriggerFilter = { "TriggerFilter", "TriggerFilter", &SWIGTYPE_p_mopo__TriggerFilter,_proxy__wrap_new_TriggerFilter, swig_delete_TriggerFilter, swig_TriggerFilter_methods, swig_TriggerFilter_attributes, &swig_TriggerFilter_Sf_SwigStatic, swig_TriggerFilter_meta, swig_TriggerFilter_bases, swig_TriggerFilter_base_names };

static int _wrap_new_TriggerEquals(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::TriggerEquals *result = 0 ;
  
  SWIG_check_num_args("mopo::TriggerEquals::TriggerEquals",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::TriggerEquals::TriggerEquals",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::TriggerEquals *)new mopo::TriggerEquals(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__TriggerEquals,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerEquals_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerEquals *arg1 = (mopo::TriggerEquals *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::TriggerEquals::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TriggerEquals::clone",1,"mopo::TriggerEquals const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TriggerEquals,0))){
    SWIG_fail_ptr("TriggerEquals_clone",1,SWIGTYPE_p_mopo__TriggerEquals);
  }
  
  result = (mopo::Processor *)((mopo::TriggerEquals const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerEquals_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerEquals *arg1 = (mopo::TriggerEquals *) 0 ;
  
  SWIG_check_num_args("mopo::TriggerEquals::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TriggerEquals::process",1,"mopo::TriggerEquals *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TriggerEquals,0))){
    SWIG_fail_ptr("TriggerEquals_process",1,SWIGTYPE_p_mopo__TriggerEquals);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TriggerEquals(void *obj) {
mopo::TriggerEquals *arg1 = (mopo::TriggerEquals *) obj;
delete arg1;
}
static int _proxy__wrap_new_TriggerEquals(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TriggerEquals);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TriggerEquals_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TriggerEquals_methods[]= {
    { "clone", _wrap_TriggerEquals_clone},
    { "process", _wrap_TriggerEquals_process},
    {0,0}
};
static swig_lua_method swig_TriggerEquals_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TriggerEquals_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TriggerEquals_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kTrigger", mopo::TriggerEquals::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("kCondition", mopo::TriggerEquals::kCondition)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::TriggerEquals::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TriggerEquals_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TriggerEquals_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TriggerEquals_Sf_SwigStatic = {
    "TriggerEquals",
    swig_TriggerEquals_Sf_SwigStatic_methods,
    swig_TriggerEquals_Sf_SwigStatic_attributes,
    swig_TriggerEquals_Sf_SwigStatic_constants,
    swig_TriggerEquals_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TriggerEquals_bases[] = {0,0};
static const char *swig_TriggerEquals_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_TriggerEquals = { "TriggerEquals", "TriggerEquals", &SWIGTYPE_p_mopo__TriggerEquals,_proxy__wrap_new_TriggerEquals, swig_delete_TriggerEquals, swig_TriggerEquals_methods, swig_TriggerEquals_attributes, &swig_TriggerEquals_Sf_SwigStatic, swig_TriggerEquals_meta, swig_TriggerEquals_bases, swig_TriggerEquals_base_names };

static int _wrap_new_TriggerNonZero(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerNonZero *result = 0 ;
  
  SWIG_check_num_args("mopo::TriggerNonZero::TriggerNonZero",0,0)
  result = (mopo::TriggerNonZero *)new mopo::TriggerNonZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__TriggerNonZero,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerNonZero_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerNonZero *arg1 = (mopo::TriggerNonZero *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::TriggerNonZero::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TriggerNonZero::clone",1,"mopo::TriggerNonZero const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TriggerNonZero,0))){
    SWIG_fail_ptr("TriggerNonZero_clone",1,SWIGTYPE_p_mopo__TriggerNonZero);
  }
  
  result = (mopo::Processor *)((mopo::TriggerNonZero const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerNonZero_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::TriggerNonZero *arg1 = (mopo::TriggerNonZero *) 0 ;
  
  SWIG_check_num_args("mopo::TriggerNonZero::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::TriggerNonZero::process",1,"mopo::TriggerNonZero *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__TriggerNonZero,0))){
    SWIG_fail_ptr("TriggerNonZero_process",1,SWIGTYPE_p_mopo__TriggerNonZero);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TriggerNonZero(void *obj) {
mopo::TriggerNonZero *arg1 = (mopo::TriggerNonZero *) obj;
delete arg1;
}
static int _proxy__wrap_new_TriggerNonZero(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TriggerNonZero);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TriggerNonZero_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TriggerNonZero_methods[]= {
    { "clone", _wrap_TriggerNonZero_clone},
    { "process", _wrap_TriggerNonZero_process},
    {0,0}
};
static swig_lua_method swig_TriggerNonZero_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TriggerNonZero_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TriggerNonZero_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kTrigger", mopo::TriggerNonZero::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("kCondition", mopo::TriggerNonZero::kCondition)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::TriggerNonZero::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TriggerNonZero_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TriggerNonZero_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TriggerNonZero_Sf_SwigStatic = {
    "TriggerNonZero",
    swig_TriggerNonZero_Sf_SwigStatic_methods,
    swig_TriggerNonZero_Sf_SwigStatic_attributes,
    swig_TriggerNonZero_Sf_SwigStatic_constants,
    swig_TriggerNonZero_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TriggerNonZero_bases[] = {0,0};
static const char *swig_TriggerNonZero_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_TriggerNonZero = { "TriggerNonZero", "TriggerNonZero", &SWIGTYPE_p_mopo__TriggerNonZero,_proxy__wrap_new_TriggerNonZero, swig_delete_TriggerNonZero, swig_TriggerNonZero_methods, swig_TriggerNonZero_attributes, &swig_TriggerNonZero_Sf_SwigStatic, swig_TriggerNonZero_meta, swig_TriggerNonZero_bases, swig_TriggerNonZero_base_names };

static int _wrap_new_LegatoFilter(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LegatoFilter *result = 0 ;
  
  SWIG_check_num_args("mopo::LegatoFilter::LegatoFilter",0,0)
  result = (mopo::LegatoFilter *)new mopo::LegatoFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__LegatoFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegatoFilter_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LegatoFilter *arg1 = (mopo::LegatoFilter *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::LegatoFilter::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::LegatoFilter::clone",1,"mopo::LegatoFilter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__LegatoFilter,0))){
    SWIG_fail_ptr("LegatoFilter_clone",1,SWIGTYPE_p_mopo__LegatoFilter);
  }
  
  result = (mopo::Processor *)((mopo::LegatoFilter const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LegatoFilter_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::LegatoFilter *arg1 = (mopo::LegatoFilter *) 0 ;
  
  SWIG_check_num_args("mopo::LegatoFilter::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::LegatoFilter::process",1,"mopo::LegatoFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__LegatoFilter,0))){
    SWIG_fail_ptr("LegatoFilter_process",1,SWIGTYPE_p_mopo__LegatoFilter);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LegatoFilter(void *obj) {
mopo::LegatoFilter *arg1 = (mopo::LegatoFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_LegatoFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LegatoFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LegatoFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LegatoFilter_methods[]= {
    { "clone", _wrap_LegatoFilter_clone},
    { "process", _wrap_LegatoFilter_process},
    {0,0}
};
static swig_lua_method swig_LegatoFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LegatoFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LegatoFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kLegato", mopo::LegatoFilter::kLegato)},
    {SWIG_LUA_CONSTTAB_INT("kTrigger", mopo::LegatoFilter::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::LegatoFilter::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("kRetrigger", mopo::LegatoFilter::kRetrigger)},
    {SWIG_LUA_CONSTTAB_INT("kRemain", mopo::LegatoFilter::kRemain)},
    {SWIG_LUA_CONSTTAB_INT("kNumOutputs", mopo::LegatoFilter::kNumOutputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LegatoFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LegatoFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LegatoFilter_Sf_SwigStatic = {
    "LegatoFilter",
    swig_LegatoFilter_Sf_SwigStatic_methods,
    swig_LegatoFilter_Sf_SwigStatic_attributes,
    swig_LegatoFilter_Sf_SwigStatic_constants,
    swig_LegatoFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LegatoFilter_bases[] = {0,0};
static const char *swig_LegatoFilter_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_LegatoFilter = { "LegatoFilter", "LegatoFilter", &SWIGTYPE_p_mopo__LegatoFilter,_proxy__wrap_new_LegatoFilter, swig_delete_LegatoFilter, swig_LegatoFilter_methods, swig_LegatoFilter_attributes, &swig_LegatoFilter_Sf_SwigStatic, swig_LegatoFilter_meta, swig_LegatoFilter_bases, swig_LegatoFilter_base_names };

static int _wrap_new_PortamentoFilter(lua_State* L) {
  int SWIG_arg = 0;
  mopo::PortamentoFilter *result = 0 ;
  
  SWIG_check_num_args("mopo::PortamentoFilter::PortamentoFilter",0,0)
  result = (mopo::PortamentoFilter *)new mopo::PortamentoFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__PortamentoFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortamentoFilter_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::PortamentoFilter *arg1 = (mopo::PortamentoFilter *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::PortamentoFilter::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::PortamentoFilter::clone",1,"mopo::PortamentoFilter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__PortamentoFilter,0))){
    SWIG_fail_ptr("PortamentoFilter_clone",1,SWIGTYPE_p_mopo__PortamentoFilter);
  }
  
  result = (mopo::Processor *)((mopo::PortamentoFilter const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PortamentoFilter_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::PortamentoFilter *arg1 = (mopo::PortamentoFilter *) 0 ;
  
  SWIG_check_num_args("mopo::PortamentoFilter::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::PortamentoFilter::process",1,"mopo::PortamentoFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__PortamentoFilter,0))){
    SWIG_fail_ptr("PortamentoFilter_process",1,SWIGTYPE_p_mopo__PortamentoFilter);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PortamentoFilter(void *obj) {
mopo::PortamentoFilter *arg1 = (mopo::PortamentoFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_PortamentoFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PortamentoFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PortamentoFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PortamentoFilter_methods[]= {
    { "clone", _wrap_PortamentoFilter_clone},
    { "process", _wrap_PortamentoFilter_process},
    {0,0}
};
static swig_lua_method swig_PortamentoFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PortamentoFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PortamentoFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kPortamento", mopo::PortamentoFilter::kPortamento)},
    {SWIG_LUA_CONSTTAB_INT("kFrequencyTrigger", mopo::PortamentoFilter::kFrequencyTrigger)},
    {SWIG_LUA_CONSTTAB_INT("kVoiceTrigger", mopo::PortamentoFilter::kVoiceTrigger)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::PortamentoFilter::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("kPortamentoOff", mopo::PortamentoFilter::kPortamentoOff)},
    {SWIG_LUA_CONSTTAB_INT("kPortamentoAuto", mopo::PortamentoFilter::kPortamentoAuto)},
    {SWIG_LUA_CONSTTAB_INT("kPortamentoOn", mopo::PortamentoFilter::kPortamentoOn)},
    {SWIG_LUA_CONSTTAB_INT("kNumPortamentoStates", mopo::PortamentoFilter::kNumPortamentoStates)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PortamentoFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PortamentoFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PortamentoFilter_Sf_SwigStatic = {
    "PortamentoFilter",
    swig_PortamentoFilter_Sf_SwigStatic_methods,
    swig_PortamentoFilter_Sf_SwigStatic_attributes,
    swig_PortamentoFilter_Sf_SwigStatic_constants,
    swig_PortamentoFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PortamentoFilter_bases[] = {0,0};
static const char *swig_PortamentoFilter_base_names[] = {"mopo::Processor *",0};
static swig_lua_class _wrap_class_PortamentoFilter = { "PortamentoFilter", "PortamentoFilter", &SWIGTYPE_p_mopo__PortamentoFilter,_proxy__wrap_new_PortamentoFilter, swig_delete_PortamentoFilter, swig_PortamentoFilter_methods, swig_PortamentoFilter_attributes, &swig_PortamentoFilter_Sf_SwigStatic, swig_PortamentoFilter_meta, swig_PortamentoFilter_bases, swig_PortamentoFilter_base_names };

static int _wrap_VoiceState_event_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceState *arg1 = (mopo::VoiceState *) 0 ;
  mopo::VoiceEvent arg2 ;
  
  SWIG_check_num_args("mopo::VoiceState::event",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceState::event",1,"mopo::VoiceState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceState::event",2,"mopo::VoiceEvent");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceState,0))){
    SWIG_fail_ptr("VoiceState_event_set",1,SWIGTYPE_p_mopo__VoiceState);
  }
  
  arg2 = (mopo::VoiceEvent)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->event = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceState_event_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceState *arg1 = (mopo::VoiceState *) 0 ;
  mopo::VoiceEvent result;
  
  SWIG_check_num_args("mopo::VoiceState::event",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceState::event",1,"mopo::VoiceState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceState,0))){
    SWIG_fail_ptr("VoiceState_event_get",1,SWIGTYPE_p_mopo__VoiceState);
  }
  
  result = (mopo::VoiceEvent) ((arg1)->event);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceState_note_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceState *arg1 = (mopo::VoiceState *) 0 ;
  mopo::mopo_float arg2 ;
  
  SWIG_check_num_args("mopo::VoiceState::note",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceState::note",1,"mopo::VoiceState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceState::note",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceState,0))){
    SWIG_fail_ptr("VoiceState_note_set",1,SWIGTYPE_p_mopo__VoiceState);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  if (arg1) (arg1)->note = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceState_note_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceState *arg1 = (mopo::VoiceState *) 0 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::VoiceState::note",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceState::note",1,"mopo::VoiceState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceState,0))){
    SWIG_fail_ptr("VoiceState_note_get",1,SWIGTYPE_p_mopo__VoiceState);
  }
  
  result = (mopo::mopo_float) ((arg1)->note);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceState_last_note_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceState *arg1 = (mopo::VoiceState *) 0 ;
  mopo::mopo_float arg2 ;
  
  SWIG_check_num_args("mopo::VoiceState::last_note",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceState::last_note",1,"mopo::VoiceState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceState::last_note",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceState,0))){
    SWIG_fail_ptr("VoiceState_last_note_set",1,SWIGTYPE_p_mopo__VoiceState);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  if (arg1) (arg1)->last_note = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceState_last_note_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceState *arg1 = (mopo::VoiceState *) 0 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::VoiceState::last_note",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceState::last_note",1,"mopo::VoiceState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceState,0))){
    SWIG_fail_ptr("VoiceState_last_note_get",1,SWIGTYPE_p_mopo__VoiceState);
  }
  
  result = (mopo::mopo_float) ((arg1)->last_note);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceState_velocity_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceState *arg1 = (mopo::VoiceState *) 0 ;
  mopo::mopo_float arg2 ;
  
  SWIG_check_num_args("mopo::VoiceState::velocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceState::velocity",1,"mopo::VoiceState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceState::velocity",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceState,0))){
    SWIG_fail_ptr("VoiceState_velocity_set",1,SWIGTYPE_p_mopo__VoiceState);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  if (arg1) (arg1)->velocity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceState_velocity_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceState *arg1 = (mopo::VoiceState *) 0 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::VoiceState::velocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceState::velocity",1,"mopo::VoiceState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceState,0))){
    SWIG_fail_ptr("VoiceState_velocity_get",1,SWIGTYPE_p_mopo__VoiceState);
  }
  
  result = (mopo::mopo_float) ((arg1)->velocity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceState_note_pressed_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceState *arg1 = (mopo::VoiceState *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::VoiceState::note_pressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceState::note_pressed",1,"mopo::VoiceState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceState::note_pressed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceState,0))){
    SWIG_fail_ptr("VoiceState_note_pressed_set",1,SWIGTYPE_p_mopo__VoiceState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->note_pressed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceState_note_pressed_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceState *arg1 = (mopo::VoiceState *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::VoiceState::note_pressed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceState::note_pressed",1,"mopo::VoiceState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceState,0))){
    SWIG_fail_ptr("VoiceState_note_pressed_get",1,SWIGTYPE_p_mopo__VoiceState);
  }
  
  result = (int) ((arg1)->note_pressed);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceState_channel_set(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceState *arg1 = (mopo::VoiceState *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::VoiceState::channel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceState::channel",1,"mopo::VoiceState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceState::channel",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceState,0))){
    SWIG_fail_ptr("VoiceState_channel_set",1,SWIGTYPE_p_mopo__VoiceState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->channel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceState_channel_get(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceState *arg1 = (mopo::VoiceState *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::VoiceState::channel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceState::channel",1,"mopo::VoiceState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceState,0))){
    SWIG_fail_ptr("VoiceState_channel_get",1,SWIGTYPE_p_mopo__VoiceState);
  }
  
  result = (int) ((arg1)->channel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VoiceState(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceState *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceState::VoiceState",0,0)
  result = (mopo::VoiceState *)new mopo::VoiceState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__VoiceState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VoiceState(void *obj) {
mopo::VoiceState *arg1 = (mopo::VoiceState *) obj;
delete arg1;
}
static int _proxy__wrap_new_VoiceState(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VoiceState);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VoiceState_attributes[] = {
    { "event", _wrap_VoiceState_event_get, _wrap_VoiceState_event_set },
    { "note", _wrap_VoiceState_note_get, _wrap_VoiceState_note_set },
    { "last_note", _wrap_VoiceState_last_note_get, _wrap_VoiceState_last_note_set },
    { "velocity", _wrap_VoiceState_velocity_get, _wrap_VoiceState_velocity_set },
    { "note_pressed", _wrap_VoiceState_note_pressed_get, _wrap_VoiceState_note_pressed_set },
    { "channel", _wrap_VoiceState_channel_get, _wrap_VoiceState_channel_set },
    {0,0,0}
};
static swig_lua_method swig_VoiceState_methods[]= {
    {0,0}
};
static swig_lua_method swig_VoiceState_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VoiceState_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VoiceState_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VoiceState_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VoiceState_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VoiceState_Sf_SwigStatic = {
    "VoiceState",
    swig_VoiceState_Sf_SwigStatic_methods,
    swig_VoiceState_Sf_SwigStatic_attributes,
    swig_VoiceState_Sf_SwigStatic_constants,
    swig_VoiceState_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VoiceState_bases[] = {0};
static const char *swig_VoiceState_base_names[] = {0};
static swig_lua_class _wrap_class_VoiceState = { "VoiceState", "VoiceState", &SWIGTYPE_p_mopo__VoiceState,_proxy__wrap_new_VoiceState, swig_delete_VoiceState, swig_VoiceState_methods, swig_VoiceState_attributes, &swig_VoiceState_Sf_SwigStatic, swig_VoiceState_meta, swig_VoiceState_bases, swig_VoiceState_base_names };

static int _wrap_new_Voice(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Voice *result = 0 ;
  
  SWIG_check_num_args("mopo::Voice::Voice",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::Voice",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("new_Voice",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (mopo::Voice *)new mopo::Voice(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Voice,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_processor(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::Voice::processor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::processor",1,"mopo::Voice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_processor",1,SWIGTYPE_p_mopo__Voice);
  }
  
  result = (mopo::Processor *)(arg1)->processor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_state(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  mopo::VoiceState *result = 0 ;
  
  SWIG_check_num_args("mopo::Voice::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::state",1,"mopo::Voice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_state",1,SWIGTYPE_p_mopo__Voice);
  }
  
  result = (mopo::VoiceState *) &(arg1)->state();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__VoiceState,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_key_state(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  mopo::Voice::KeyState result;
  
  SWIG_check_num_args("mopo::Voice::key_state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::key_state",1,"mopo::Voice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_key_state",1,SWIGTYPE_p_mopo__Voice);
  }
  
  result = (mopo::Voice::KeyState)(arg1)->key_state();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_event_sample(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::Voice::event_sample",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::event_sample",1,"mopo::Voice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_event_sample",1,SWIGTYPE_p_mopo__Voice);
  }
  
  result = (int)(arg1)->event_sample();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_aftertouch(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Voice::aftertouch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::aftertouch",1,"mopo::Voice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_aftertouch",1,SWIGTYPE_p_mopo__Voice);
  }
  
  result = (mopo::mopo_float)(arg1)->aftertouch();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_aftertouch_sample(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Voice::aftertouch_sample",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::aftertouch_sample",1,"mopo::Voice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_aftertouch_sample",1,SWIGTYPE_p_mopo__Voice);
  }
  
  result = (mopo::mopo_float)(arg1)->aftertouch_sample();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_activate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float arg3 ;
  mopo::mopo_float arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  SWIG_check_num_args("mopo::Voice::activate",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::activate",1,"mopo::Voice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Voice::activate",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Voice::activate",3,"mopo::mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::Voice::activate",4,"mopo::mopo_float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("mopo::Voice::activate",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("mopo::Voice::activate",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("mopo::Voice::activate",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_activate",1,SWIGTYPE_p_mopo__Voice);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  arg4 = (mopo::mopo_float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  (arg1)->activate(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_activate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float arg3 ;
  mopo::mopo_float arg4 ;
  int arg5 ;
  int arg6 ;
  
  SWIG_check_num_args("mopo::Voice::activate",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::activate",1,"mopo::Voice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Voice::activate",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Voice::activate",3,"mopo::mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::Voice::activate",4,"mopo::mopo_float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("mopo::Voice::activate",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("mopo::Voice::activate",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_activate",1,SWIGTYPE_p_mopo__Voice);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  arg4 = (mopo::mopo_float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  (arg1)->activate(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_activate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float arg3 ;
  mopo::mopo_float arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("mopo::Voice::activate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::activate",1,"mopo::Voice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Voice::activate",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Voice::activate",3,"mopo::mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::Voice::activate",4,"mopo::mopo_float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("mopo::Voice::activate",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_activate",1,SWIGTYPE_p_mopo__Voice);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  arg4 = (mopo::mopo_float)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->activate(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_activate__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float arg3 ;
  mopo::mopo_float arg4 ;
  
  SWIG_check_num_args("mopo::Voice::activate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::activate",1,"mopo::Voice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Voice::activate",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Voice::activate",3,"mopo::mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::Voice::activate",4,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_activate",1,SWIGTYPE_p_mopo__Voice);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  arg4 = (mopo::mopo_float)lua_tonumber(L, 4);
  (arg1)->activate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_activate(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Voice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Voice_activate__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Voice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Voice_activate__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Voice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Voice_activate__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Voice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Voice_activate__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Voice_activate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Voice::activate(mopo::mopo_float,mopo::mopo_float,mopo::mopo_float,int,int,int)\n"
    "    mopo::Voice::activate(mopo::mopo_float,mopo::mopo_float,mopo::mopo_float,int,int)\n"
    "    mopo::Voice::activate(mopo::mopo_float,mopo::mopo_float,mopo::mopo_float,int)\n"
    "    mopo::Voice::activate(mopo::mopo_float,mopo::mopo_float,mopo::mopo_float)\n");
  lua_error(L);return 0;
}


static int _wrap_Voice_sustain(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  
  SWIG_check_num_args("mopo::Voice::sustain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::sustain",1,"mopo::Voice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_sustain",1,SWIGTYPE_p_mopo__Voice);
  }
  
  (arg1)->sustain();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_deactivate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Voice::deactivate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::deactivate",1,"mopo::Voice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Voice::deactivate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_deactivate",1,SWIGTYPE_p_mopo__Voice);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->deactivate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_deactivate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  
  SWIG_check_num_args("mopo::Voice::deactivate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::deactivate",1,"mopo::Voice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_deactivate",1,SWIGTYPE_p_mopo__Voice);
  }
  
  (arg1)->deactivate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_deactivate(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Voice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Voice_deactivate__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Voice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Voice_deactivate__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Voice_deactivate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Voice::deactivate(int)\n"
    "    mopo::Voice::deactivate()\n");
  lua_error(L);return 0;
}


static int _wrap_Voice_kill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::Voice::kill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::kill",1,"mopo::Voice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Voice::kill",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_kill",1,SWIGTYPE_p_mopo__Voice);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->kill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_kill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  
  SWIG_check_num_args("mopo::Voice::kill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::kill",1,"mopo::Voice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_kill",1,SWIGTYPE_p_mopo__Voice);
  }
  
  (arg1)->kill();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_kill(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Voice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Voice_kill__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Voice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Voice_kill__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Voice_kill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Voice::kill(int)\n"
    "    mopo::Voice::kill()\n");
  lua_error(L);return 0;
}


static int _wrap_Voice_hasNewEvent(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  bool result;
  
  SWIG_check_num_args("mopo::Voice::hasNewEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::hasNewEvent",1,"mopo::Voice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_hasNewEvent",1,SWIGTYPE_p_mopo__Voice);
  }
  
  result = (bool)(arg1)->hasNewEvent();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_setAftertouch__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  mopo::mopo_float arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("mopo::Voice::setAftertouch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::setAftertouch",1,"mopo::Voice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Voice::setAftertouch",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Voice::setAftertouch",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_setAftertouch",1,SWIGTYPE_p_mopo__Voice);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setAftertouch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_setAftertouch__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  mopo::mopo_float arg2 ;
  
  SWIG_check_num_args("mopo::Voice::setAftertouch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::setAftertouch",1,"mopo::Voice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Voice::setAftertouch",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_setAftertouch",1,SWIGTYPE_p_mopo__Voice);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  (arg1)->setAftertouch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_setAftertouch(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Voice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Voice_setAftertouch__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Voice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Voice_setAftertouch__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Voice_setAftertouch'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::Voice::setAftertouch(mopo::mopo_float,int)\n"
    "    mopo::Voice::setAftertouch(mopo::mopo_float)\n");
  lua_error(L);return 0;
}


static int _wrap_Voice_hasNewAftertouch(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  bool result;
  
  SWIG_check_num_args("mopo::Voice::hasNewAftertouch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::hasNewAftertouch",1,"mopo::Voice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_hasNewAftertouch",1,SWIGTYPE_p_mopo__Voice);
  }
  
  result = (bool)(arg1)->hasNewAftertouch();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voice_clearEvents(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Voice *arg1 = (mopo::Voice *) 0 ;
  
  SWIG_check_num_args("mopo::Voice::clearEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::Voice::clearEvents",1,"mopo::Voice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Voice,0))){
    SWIG_fail_ptr("Voice_clearEvents",1,SWIGTYPE_p_mopo__Voice);
  }
  
  (arg1)->clearEvents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Voice(void *obj) {
mopo::Voice *arg1 = (mopo::Voice *) obj;
delete arg1;
}
static int _proxy__wrap_new_Voice(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Voice);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Voice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Voice_methods[]= {
    { "processor", _wrap_Voice_processor},
    { "state", _wrap_Voice_state},
    { "key_state", _wrap_Voice_key_state},
    { "event_sample", _wrap_Voice_event_sample},
    { "aftertouch", _wrap_Voice_aftertouch},
    { "aftertouch_sample", _wrap_Voice_aftertouch_sample},
    { "activate", _wrap_Voice_activate},
    { "sustain", _wrap_Voice_sustain},
    { "deactivate", _wrap_Voice_deactivate},
    { "kill", _wrap_Voice_kill},
    { "hasNewEvent", _wrap_Voice_hasNewEvent},
    { "setAftertouch", _wrap_Voice_setAftertouch},
    { "hasNewAftertouch", _wrap_Voice_hasNewAftertouch},
    { "clearEvents", _wrap_Voice_clearEvents},
    {0,0}
};
static swig_lua_method swig_Voice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Voice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Voice_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kHeld", mopo::Voice::kHeld)},
    {SWIG_LUA_CONSTTAB_INT("kSustained", mopo::Voice::kSustained)},
    {SWIG_LUA_CONSTTAB_INT("kReleased", mopo::Voice::kReleased)},
    {SWIG_LUA_CONSTTAB_INT("kNumStates", mopo::Voice::kNumStates)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Voice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Voice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Voice_Sf_SwigStatic = {
    "Voice",
    swig_Voice_Sf_SwigStatic_methods,
    swig_Voice_Sf_SwigStatic_attributes,
    swig_Voice_Sf_SwigStatic_constants,
    swig_Voice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Voice_bases[] = {0};
static const char *swig_Voice_base_names[] = {0};
static swig_lua_class _wrap_class_Voice = { "Voice", "Voice", &SWIGTYPE_p_mopo__Voice,_proxy__wrap_new_Voice, swig_delete_Voice, swig_Voice_methods, swig_Voice_attributes, &swig_Voice_Sf_SwigStatic, swig_Voice_meta, swig_Voice_bases, swig_Voice_base_names };

static int _wrap_VoiceHandler_clone(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Processor *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::clone",1,"mopo::VoiceHandler const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_clone",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (mopo::Processor *)((mopo::VoiceHandler const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Processor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_process(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::process",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_process",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  (arg1)->process();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_setSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::setSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::setSampleRate",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::setSampleRate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_setSampleRate",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_setBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::setBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::setBufferSize",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::setBufferSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_setBufferSize",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setBufferSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_getNumActiveVoices(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  int result;
  
  SWIG_check_num_args("mopo::VoiceHandler::getNumActiveVoices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::getNumActiveVoices",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_getNumActiveVoices",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (int)(arg1)->getNumActiveVoices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_getPressedNotes(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::CircularQueue< mopo::mopo_float > *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::getPressedNotes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::getPressedNotes",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_getPressedNotes",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (mopo::CircularQueue< mopo::mopo_float > *) &(arg1)->getPressedNotes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__CircularQueueT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_isNotePlaying(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::mopo_float arg2 ;
  bool result;
  
  SWIG_check_num_args("mopo::VoiceHandler::isNotePlaying",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::isNotePlaying",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::isNotePlaying",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_isNotePlaying",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  result = (bool)(arg1)->isNotePlaying(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_allNotesOff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::allNotesOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::allNotesOff",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::allNotesOff",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_allNotesOff",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->allNotesOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_allNotesOff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::allNotesOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::allNotesOff",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_allNotesOff",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  (arg1)->allNotesOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_allNotesOff(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_VoiceHandler_allNotesOff__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VoiceHandler_allNotesOff__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VoiceHandler_allNotesOff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::VoiceHandler::allNotesOff(int)\n"
    "    mopo::VoiceHandler::allNotesOff()\n");
  lua_error(L);return 0;
}


static int _wrap_VoiceHandler_noteOn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::noteOn",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",3,"mopo::mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_noteOn",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->noteOn(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_noteOn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::noteOn",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",3,"mopo::mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_noteOn",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->noteOn(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_noteOn__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float arg3 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",3,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_noteOn",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_noteOn__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::mopo_float arg2 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::noteOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::noteOn",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_noteOn",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  (arg1)->noteOn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_noteOn(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VoiceHandler_noteOn__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_VoiceHandler_noteOn__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_VoiceHandler_noteOn__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_VoiceHandler_noteOn__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VoiceHandler_noteOn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::VoiceHandler::noteOn(mopo::mopo_float,mopo::mopo_float,int,int)\n"
    "    mopo::VoiceHandler::noteOn(mopo::mopo_float,mopo::mopo_float,int)\n"
    "    mopo::VoiceHandler::noteOn(mopo::mopo_float,mopo::mopo_float)\n"
    "    mopo::VoiceHandler::noteOn(mopo::mopo_float)\n");
  lua_error(L);return 0;
}


static int _wrap_VoiceHandler_noteOff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::mopo_float arg2 ;
  int arg3 ;
  mopo::VoiceEvent result;
  
  SWIG_check_num_args("mopo::VoiceHandler::noteOff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::noteOff",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::noteOff",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::VoiceHandler::noteOff",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_noteOff",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (mopo::VoiceEvent)(arg1)->noteOff(arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_noteOff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::VoiceEvent result;
  
  SWIG_check_num_args("mopo::VoiceHandler::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::noteOff",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::noteOff",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_noteOff",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  result = (mopo::VoiceEvent)(arg1)->noteOff(arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_noteOff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VoiceHandler_noteOff__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_VoiceHandler_noteOff__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VoiceHandler_noteOff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::VoiceHandler::noteOff(mopo::mopo_float,int)\n"
    "    mopo::VoiceHandler::noteOff(mopo::mopo_float)\n");
  lua_error(L);return 0;
}


static int _wrap_VoiceHandler_setAftertouch__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::setAftertouch",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::setAftertouch",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::setAftertouch",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::VoiceHandler::setAftertouch",3,"mopo::mopo_float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("mopo::VoiceHandler::setAftertouch",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_setAftertouch",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setAftertouch(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_setAftertouch__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float arg3 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::setAftertouch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::setAftertouch",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::setAftertouch",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::VoiceHandler::setAftertouch",3,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_setAftertouch",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  (arg1)->setAftertouch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_setAftertouch(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_VoiceHandler_setAftertouch__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_VoiceHandler_setAftertouch__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VoiceHandler_setAftertouch'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::VoiceHandler::setAftertouch(mopo::mopo_float,mopo::mopo_float,int)\n"
    "    mopo::VoiceHandler::setAftertouch(mopo::mopo_float,mopo::mopo_float)\n");
  lua_error(L);return 0;
}


static int _wrap_VoiceHandler_sustainOn(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::sustainOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::sustainOn",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_sustainOn",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  (arg1)->sustainOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_sustainOff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::sustainOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::sustainOff",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::sustainOff",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_sustainOff",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->sustainOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_sustainOff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::sustainOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::sustainOff",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_sustainOff",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  (arg1)->sustainOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_sustainOff(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_VoiceHandler_sustainOff__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VoiceHandler_sustainOff__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VoiceHandler_sustainOff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::VoiceHandler::sustainOff(int)\n"
    "    mopo::VoiceHandler::sustainOff()\n");
  lua_error(L);return 0;
}


static int _wrap_VoiceHandler_voice_event(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::voice_event",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::voice_event",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_voice_event",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (mopo::Output *)(arg1)->voice_event();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_note(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::note",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::note",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_note",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (mopo::Output *)(arg1)->note();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_last_note(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::last_note",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::last_note",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_last_note",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (mopo::Output *)(arg1)->last_note();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_note_pressed(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::note_pressed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::note_pressed",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_note_pressed",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (mopo::Output *)(arg1)->note_pressed();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_channel(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::channel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::channel",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_channel",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (mopo::Output *)(arg1)->channel();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_velocity(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::velocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::velocity",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_velocity",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (mopo::Output *)(arg1)->velocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_aftertouch(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::aftertouch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::aftertouch",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_aftertouch",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (mopo::Output *)(arg1)->aftertouch();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_polyphony(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  size_t result;
  
  SWIG_check_num_args("mopo::VoiceHandler::polyphony",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::polyphony",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_polyphony",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (arg1)->polyphony();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_getLastActiveNote(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::VoiceHandler::getLastActiveNote",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::getLastActiveNote",1,"mopo::VoiceHandler const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_getLastActiveNote",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (mopo::mopo_float)((mopo::VoiceHandler const *)arg1)->getLastActiveNote();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_getMonoRouter(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::ProcessorRouter *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::getMonoRouter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::getMonoRouter",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_getMonoRouter",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (mopo::ProcessorRouter *)(arg1)->getMonoRouter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ProcessorRouter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_getPolyRouter(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::ProcessorRouter *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::getPolyRouter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::getPolyRouter",1,"mopo::VoiceHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_getPolyRouter",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  result = (mopo::ProcessorRouter *)(arg1)->getPolyRouter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ProcessorRouter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_addProcessor(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::addProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::addProcessor",1,"mopo::VoiceHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::VoiceHandler::addProcessor",2,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_addProcessor",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("VoiceHandler_addProcessor",2,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->addProcessor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_removeProcessor(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::removeProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::removeProcessor",1,"mopo::VoiceHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::VoiceHandler::removeProcessor",2,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_removeProcessor",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("VoiceHandler_removeProcessor",2,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->removeProcessor((mopo::Processor const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_addGlobalProcessor(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::addGlobalProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::addGlobalProcessor",1,"mopo::VoiceHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::VoiceHandler::addGlobalProcessor",2,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_addGlobalProcessor",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("VoiceHandler_addGlobalProcessor",2,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->addGlobalProcessor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_removeGlobalProcessor(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::removeGlobalProcessor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::removeGlobalProcessor",1,"mopo::VoiceHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::VoiceHandler::removeGlobalProcessor",2,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_removeGlobalProcessor",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("VoiceHandler_removeGlobalProcessor",2,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->removeGlobalProcessor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_registerOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::registerOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::registerOutput",1,"mopo::VoiceHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::VoiceHandler::registerOutput",2,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_registerOutput",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("VoiceHandler_registerOutput",2,SWIGTYPE_p_mopo__Output);
  }
  
  result = (mopo::Output *)(arg1)->registerOutput(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_registerOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  int arg3 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::registerOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::registerOutput",1,"mopo::VoiceHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::VoiceHandler::registerOutput",2,"mopo::Output *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::VoiceHandler::registerOutput",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_registerOutput",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("VoiceHandler_registerOutput",2,SWIGTYPE_p_mopo__Output);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (mopo::Output *)(arg1)->registerOutput(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_registerOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VoiceHandler_registerOutput__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_VoiceHandler_registerOutput__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VoiceHandler_registerOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::VoiceHandler::registerOutput(mopo::Output *)\n"
    "    mopo::VoiceHandler::registerOutput(mopo::Output *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_VoiceHandler_setPolyphony(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::setPolyphony",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::setPolyphony",1,"mopo::VoiceHandler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::VoiceHandler::setPolyphony",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_setPolyphony",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->setPolyphony(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_setVoiceKiller__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::setVoiceKiller",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::setVoiceKiller",1,"mopo::VoiceHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::VoiceHandler::setVoiceKiller",2,"mopo::Output const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_setVoiceKiller",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("VoiceHandler_setVoiceKiller",2,SWIGTYPE_p_mopo__Output);
  }
  
  (arg1)->setVoiceKiller((mopo::Output const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_setLegato(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::setLegato",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::setLegato",1,"mopo::VoiceHandler *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("mopo::VoiceHandler::setLegato",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_setLegato",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setLegato(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_setVoiceKiller__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("mopo::VoiceHandler::setVoiceKiller",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::setVoiceKiller",1,"mopo::VoiceHandler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::VoiceHandler::setVoiceKiller",2,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_setVoiceKiller",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("VoiceHandler_setVoiceKiller",2,SWIGTYPE_p_mopo__Processor);
  }
  
  (arg1)->setVoiceKiller((mopo::Processor const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoiceHandler_setVoiceKiller(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VoiceHandler_setVoiceKiller__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__VoiceHandler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VoiceHandler_setVoiceKiller__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VoiceHandler_setVoiceKiller'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mopo::VoiceHandler::setVoiceKiller(mopo::Output const *)\n"
    "    mopo::VoiceHandler::setVoiceKiller(mopo::Processor const *)\n");
  lua_error(L);return 0;
}


static int _wrap_VoiceHandler_isPolyphonic(lua_State* L) {
  int SWIG_arg = 0;
  mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  bool result;
  
  SWIG_check_num_args("mopo::VoiceHandler::isPolyphonic",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::VoiceHandler::isPolyphonic",1,"mopo::VoiceHandler const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("mopo::VoiceHandler::isPolyphonic",2,"mopo::Processor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__VoiceHandler,0))){
    SWIG_fail_ptr("VoiceHandler_isPolyphonic",1,SWIGTYPE_p_mopo__VoiceHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("VoiceHandler_isPolyphonic",2,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (bool)((mopo::VoiceHandler const *)arg1)->isPolyphonic((mopo::Processor const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VoiceHandler(void *obj) {
mopo::VoiceHandler *arg1 = (mopo::VoiceHandler *) obj;
delete arg1;
}
static swig_lua_attribute swig_VoiceHandler_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VoiceHandler_methods[]= {
    { "clone", _wrap_VoiceHandler_clone},
    { "process", _wrap_VoiceHandler_process},
    { "setSampleRate", _wrap_VoiceHandler_setSampleRate},
    { "setBufferSize", _wrap_VoiceHandler_setBufferSize},
    { "getNumActiveVoices", _wrap_VoiceHandler_getNumActiveVoices},
    { "getPressedNotes", _wrap_VoiceHandler_getPressedNotes},
    { "isNotePlaying", _wrap_VoiceHandler_isNotePlaying},
    { "allNotesOff", _wrap_VoiceHandler_allNotesOff},
    { "noteOn", _wrap_VoiceHandler_noteOn},
    { "noteOff", _wrap_VoiceHandler_noteOff},
    { "setAftertouch", _wrap_VoiceHandler_setAftertouch},
    { "sustainOn", _wrap_VoiceHandler_sustainOn},
    { "sustainOff", _wrap_VoiceHandler_sustainOff},
    { "voice_event", _wrap_VoiceHandler_voice_event},
    { "note", _wrap_VoiceHandler_note},
    { "last_note", _wrap_VoiceHandler_last_note},
    { "note_pressed", _wrap_VoiceHandler_note_pressed},
    { "channel", _wrap_VoiceHandler_channel},
    { "velocity", _wrap_VoiceHandler_velocity},
    { "aftertouch", _wrap_VoiceHandler_aftertouch},
    { "polyphony", _wrap_VoiceHandler_polyphony},
    { "getLastActiveNote", _wrap_VoiceHandler_getLastActiveNote},
    { "getMonoRouter", _wrap_VoiceHandler_getMonoRouter},
    { "getPolyRouter", _wrap_VoiceHandler_getPolyRouter},
    { "addProcessor", _wrap_VoiceHandler_addProcessor},
    { "removeProcessor", _wrap_VoiceHandler_removeProcessor},
    { "addGlobalProcessor", _wrap_VoiceHandler_addGlobalProcessor},
    { "removeGlobalProcessor", _wrap_VoiceHandler_removeGlobalProcessor},
    { "registerOutput", _wrap_VoiceHandler_registerOutput},
    { "setPolyphony", _wrap_VoiceHandler_setPolyphony},
    { "setLegato", _wrap_VoiceHandler_setLegato},
    { "setVoiceKiller", _wrap_VoiceHandler_setVoiceKiller},
    { "isPolyphonic", _wrap_VoiceHandler_isPolyphonic},
    {0,0}
};
static swig_lua_method swig_VoiceHandler_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VoiceHandler_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VoiceHandler_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kPolyphony", mopo::VoiceHandler::kPolyphony)},
    {SWIG_LUA_CONSTTAB_INT("kNumInputs", mopo::VoiceHandler::kNumInputs)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VoiceHandler_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VoiceHandler_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VoiceHandler_Sf_SwigStatic = {
    "VoiceHandler",
    swig_VoiceHandler_Sf_SwigStatic_methods,
    swig_VoiceHandler_Sf_SwigStatic_attributes,
    swig_VoiceHandler_Sf_SwigStatic_constants,
    swig_VoiceHandler_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VoiceHandler_bases[] = {0,0,0};
static const char *swig_VoiceHandler_base_names[] = {"mopo::ProcessorRouter *","mopo::NoteHandler *",0};
static swig_lua_class _wrap_class_VoiceHandler = { "VoiceHandler", "VoiceHandler", &SWIGTYPE_p_mopo__VoiceHandler,0, swig_delete_VoiceHandler, swig_VoiceHandler_methods, swig_VoiceHandler_attributes, &swig_VoiceHandler_Sf_SwigStatic, swig_VoiceHandler_meta, swig_VoiceHandler_bases, swig_VoiceHandler_base_names };

static int _wrap_new_WaveLookup(lua_State* L) {
  int SWIG_arg = 0;
  mopo::WaveLookup *result = 0 ;
  
  SWIG_check_num_args("mopo::WaveLookup::WaveLookup",0,0)
  result = (mopo::WaveLookup *)new mopo::WaveLookup();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__WaveLookup,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveLookup_instance(lua_State* L) {
  int SWIG_arg = 0;
  mopo::WaveLookup *result = 0 ;
  
  SWIG_check_num_args("mopo::WaveLookup::instance",0,0)
  result = (mopo::WaveLookup *)mopo::WaveLookup::instance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__WaveLookup,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveLookup_fullsin(lua_State* L) {
  int SWIG_arg = 0;
  mopo::WaveLookup *arg1 = (mopo::WaveLookup *) 0 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::WaveLookup::fullsin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::WaveLookup::fullsin",1,"mopo::WaveLookup const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::WaveLookup::fullsin",2,"mopo::mopo_float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__WaveLookup,0))){
    SWIG_fail_ptr("WaveLookup_fullsin",1,SWIGTYPE_p_mopo__WaveLookup);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  result = (mopo::mopo_float)((mopo::WaveLookup const *)arg1)->fullsin(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveLookup_square(lua_State* L) {
  int SWIG_arg = 0;
  mopo::WaveLookup *arg1 = (mopo::WaveLookup *) 0 ;
  mopo::mopo_float arg2 ;
  int arg3 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::WaveLookup::square",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::WaveLookup::square",1,"mopo::WaveLookup const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::WaveLookup::square",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::WaveLookup::square",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__WaveLookup,0))){
    SWIG_fail_ptr("WaveLookup_square",1,SWIGTYPE_p_mopo__WaveLookup);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (mopo::mopo_float)((mopo::WaveLookup const *)arg1)->square(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveLookup_upsaw(lua_State* L) {
  int SWIG_arg = 0;
  mopo::WaveLookup *arg1 = (mopo::WaveLookup *) 0 ;
  mopo::mopo_float arg2 ;
  int arg3 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::WaveLookup::upsaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::WaveLookup::upsaw",1,"mopo::WaveLookup const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::WaveLookup::upsaw",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::WaveLookup::upsaw",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__WaveLookup,0))){
    SWIG_fail_ptr("WaveLookup_upsaw",1,SWIGTYPE_p_mopo__WaveLookup);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (mopo::mopo_float)((mopo::WaveLookup const *)arg1)->upsaw(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveLookup_downsaw(lua_State* L) {
  int SWIG_arg = 0;
  mopo::WaveLookup *arg1 = (mopo::WaveLookup *) 0 ;
  mopo::mopo_float arg2 ;
  int arg3 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::WaveLookup::downsaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::WaveLookup::downsaw",1,"mopo::WaveLookup const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::WaveLookup::downsaw",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::WaveLookup::downsaw",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__WaveLookup,0))){
    SWIG_fail_ptr("WaveLookup_downsaw",1,SWIGTYPE_p_mopo__WaveLookup);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (mopo::mopo_float)((mopo::WaveLookup const *)arg1)->downsaw(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WaveLookup_triangle(lua_State* L) {
  int SWIG_arg = 0;
  mopo::WaveLookup *arg1 = (mopo::WaveLookup *) 0 ;
  mopo::mopo_float arg2 ;
  int arg3 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::WaveLookup::triangle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mopo::WaveLookup::triangle",1,"mopo::WaveLookup const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::WaveLookup::triangle",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::WaveLookup::triangle",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__WaveLookup,0))){
    SWIG_fail_ptr("WaveLookup_triangle",1,SWIGTYPE_p_mopo__WaveLookup);
  }
  
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (mopo::mopo_float)((mopo::WaveLookup const *)arg1)->triangle(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WaveLookup(void *obj) {
mopo::WaveLookup *arg1 = (mopo::WaveLookup *) obj;
delete arg1;
}
static int _proxy__wrap_new_WaveLookup(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WaveLookup);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WaveLookup_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WaveLookup_methods[]= {
    { "fullsin", _wrap_WaveLookup_fullsin},
    { "square", _wrap_WaveLookup_square},
    { "upsaw", _wrap_WaveLookup_upsaw},
    { "downsaw", _wrap_WaveLookup_downsaw},
    { "triangle", _wrap_WaveLookup_triangle},
    {0,0}
};
static swig_lua_method swig_WaveLookup_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WaveLookup_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WaveLookup_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WaveLookup_SwigStatic_methods[]= {
    { "instance", _wrap_WaveLookup_instance},
    {0,0}
};
static swig_lua_class* swig_WaveLookup_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WaveLookup_SwigStatic = {
    "WaveLookup",
    swig_WaveLookup_SwigStatic_methods,
    swig_WaveLookup_SwigStatic_attributes,
    swig_WaveLookup_SwigStatic_constants,
    swig_WaveLookup_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WaveLookup_bases[] = {0};
static const char *swig_WaveLookup_base_names[] = {0};
static swig_lua_class _wrap_class_WaveLookup = { "WaveLookup", "WaveLookup", &SWIGTYPE_p_mopo__WaveLookup,_proxy__wrap_new_WaveLookup, swig_delete_WaveLookup, swig_WaveLookup_methods, swig_WaveLookup_attributes, &swig_WaveLookup_SwigStatic, swig_WaveLookup_meta, swig_WaveLookup_bases, swig_WaveLookup_base_names };

static int _wrap_Wave_blwave(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Wave::Type arg1 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float arg3 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Wave::blwave",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Wave::blwave",1,"mopo::Wave::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Wave::blwave",2,"mopo::mopo_float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mopo::Wave::blwave",3,"mopo::mopo_float");
  arg1 = (mopo::Wave::Type)(int)lua_tonumber(L, 1);
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  arg3 = (mopo::mopo_float)lua_tonumber(L, 3);
  result = (mopo::mopo_float)mopo::Wave::blwave(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wave_wave(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Wave::Type arg1 ;
  mopo::mopo_float arg2 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Wave::wave",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Wave::wave",1,"mopo::Wave::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("mopo::Wave::wave",2,"mopo::mopo_float");
  arg1 = (mopo::Wave::Type)(int)lua_tonumber(L, 1);
  arg2 = (mopo::mopo_float)lua_tonumber(L, 2);
  result = (mopo::mopo_float)mopo::Wave::wave(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wave_nullwave(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Wave::nullwave",0,0)
  result = (mopo::mopo_float)mopo::Wave::nullwave();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wave_whitenoise(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Wave::whitenoise",0,0)
  result = (mopo::mopo_float)mopo::Wave::whitenoise();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wave_fullsin(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Wave::fullsin",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Wave::fullsin",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::mopo_float)mopo::Wave::fullsin(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wave_square(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Wave::square",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Wave::square",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::mopo_float)mopo::Wave::square(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wave_triangle(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Wave::triangle",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Wave::triangle",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::mopo_float)mopo::Wave::triangle(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wave_downsaw(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Wave::downsaw",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Wave::downsaw",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::mopo_float)mopo::Wave::downsaw(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wave_upsaw(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Wave::upsaw",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Wave::upsaw",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::mopo_float)mopo::Wave::upsaw(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wave_hannwave(lua_State* L) {
  int SWIG_arg = 0;
  mopo::mopo_float arg1 ;
  mopo::mopo_float result;
  
  SWIG_check_num_args("mopo::Wave::hannwave",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("mopo::Wave::hannwave",1,"mopo::mopo_float");
  arg1 = (mopo::mopo_float)lua_tonumber(L, 1);
  result = (mopo::mopo_float)mopo::Wave::hannwave(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Wave(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Wave *result = 0 ;
  
  SWIG_check_num_args("mopo::Wave::Wave",0,0)
  result = (mopo::Wave *)new mopo::Wave();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Wave,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Wave(void *obj) {
mopo::Wave *arg1 = (mopo::Wave *) obj;
delete arg1;
}
static int _proxy__wrap_new_Wave(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Wave);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Wave_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Wave_methods[]= {
    {0,0}
};
static swig_lua_method swig_Wave_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Wave_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Wave_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kSin", mopo::Wave::kSin)},
    {SWIG_LUA_CONSTTAB_INT("kTriangle", mopo::Wave::kTriangle)},
    {SWIG_LUA_CONSTTAB_INT("kSquare", mopo::Wave::kSquare)},
    {SWIG_LUA_CONSTTAB_INT("kDownSaw", mopo::Wave::kDownSaw)},
    {SWIG_LUA_CONSTTAB_INT("kUpSaw", mopo::Wave::kUpSaw)},
    {SWIG_LUA_CONSTTAB_INT("kThreeStep", mopo::Wave::kThreeStep)},
    {SWIG_LUA_CONSTTAB_INT("kFourStep", mopo::Wave::kFourStep)},
    {SWIG_LUA_CONSTTAB_INT("kEightStep", mopo::Wave::kEightStep)},
    {SWIG_LUA_CONSTTAB_INT("kThreePyramid", mopo::Wave::kThreePyramid)},
    {SWIG_LUA_CONSTTAB_INT("kFivePyramid", mopo::Wave::kFivePyramid)},
    {SWIG_LUA_CONSTTAB_INT("kNinePyramid", mopo::Wave::kNinePyramid)},
    {SWIG_LUA_CONSTTAB_INT("kWhiteNoise", mopo::Wave::kWhiteNoise)},
    {SWIG_LUA_CONSTTAB_INT("kNumWaveforms", mopo::Wave::kNumWaveforms)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Wave_Sf_SwigStatic_methods[]= {
    { "blwave", _wrap_Wave_blwave},
    { "wave", _wrap_Wave_wave},
    { "nullwave", _wrap_Wave_nullwave},
    { "whitenoise", _wrap_Wave_whitenoise},
    { "fullsin", _wrap_Wave_fullsin},
    { "square", _wrap_Wave_square},
    { "triangle", _wrap_Wave_triangle},
    { "downsaw", _wrap_Wave_downsaw},
    { "upsaw", _wrap_Wave_upsaw},
    { "hannwave", _wrap_Wave_hannwave},
    {0,0}
};
static swig_lua_class* swig_Wave_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Wave_Sf_SwigStatic = {
    "Wave",
    swig_Wave_Sf_SwigStatic_methods,
    swig_Wave_Sf_SwigStatic_attributes,
    swig_Wave_Sf_SwigStatic_constants,
    swig_Wave_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Wave_bases[] = {0};
static const char *swig_Wave_base_names[] = {0};
static swig_lua_class _wrap_class_Wave = { "Wave", "Wave", &SWIGTYPE_p_mopo__Wave,_proxy__wrap_new_Wave, swig_delete_Wave, swig_Wave_methods, swig_Wave_attributes, &swig_Wave_Sf_SwigStatic, swig_Wave_meta, swig_Wave_bases, swig_Wave_base_names };

static int _wrap_setSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("setSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSampleRate",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSampleRate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("setSampleRate",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  setSampleRate(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_setBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("setBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBufferSize",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setBufferSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("setBufferSize",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  setBufferSize(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_setControlRate(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setControlRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setControlRate",1,"mopo::Processor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setControlRate",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("setControlRate",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  setControlRate(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isEnabled(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEnabled",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("isEnabled",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (bool)isEnabled(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_enable(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("enable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("enable",1,"mopo::Processor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("enable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("enable",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  enable(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int result;
  
  SWIG_check_num_args("getSampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSampleRate",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("getSampleRate",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (int)getSampleRate(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int result;
  
  SWIG_check_num_args("getBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBufferSize",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("getBufferSize",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (int)getBufferSize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getSamplesToProcess(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int result;
  
  SWIG_check_num_args("getSamplesToProcess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSamplesToProcess",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("getSamplesToProcess",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (int)getSamplesToProcess(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isControlRate(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  bool result;
  
  SWIG_check_num_args("isControlRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isControlRate",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("isControlRate",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (bool)isControlRate(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inputMatchesBufferSize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("inputMatchesBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMatchesBufferSize",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inputMatchesBufferSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("inputMatchesBufferSize",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)inputMatchesBufferSize(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inputMatchesBufferSize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  bool result;
  
  SWIG_check_num_args("inputMatchesBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMatchesBufferSize",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("inputMatchesBufferSize",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (bool)inputMatchesBufferSize(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inputMatchesBufferSize(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_inputMatchesBufferSize__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_inputMatchesBufferSize__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'inputMatchesBufferSize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    inputMatchesBufferSize(mopo::Processor *,int)\n"
    "    inputMatchesBufferSize(mopo::Processor *)\n");
  lua_error(L);return 0;
}


static int _wrap_isPolyphonic(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPolyphonic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPolyphonic",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("isPolyphonic",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (bool)isPolyphonic(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plug__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  
  SWIG_check_num_args("plug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("plug",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("plug",2,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("plug",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("plug",2,SWIGTYPE_p_mopo__Output);
  }
  
  plug(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plug__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("plug",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("plug",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("plug",2,"mopo::Output *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("plug",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("plug",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("plug",2,SWIGTYPE_p_mopo__Output);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  plug(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plug__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("plug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("plug",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("plug",2,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("plug",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("plug",2,SWIGTYPE_p_mopo__Processor);
  }
  
  plug(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plug__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("plug",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("plug",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("plug",2,"mopo::Processor *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("plug",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("plug",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("plug",2,SWIGTYPE_p_mopo__Processor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  plug(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plug(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_plug__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_plug__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_plug__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_plug__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'plug'\n"
    "  Possible C/C++ prototypes are:\n"
    "    plug(mopo::Processor *,mopo::Output *)\n"
    "    plug(mopo::Processor *,mopo::Output *,unsigned int)\n"
    "    plug(mopo::Processor *,mopo::Processor *)\n"
    "    plug(mopo::Processor *,mopo::Processor *,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_plugNext__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  
  SWIG_check_num_args("plugNext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("plugNext",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("plugNext",2,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("plugNext",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("plugNext",2,SWIGTYPE_p_mopo__Output);
  }
  
  plugNext(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plugNext__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("plugNext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("plugNext",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("plugNext",2,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("plugNext",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("plugNext",2,SWIGTYPE_p_mopo__Processor);
  }
  
  plugNext(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plugNext(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_plugNext__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_plugNext__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'plugNext'\n"
    "  Possible C/C++ prototypes are:\n"
    "    plugNext(mopo::Processor *,mopo::Output *)\n"
    "    plugNext(mopo::Processor *,mopo::Processor *)\n");
  lua_error(L);return 0;
}


static int _wrap_getConnectedInputs(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int result;
  
  SWIG_check_num_args("getConnectedInputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getConnectedInputs",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("getConnectedInputs",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (int)getConnectedInputs(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unplugIndex(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("unplugIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unplugIndex",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("unplugIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("unplugIndex",1,SWIGTYPE_p_mopo__Processor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  unplugIndex(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unplug__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  
  SWIG_check_num_args("unplug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unplug",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("unplug",2,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("unplug",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("unplug",2,SWIGTYPE_p_mopo__Output);
  }
  
  unplug(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unplug__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Processor *arg2 = (mopo::Processor *) 0 ;
  
  SWIG_check_num_args("unplug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unplug",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("unplug",2,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("unplug",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("unplug",2,SWIGTYPE_p_mopo__Processor);
  }
  
  unplug(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unplug(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_unplug__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_unplug__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'unplug'\n"
    "  Possible C/C++ prototypes are:\n"
    "    unplug(mopo::Processor *,mopo::Output *)\n"
    "    unplug(mopo::Processor *,mopo::Processor *)\n");
  lua_error(L);return 0;
}


static int _wrap_getRouter(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::ProcessorRouter *result = 0 ;
  
  SWIG_check_num_args("getRouter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRouter",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("getRouter",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (mopo::ProcessorRouter *)getRouter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ProcessorRouter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_setRouter(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::ProcessorRouter *arg2 = (mopo::ProcessorRouter *) 0 ;
  
  SWIG_check_num_args("setRouter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRouter",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setRouter",2,"mopo::ProcessorRouter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("setRouter",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__ProcessorRouter,0))){
    SWIG_fail_ptr("setRouter",2,SWIGTYPE_p_mopo__ProcessorRouter);
  }
  
  setRouter(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getTopLevelRouter(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::ProcessorRouter *result = 0 ;
  
  SWIG_check_num_args("getTopLevelRouter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTopLevelRouter",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("getTopLevelRouter",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (mopo::ProcessorRouter *)getTopLevelRouter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__ProcessorRouter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_registerInput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Input *arg2 = (mopo::Input *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("registerInput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerInput",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("registerInput",2,"mopo::Input *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("registerInput",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("registerInput",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Input,0))){
    SWIG_fail_ptr("registerInput",2,SWIGTYPE_p_mopo__Input);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  registerInput(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_registerOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  int arg3 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("registerOutput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerOutput",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("registerOutput",2,"mopo::Output *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("registerOutput",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("registerOutput",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("registerOutput",2,SWIGTYPE_p_mopo__Output);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (mopo::Output *)registerOutput(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_registerInput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Input *arg2 = (mopo::Input *) 0 ;
  
  SWIG_check_num_args("registerInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerInput",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("registerInput",2,"mopo::Input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("registerInput",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Input,0))){
    SWIG_fail_ptr("registerInput",2,SWIGTYPE_p_mopo__Input);
  }
  
  registerInput(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_registerInput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Input, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_registerInput__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Input, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_registerInput__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'registerInput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    registerInput(mopo::Processor *,mopo::Input *,int)\n"
    "    registerInput(mopo::Processor *,mopo::Input *)\n");
  lua_error(L);return 0;
}


static int _wrap_registerOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *arg2 = (mopo::Output *) 0 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("registerOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerOutput",1,"mopo::Processor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("registerOutput",2,"mopo::Output *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("registerOutput",1,SWIGTYPE_p_mopo__Processor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_mopo__Output,0))){
    SWIG_fail_ptr("registerOutput",2,SWIGTYPE_p_mopo__Output);
  }
  
  result = (mopo::Output *)registerOutput(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_registerOutput(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_registerOutput__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mopo__Output, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_registerOutput__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'registerOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    registerOutput(mopo::Processor *,mopo::Output *,int)\n"
    "    registerOutput(mopo::Processor *,mopo::Output *)\n");
  lua_error(L);return 0;
}


static int _wrap_getNumInputs(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int result;
  
  SWIG_check_num_args("getNumInputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumInputs",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("getNumInputs",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (int)getNumInputs(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getNumOutputs(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int result;
  
  SWIG_check_num_args("getNumOutputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumOutputs",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("getNumOutputs",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (int)getNumOutputs(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getInputSample(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  SWIG_check_num_args("getInputSample",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInputSample",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getInputSample",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getInputSample",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("getInputSample",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float)getInputSample(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_writeOutputSample(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("writeOutputSample",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("writeOutputSample",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("writeOutputSample",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("writeOutputSample",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("writeOutputSample",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("writeOutputSample",1,SWIGTYPE_p_mopo__Processor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  writeOutputSample(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getInput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  unsigned int arg2 ;
  mopo::Input *result = 0 ;
  
  SWIG_check_num_args("getInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInput",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getInput",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("getInput",1,SWIGTYPE_p_mopo__Processor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (mopo::Input *)getInput(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Input,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getInput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Input *result = 0 ;
  
  SWIG_check_num_args("getInput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInput",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("getInput",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (mopo::Input *)getInput(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Input,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getInput(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_getInput__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_getInput__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'getInput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getInput(mopo::Processor *,unsigned int)\n"
    "    getInput(mopo::Processor *)\n");
  lua_error(L);return 0;
}


static int _wrap_getOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  unsigned int arg2 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("getOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getOutput",1,"mopo::Processor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getOutput",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("getOutput",1,SWIGTYPE_p_mopo__Processor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (mopo::Output *)getOutput(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  mopo::Processor *arg1 = (mopo::Processor *) 0 ;
  mopo::Output *result = 0 ;
  
  SWIG_check_num_args("getOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getOutput",1,"mopo::Processor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_mopo__Processor,0))){
    SWIG_fail_ptr("getOutput",1,SWIGTYPE_p_mopo__Processor);
  }
  
  result = (mopo::Output *)getOutput(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mopo__Output,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getOutput(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_getOutput__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_mopo__Processor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_getOutput__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'getOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getOutput(mopo::Processor *,unsigned int)\n"
    "    getOutput(mopo::Processor *)\n");
  lua_error(L);return 0;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "value_zero", _wrap_value_zero_get, SWIG_Lua_set_immutable },
    { "value_one", _wrap_value_one_get, SWIG_Lua_set_immutable },
    { "value_two", _wrap_value_two_get, SWIG_Lua_set_immutable },
    { "value_half", _wrap_value_half_get, SWIG_Lua_set_immutable },
    { "value_fifth", _wrap_value_fifth_get, SWIG_Lua_set_immutable },
    { "value_tenth", _wrap_value_tenth_get, SWIG_Lua_set_immutable },
    { "value_pi", _wrap_value_pi_get, SWIG_Lua_set_immutable },
    { "value_2pi", _wrap_value_2pi_get, SWIG_Lua_set_immutable },
    { "value_neg_one", _wrap_value_neg_one_get, SWIG_Lua_set_immutable },
    { "PI", _wrap_PI_get, SWIG_Lua_set_immutable },
    { "MAX_BUFFER_SIZE", _wrap_MAX_BUFFER_SIZE_get, SWIG_Lua_set_immutable },
    { "DEFAULT_BUFFER_SIZE", _wrap_DEFAULT_BUFFER_SIZE_get, SWIG_Lua_set_immutable },
    { "DEFAULT_SAMPLE_RATE", _wrap_DEFAULT_SAMPLE_RATE_get, SWIG_Lua_set_immutable },
    { "MAX_SAMPLE_RATE", _wrap_MAX_SAMPLE_RATE_get, SWIG_Lua_set_immutable },
    { "MIDI_SIZE", _wrap_MIDI_SIZE_get, SWIG_Lua_set_immutable },
    { "MAX_POLYPHONY", _wrap_MAX_POLYPHONY_get, SWIG_Lua_set_immutable },
    { "PPQ", _wrap_PPQ_get, SWIG_Lua_set_immutable },
    { "VOICE_KILL_TIME", _wrap_VOICE_KILL_TIME_get, SWIG_Lua_set_immutable },
    { "NUM_MIDI_CHANNELS", _wrap_NUM_MIDI_CHANNELS_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("Value_kSet", mopo::Value::kSet)},
    {SWIG_LUA_CONSTTAB_INT("Value_kNumInputs", mopo::Value::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("Alias_kAudio", mopo::Alias::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("Alias_kWet", mopo::Alias::kWet)},
    {SWIG_LUA_CONSTTAB_INT("Alias_kFrequency", mopo::Alias::kFrequency)},
    {SWIG_LUA_CONSTTAB_INT("Alias_kNumInputs", mopo::Alias::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("Arpeggiator_kUp", mopo::Arpeggiator::kUp)},
    {SWIG_LUA_CONSTTAB_INT("Arpeggiator_kDown", mopo::Arpeggiator::kDown)},
    {SWIG_LUA_CONSTTAB_INT("Arpeggiator_kUpDown", mopo::Arpeggiator::kUpDown)},
    {SWIG_LUA_CONSTTAB_INT("Arpeggiator_kAsPlayed", mopo::Arpeggiator::kAsPlayed)},
    {SWIG_LUA_CONSTTAB_INT("Arpeggiator_kRandom", mopo::Arpeggiator::kRandom)},
    {SWIG_LUA_CONSTTAB_INT("Arpeggiator_kNumTypes", mopo::Arpeggiator::kNumTypes)},
    {SWIG_LUA_CONSTTAB_INT("Arpeggiator_kFrequency", mopo::Arpeggiator::kFrequency)},
    {SWIG_LUA_CONSTTAB_INT("Arpeggiator_kGate", mopo::Arpeggiator::kGate)},
    {SWIG_LUA_CONSTTAB_INT("Arpeggiator_kPattern", mopo::Arpeggiator::kPattern)},
    {SWIG_LUA_CONSTTAB_INT("Arpeggiator_kOctaves", mopo::Arpeggiator::kOctaves)},
    {SWIG_LUA_CONSTTAB_INT("Arpeggiator_kOn", mopo::Arpeggiator::kOn)},
    {SWIG_LUA_CONSTTAB_INT("Arpeggiator_kNumInputs", mopo::Arpeggiator::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("BitCrush_kAudio", mopo::BitCrush::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("BitCrush_kWet", mopo::BitCrush::kWet)},
    {SWIG_LUA_CONSTTAB_INT("BitCrush_kBits", mopo::BitCrush::kBits)},
    {SWIG_LUA_CONSTTAB_INT("BitCrush_kNumInputs", mopo::BitCrush::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kAudio", mopo::BiquadFilter::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kType", mopo::BiquadFilter::kType)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kCutoff", mopo::BiquadFilter::kCutoff)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kResonance", mopo::BiquadFilter::kResonance)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kGain", mopo::BiquadFilter::kGain)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kReset", mopo::BiquadFilter::kReset)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kNumInputs", mopo::BiquadFilter::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kLowPass", mopo::BiquadFilter::kLowPass)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kHighPass", mopo::BiquadFilter::kHighPass)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kBandPass", mopo::BiquadFilter::kBandPass)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kLowShelf", mopo::BiquadFilter::kLowShelf)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kHighShelf", mopo::BiquadFilter::kHighShelf)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kBandShelf", mopo::BiquadFilter::kBandShelf)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kAllPass", mopo::BiquadFilter::kAllPass)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kNotch", mopo::BiquadFilter::kNotch)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kGainedBandPass", mopo::BiquadFilter::kGainedBandPass)},
    {SWIG_LUA_CONSTTAB_INT("BiquadFilter_kNumTypes", mopo::BiquadFilter::kNumTypes)},
    {SWIG_LUA_CONSTTAB_INT("BypassRouter_kAudio", mopo::BypassRouter::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("BypassRouter_kOn", mopo::BypassRouter::kOn)},
    {SWIG_LUA_CONSTTAB_INT("BypassRouter_kNumInputs", mopo::BypassRouter::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("kVoiceOff", mopo::kVoiceOff)},
    {SWIG_LUA_CONSTTAB_INT("kVoiceOn", mopo::kVoiceOn)},
    {SWIG_LUA_CONSTTAB_INT("kVoiceReset", mopo::kVoiceReset)},
    {SWIG_LUA_CONSTTAB_INT("kVoiceKill", mopo::kVoiceKill)},
    {SWIG_LUA_CONSTTAB_INT("Delay_kAudio", mopo::Delay::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("Delay_kWet", mopo::Delay::kWet)},
    {SWIG_LUA_CONSTTAB_INT("Delay_kSampleDelay", mopo::Delay::kSampleDelay)},
    {SWIG_LUA_CONSTTAB_INT("Delay_kFeedback", mopo::Delay::kFeedback)},
    {SWIG_LUA_CONSTTAB_INT("Delay_kNumInputs", mopo::Delay::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("Distortion_kAudio", mopo::Distortion::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("Distortion_kOn", mopo::Distortion::kOn)},
    {SWIG_LUA_CONSTTAB_INT("Distortion_kType", mopo::Distortion::kType)},
    {SWIG_LUA_CONSTTAB_INT("Distortion_kDrive", mopo::Distortion::kDrive)},
    {SWIG_LUA_CONSTTAB_INT("Distortion_kMix", mopo::Distortion::kMix)},
    {SWIG_LUA_CONSTTAB_INT("Distortion_kNumInputs", mopo::Distortion::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("Distortion_kSoftClip", mopo::Distortion::kSoftClip)},
    {SWIG_LUA_CONSTTAB_INT("Distortion_kHardClip", mopo::Distortion::kHardClip)},
    {SWIG_LUA_CONSTTAB_INT("Distortion_kLinearFold", mopo::Distortion::kLinearFold)},
    {SWIG_LUA_CONSTTAB_INT("Distortion_kSinFold", mopo::Distortion::kSinFold)},
    {SWIG_LUA_CONSTTAB_INT("Distortion_kNumTypes", mopo::Distortion::kNumTypes)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kAttack", mopo::Envelope::kAttack)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kDecay", mopo::Envelope::kDecay)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kSustain", mopo::Envelope::kSustain)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kRelease", mopo::Envelope::kRelease)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kTrigger", mopo::Envelope::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kNumInputs", mopo::Envelope::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kValue", mopo::Envelope::kValue)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kPhase", mopo::Envelope::kPhase)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kFinished", mopo::Envelope::kFinished)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kNumOutputs", mopo::Envelope::kNumOutputs)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kAttacking", mopo::Envelope::kAttacking)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kDecaying", mopo::Envelope::kDecaying)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kReleasing", mopo::Envelope::kReleasing)},
    {SWIG_LUA_CONSTTAB_INT("Envelope_kKilling", mopo::Envelope::kKilling)},
    {SWIG_LUA_CONSTTAB_INT("FormantManager_kAudio", mopo::FormantManager::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("FormantManager_kReset", mopo::FormantManager::kReset)},
    {SWIG_LUA_CONSTTAB_INT("FormantManager_kNumInputs", mopo::FormantManager::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("LinearSlope_kTarget", mopo::LinearSlope::kTarget)},
    {SWIG_LUA_CONSTTAB_INT("LinearSlope_kRunSeconds", mopo::LinearSlope::kRunSeconds)},
    {SWIG_LUA_CONSTTAB_INT("LinearSlope_kTriggerJump", mopo::LinearSlope::kTriggerJump)},
    {SWIG_LUA_CONSTTAB_INT("LinearSlope_kNumInputs", mopo::LinearSlope::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("MonoPanner_kAudio", mopo::MonoPanner::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("MonoPanner_kPan", mopo::MonoPanner::kPan)},
    {SWIG_LUA_CONSTTAB_INT("MonoPanner_kNumInputs", mopo::MonoPanner::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("MonoPanner_kLeft", mopo::MonoPanner::kLeft)},
    {SWIG_LUA_CONSTTAB_INT("MonoPanner_kRight", mopo::MonoPanner::kRight)},
    {SWIG_LUA_CONSTTAB_INT("MonoPanner_kNumOutputs", mopo::MonoPanner::kNumOutputs)},
    {SWIG_LUA_CONSTTAB_INT("Interpolate_kFrom", mopo::Interpolate::kFrom)},
    {SWIG_LUA_CONSTTAB_INT("Interpolate_kTo", mopo::Interpolate::kTo)},
    {SWIG_LUA_CONSTTAB_INT("Interpolate_kFractional", mopo::Interpolate::kFractional)},
    {SWIG_LUA_CONSTTAB_INT("Interpolate_kNumInputs", mopo::Interpolate::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("BilinearInterpolate_kTopLeft", mopo::BilinearInterpolate::kTopLeft)},
    {SWIG_LUA_CONSTTAB_INT("BilinearInterpolate_kTopRight", mopo::BilinearInterpolate::kTopRight)},
    {SWIG_LUA_CONSTTAB_INT("BilinearInterpolate_kBottomLeft", mopo::BilinearInterpolate::kBottomLeft)},
    {SWIG_LUA_CONSTTAB_INT("BilinearInterpolate_kBottomRight", mopo::BilinearInterpolate::kBottomRight)},
    {SWIG_LUA_CONSTTAB_INT("BilinearInterpolate_kXPosition", mopo::BilinearInterpolate::kXPosition)},
    {SWIG_LUA_CONSTTAB_INT("BilinearInterpolate_kYPosition", mopo::BilinearInterpolate::kYPosition)},
    {SWIG_LUA_CONSTTAB_INT("BilinearInterpolate_kNumInputs", mopo::BilinearInterpolate::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("LinearSmoothBuffer_kValue", mopo::LinearSmoothBuffer::kValue)},
    {SWIG_LUA_CONSTTAB_INT("LinearSmoothBuffer_kTrigger", mopo::LinearSmoothBuffer::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("LinearSmoothBuffer_kNumInputs", mopo::LinearSmoothBuffer::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_kFrequency", mopo::Oscillator::kFrequency)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_kPhase", mopo::Oscillator::kPhase)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_kWaveform", mopo::Oscillator::kWaveform)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_kReset", mopo::Oscillator::kReset)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_kNumInputs", mopo::Oscillator::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_kAudio", mopo::Oscillator::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_kOscPhase", mopo::Oscillator::kOscPhase)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_kNumOutputs", mopo::Oscillator::kNumOutputs)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoSlope_kTarget", mopo::PortamentoSlope::kTarget)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoSlope_kPortamentoType", mopo::PortamentoSlope::kPortamentoType)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoSlope_kNoteNumber", mopo::PortamentoSlope::kNoteNumber)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoSlope_kRunSeconds", mopo::PortamentoSlope::kRunSeconds)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoSlope_kTriggerJump", mopo::PortamentoSlope::kTriggerJump)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoSlope_kTriggerStart", mopo::PortamentoSlope::kTriggerStart)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoSlope_kNumInputs", mopo::PortamentoSlope::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoSlope_kPortamentoOff", mopo::PortamentoSlope::kPortamentoOff)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoSlope_kPortamentoAuto", mopo::PortamentoSlope::kPortamentoAuto)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoSlope_kPortamentoOn", mopo::PortamentoSlope::kPortamentoOn)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoSlope_kNumPortamentoStates", mopo::PortamentoSlope::kNumPortamentoStates)},
    {SWIG_LUA_CONSTTAB_INT("Reverb_kAudio", mopo::Reverb::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("Reverb_kFeedback", mopo::Reverb::kFeedback)},
    {SWIG_LUA_CONSTTAB_INT("Reverb_kDamping", mopo::Reverb::kDamping)},
    {SWIG_LUA_CONSTTAB_INT("Reverb_kStereoWidth", mopo::Reverb::kStereoWidth)},
    {SWIG_LUA_CONSTTAB_INT("Reverb_kWet", mopo::Reverb::kWet)},
    {SWIG_LUA_CONSTTAB_INT("Reverb_kNumInputs", mopo::Reverb::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("ReverbAllPass_kAudio", mopo::ReverbAllPass::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("ReverbAllPass_kSampleDelay", mopo::ReverbAllPass::kSampleDelay)},
    {SWIG_LUA_CONSTTAB_INT("ReverbAllPass_kFeedback", mopo::ReverbAllPass::kFeedback)},
    {SWIG_LUA_CONSTTAB_INT("ReverbAllPass_kNumInputs", mopo::ReverbAllPass::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("ReverbComb_kAudio", mopo::ReverbComb::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("ReverbComb_kSampleDelay", mopo::ReverbComb::kSampleDelay)},
    {SWIG_LUA_CONSTTAB_INT("ReverbComb_kFeedback", mopo::ReverbComb::kFeedback)},
    {SWIG_LUA_CONSTTAB_INT("ReverbComb_kDamping", mopo::ReverbComb::kDamping)},
    {SWIG_LUA_CONSTTAB_INT("ReverbComb_kNumInputs", mopo::ReverbComb::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("SimpleDelay_kAudio", mopo::SimpleDelay::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("SimpleDelay_kSampleDelay", mopo::SimpleDelay::kSampleDelay)},
    {SWIG_LUA_CONSTTAB_INT("SimpleDelay_kFeedback", mopo::SimpleDelay::kFeedback)},
    {SWIG_LUA_CONSTTAB_INT("SimpleDelay_kReset", mopo::SimpleDelay::kReset)},
    {SWIG_LUA_CONSTTAB_INT("SimpleDelay_kNumInputs", mopo::SimpleDelay::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("SmoothFilter_kTarget", mopo::SmoothFilter::kTarget)},
    {SWIG_LUA_CONSTTAB_INT("SmoothFilter_kHalfLife", mopo::SmoothFilter::kHalfLife)},
    {SWIG_LUA_CONSTTAB_INT("SmoothFilter_kNumInputs", mopo::SmoothFilter::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kAudio", mopo::StateVariableFilter::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kOn", mopo::StateVariableFilter::kOn)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kStyle", mopo::StateVariableFilter::kStyle)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kPassBlend", mopo::StateVariableFilter::kPassBlend)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kShelfChoice", mopo::StateVariableFilter::kShelfChoice)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kCutoff", mopo::StateVariableFilter::kCutoff)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kResonance", mopo::StateVariableFilter::kResonance)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kGain", mopo::StateVariableFilter::kGain)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kDrive", mopo::StateVariableFilter::kDrive)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kReset", mopo::StateVariableFilter::kReset)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kNumInputs", mopo::StateVariableFilter::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_k12dB", mopo::StateVariableFilter::k12dB)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_k24dB", mopo::StateVariableFilter::k24dB)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kShelf", mopo::StateVariableFilter::kShelf)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kNumStyles", mopo::StateVariableFilter::kNumStyles)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kLowShelf", mopo::StateVariableFilter::kLowShelf)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kBandShelf", mopo::StateVariableFilter::kBandShelf)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kHighShelf", mopo::StateVariableFilter::kHighShelf)},
    {SWIG_LUA_CONSTTAB_INT("StateVariableFilter_kNumShelves", mopo::StateVariableFilter::kNumShelves)},
    {SWIG_LUA_CONSTTAB_INT("DEFAULT_MAX_STEPS", 128)},
    {SWIG_LUA_CONSTTAB_INT("StepGenerator_kFrequency", mopo::StepGenerator::kFrequency)},
    {SWIG_LUA_CONSTTAB_INT("StepGenerator_kNumSteps", mopo::StepGenerator::kNumSteps)},
    {SWIG_LUA_CONSTTAB_INT("StepGenerator_kReset", mopo::StepGenerator::kReset)},
    {SWIG_LUA_CONSTTAB_INT("StepGenerator_kSteps", mopo::StepGenerator::kSteps)},
    {SWIG_LUA_CONSTTAB_INT("StepGenerator_kNumInputs", mopo::StepGenerator::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("StepGenerator_kValue", mopo::StepGenerator::kValue)},
    {SWIG_LUA_CONSTTAB_INT("StepGenerator_kStep", mopo::StepGenerator::kStep)},
    {SWIG_LUA_CONSTTAB_INT("StepGenerator_kNumOutputs", mopo::StepGenerator::kNumOutputs)},
    {SWIG_LUA_CONSTTAB_INT("Stutter_kAudio", mopo::Stutter::kAudio)},
    {SWIG_LUA_CONSTTAB_INT("Stutter_kStutterFrequency", mopo::Stutter::kStutterFrequency)},
    {SWIG_LUA_CONSTTAB_INT("Stutter_kResampleFrequency", mopo::Stutter::kResampleFrequency)},
    {SWIG_LUA_CONSTTAB_INT("Stutter_kWindowSoftness", mopo::Stutter::kWindowSoftness)},
    {SWIG_LUA_CONSTTAB_INT("Stutter_kReset", mopo::Stutter::kReset)},
    {SWIG_LUA_CONSTTAB_INT("Stutter_kNumInputs", mopo::Stutter::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("TriggerWait_kWait", mopo::TriggerWait::kWait)},
    {SWIG_LUA_CONSTTAB_INT("TriggerWait_kTrigger", mopo::TriggerWait::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("TriggerWait_kNumInputs", mopo::TriggerWait::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("TriggerFilter_kTrigger", mopo::TriggerFilter::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("TriggerFilter_kNumInputs", mopo::TriggerFilter::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("TriggerEquals_kTrigger", mopo::TriggerEquals::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("TriggerEquals_kCondition", mopo::TriggerEquals::kCondition)},
    {SWIG_LUA_CONSTTAB_INT("TriggerEquals_kNumInputs", mopo::TriggerEquals::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("TriggerNonZero_kTrigger", mopo::TriggerNonZero::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("TriggerNonZero_kCondition", mopo::TriggerNonZero::kCondition)},
    {SWIG_LUA_CONSTTAB_INT("TriggerNonZero_kNumInputs", mopo::TriggerNonZero::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("LegatoFilter_kLegato", mopo::LegatoFilter::kLegato)},
    {SWIG_LUA_CONSTTAB_INT("LegatoFilter_kTrigger", mopo::LegatoFilter::kTrigger)},
    {SWIG_LUA_CONSTTAB_INT("LegatoFilter_kNumInputs", mopo::LegatoFilter::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("LegatoFilter_kRetrigger", mopo::LegatoFilter::kRetrigger)},
    {SWIG_LUA_CONSTTAB_INT("LegatoFilter_kRemain", mopo::LegatoFilter::kRemain)},
    {SWIG_LUA_CONSTTAB_INT("LegatoFilter_kNumOutputs", mopo::LegatoFilter::kNumOutputs)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoFilter_kPortamento", mopo::PortamentoFilter::kPortamento)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoFilter_kFrequencyTrigger", mopo::PortamentoFilter::kFrequencyTrigger)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoFilter_kVoiceTrigger", mopo::PortamentoFilter::kVoiceTrigger)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoFilter_kNumInputs", mopo::PortamentoFilter::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoFilter_kPortamentoOff", mopo::PortamentoFilter::kPortamentoOff)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoFilter_kPortamentoAuto", mopo::PortamentoFilter::kPortamentoAuto)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoFilter_kPortamentoOn", mopo::PortamentoFilter::kPortamentoOn)},
    {SWIG_LUA_CONSTTAB_INT("PortamentoFilter_kNumPortamentoStates", mopo::PortamentoFilter::kNumPortamentoStates)},
    {SWIG_LUA_CONSTTAB_INT("Voice_kHeld", mopo::Voice::kHeld)},
    {SWIG_LUA_CONSTTAB_INT("Voice_kSustained", mopo::Voice::kSustained)},
    {SWIG_LUA_CONSTTAB_INT("Voice_kReleased", mopo::Voice::kReleased)},
    {SWIG_LUA_CONSTTAB_INT("Voice_kNumStates", mopo::Voice::kNumStates)},
    {SWIG_LUA_CONSTTAB_INT("VoiceHandler_kPolyphony", mopo::VoiceHandler::kPolyphony)},
    {SWIG_LUA_CONSTTAB_INT("VoiceHandler_kNumInputs", mopo::VoiceHandler::kNumInputs)},
    {SWIG_LUA_CONSTTAB_INT("LOOKUP_SIZE", 2048)},
    {SWIG_LUA_CONSTTAB_INT("HIGH_FREQUENCY", 20000)},
    {SWIG_LUA_CONSTTAB_INT("MAX_HARMONICS", 100)},
    {SWIG_LUA_CONSTTAB_INT("Wave_kSin", mopo::Wave::kSin)},
    {SWIG_LUA_CONSTTAB_INT("Wave_kTriangle", mopo::Wave::kTriangle)},
    {SWIG_LUA_CONSTTAB_INT("Wave_kSquare", mopo::Wave::kSquare)},
    {SWIG_LUA_CONSTTAB_INT("Wave_kDownSaw", mopo::Wave::kDownSaw)},
    {SWIG_LUA_CONSTTAB_INT("Wave_kUpSaw", mopo::Wave::kUpSaw)},
    {SWIG_LUA_CONSTTAB_INT("Wave_kThreeStep", mopo::Wave::kThreeStep)},
    {SWIG_LUA_CONSTTAB_INT("Wave_kFourStep", mopo::Wave::kFourStep)},
    {SWIG_LUA_CONSTTAB_INT("Wave_kEightStep", mopo::Wave::kEightStep)},
    {SWIG_LUA_CONSTTAB_INT("Wave_kThreePyramid", mopo::Wave::kThreePyramid)},
    {SWIG_LUA_CONSTTAB_INT("Wave_kFivePyramid", mopo::Wave::kFivePyramid)},
    {SWIG_LUA_CONSTTAB_INT("Wave_kNinePyramid", mopo::Wave::kNinePyramid)},
    {SWIG_LUA_CONSTTAB_INT("Wave_kWhiteNoise", mopo::Wave::kWhiteNoise)},
    {SWIG_LUA_CONSTTAB_INT("Wave_kNumWaveforms", mopo::Wave::kNumWaveforms)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "min", _wrap_min},
    { "max", _wrap_max},
    { "clamp", _wrap_clamp},
    { "imax", _wrap_imax},
    { "imin", _wrap_imin},
    { "interpolate", _wrap_interpolate},
    { "mod", _wrap_mod},
    { "iclamp", _wrap_iclamp},
    { "closeToZero", _wrap_closeToZero},
    { "gainToDb", _wrap_gainToDb},
    { "dbToGain", _wrap_dbToGain},
    { "centsToRatio", _wrap_centsToRatio},
    { "midiCentsToFrequency", _wrap_midiCentsToFrequency},
    { "midiNoteToFrequency", _wrap_midiNoteToFrequency},
    { "frequencyToMidiNote", _wrap_frequencyToMidiNote},
    { "frequencyToMidiCents", _wrap_frequencyToMidiCents},
    { "magnitudeToQ", _wrap_magnitudeToQ},
    { "qToMagnitude", _wrap_qToMagnitude},
    { "nextPowerOfTwo", _wrap_nextPowerOfTwo},
    { "quickerTanh", _wrap_quickerTanh},
    { "quickTanh", _wrap_quickTanh},
    { "quickerSin", _wrap_quickerSin},
    { "quickSin", _wrap_quickSin},
    { "quickerSin1", _wrap_quickerSin1},
    { "quickSin1", _wrap_quickSin1},
    { "isSilent", _wrap_isSilent},
    { "rms", _wrap_rms},
    { "peak", _wrap_peak},
    { "zeroBuffer", _wrap_zeroBuffer},
    { "copyBuffer", _wrap_copyBuffer},
    { "copyBufferf", _wrap_copyBufferf},
    { "MagnitudeLookup_magnitudeLookup", _wrap_MagnitudeLookup_magnitudeLookup},
    { "MidiLookup_centsLookup", _wrap_MidiLookup_centsLookup},
    { "ResonanceLookup_qLookup", _wrap_ResonanceLookup_qLookup},
    { "WaveLookup_instance", _wrap_WaveLookup_instance},
    { "Wave_blwave", _wrap_Wave_blwave},
    { "Wave_wave", _wrap_Wave_wave},
    { "Wave_nullwave", _wrap_Wave_nullwave},
    { "Wave_whitenoise", _wrap_Wave_whitenoise},
    { "Wave_fullsin", _wrap_Wave_fullsin},
    { "Wave_square", _wrap_Wave_square},
    { "Wave_triangle", _wrap_Wave_triangle},
    { "Wave_downsaw", _wrap_Wave_downsaw},
    { "Wave_upsaw", _wrap_Wave_upsaw},
    { "Wave_hannwave", _wrap_Wave_hannwave},
    { "setSampleRate", _wrap_setSampleRate},
    { "setBufferSize", _wrap_setBufferSize},
    { "setControlRate", _wrap_setControlRate},
    { "isEnabled", _wrap_isEnabled},
    { "enable", _wrap_enable},
    { "getSampleRate", _wrap_getSampleRate},
    { "getBufferSize", _wrap_getBufferSize},
    { "getSamplesToProcess", _wrap_getSamplesToProcess},
    { "isControlRate", _wrap_isControlRate},
    { "inputMatchesBufferSize", _wrap_inputMatchesBufferSize},
    { "isPolyphonic", _wrap_isPolyphonic},
    { "plug", _wrap_plug},
    { "plugNext", _wrap_plugNext},
    { "getConnectedInputs", _wrap_getConnectedInputs},
    { "unplugIndex", _wrap_unplugIndex},
    { "unplug", _wrap_unplug},
    { "getRouter", _wrap_getRouter},
    { "setRouter", _wrap_setRouter},
    { "getTopLevelRouter", _wrap_getTopLevelRouter},
    { "registerInput", _wrap_registerInput},
    { "registerOutput", _wrap_registerOutput},
    { "getNumInputs", _wrap_getNumInputs},
    { "getNumOutputs", _wrap_getNumOutputs},
    { "getInputSample", _wrap_getInputSample},
    { "writeOutputSample", _wrap_writeOutputSample},
    { "getInput", _wrap_getInput},
    { "getOutput", _wrap_getOutput},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_Output,
&_wrap_class_Input,
&_wrap_class_Processor,
&_wrap_class_ProcessorRouter,
&_wrap_class_Value,
&_wrap_class_NoteHandler,
&_wrap_class_Alias,
&_wrap_class_Arpeggiator,
&_wrap_class_BitCrush,
&_wrap_class_BiquadFilter,
&_wrap_class_BypassRouter,
&_wrap_class_Delay,
&_wrap_class_Distortion,
&_wrap_class_Envelope,
&_wrap_class_Feedback,
&_wrap_class_FormantManager,
&_wrap_class_LinearSlope,
&_wrap_class_MagnitudeLookupSingleton,
&_wrap_class_MagnitudeLookup,
&_wrap_class_Memory,
&_wrap_class_MidiLookupSingleton,
&_wrap_class_MidiLookup,
&_wrap_class_MonoPanner,
&_wrap_class_Operator,
&_wrap_class_Clamp,
&_wrap_class_Bypass,
&_wrap_class_Negate,
&_wrap_class_Inverse,
&_wrap_class_LinearScale,
&_wrap_class_Square,
&_wrap_class_ExponentialScale,
&_wrap_class_MidiScale,
&_wrap_class_ResonanceScale,
&_wrap_class_MagnitudeScale,
&_wrap_class_Add,
&_wrap_class_VariableAdd,
&_wrap_class_Subtract,
&_wrap_class_Multiply,
&_wrap_class_Interpolate,
&_wrap_class_BilinearInterpolate,
&_wrap_class_FrequencyToPhase,
&_wrap_class_FrequencyToSamples,
&_wrap_class_TimeToSamples,
&_wrap_class_SampleAndHoldBuffer,
&_wrap_class_LinearSmoothBuffer,
&_wrap_class_Oscillator,
&_wrap_class_PortamentoSlope,
&_wrap_class_ResonanceLookupSingleton,
&_wrap_class_ResonanceLookup,
&_wrap_class_Reverb,
&_wrap_class_ReverbAllPass,
&_wrap_class_ReverbComb,
&_wrap_class_SimpleDelay,
&_wrap_class_SmoothFilter,
&_wrap_class_SmoothValue,
&_wrap_class_StateVariableFilter,
&_wrap_class_StepGenerator,
&_wrap_class_Stutter,
&_wrap_class_TickRouter,
&_wrap_class_TriggerCombiner,
&_wrap_class_TriggerWait,
&_wrap_class_TriggerFilter,
&_wrap_class_TriggerEquals,
&_wrap_class_TriggerNonZero,
&_wrap_class_LegatoFilter,
&_wrap_class_PortamentoFilter,
&_wrap_class_VoiceState,
&_wrap_class_Voice,
&_wrap_class_VoiceHandler,
&_wrap_class_WaveLookup,
&_wrap_class_Wave,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "mopo",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_mopo__cr__QuadraticTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::Quadratic *) x));
}
static void *_p_mopo__cr__ClampTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::Clamp *) x));
}
static void *_p_mopo__ClampTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::Clamp *) x));
}
static void *_p_mopo__cr__FrequencyToPhaseTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::FrequencyToPhase *) x));
}
static void *_p_mopo__FrequencyToPhaseTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::FrequencyToPhase *) x));
}
static void *_p_mopo__cr__RootTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::Root *) x));
}
static void *_p_mopo__LinearSmoothBufferTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::LinearSmoothBuffer *) x));
}
static void *_p_mopo__SampleAndHoldBufferTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::SampleAndHoldBuffer *) x));
}
static void *_p_mopo__MagnitudeScaleTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::MagnitudeScale *) x));
}
static void *_p_mopo__cr__MagnitudeScaleTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::MagnitudeScale *) x));
}
static void *_p_mopo__NegateTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::Negate *) x));
}
static void *_p_mopo__cr__VariableAddTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::VariableAdd *) x));
}
static void *_p_mopo__VariableAddTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::VariableAdd *) x));
}
static void *_p_mopo__AddTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::Add *) x));
}
static void *_p_mopo__MidiScaleTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::MidiScale *) x));
}
static void *_p_mopo__cr__MidiScaleTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::MidiScale *) x));
}
static void *_p_mopo__cr__UpperBoundTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::UpperBound *) x));
}
static void *_p_mopo__cr__LowerBoundTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::LowerBound *) x));
}
static void *_p_mopo__cr__MultiplyTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::Multiply *) x));
}
static void *_p_mopo__MultiplyTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::Multiply *) x));
}
static void *_p_mopo__cr__AddTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::Add *) x));
}
static void *_p_mopo__cr__SquareTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::Square *) x));
}
static void *_p_mopo__SquareTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::Square *) x));
}
static void *_p_mopo__cr__InterpolateTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::Interpolate *) x));
}
static void *_p_mopo__BilinearInterpolateTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::BilinearInterpolate *) x));
}
static void *_p_mopo__InterpolateTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::Interpolate *) x));
}
static void *_p_mopo__SubtractTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::Subtract *) x));
}
static void *_p_mopo__cr__BypassTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::Bypass *) x));
}
static void *_p_mopo__BypassTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::Bypass *) x));
}
static void *_p_mopo__cr__ExponentialScaleTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::ExponentialScale *) x));
}
static void *_p_mopo__ExponentialScaleTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::ExponentialScale *) x));
}
static void *_p_mopo__InverseTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::Inverse *) x));
}
static void *_p_mopo__TimeToSamplesTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::TimeToSamples *) x));
}
static void *_p_mopo__FrequencyToSamplesTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::FrequencyToSamples *) x));
}
static void *_p_mopo__cr__FrequencyToSamplesTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::FrequencyToSamples *) x));
}
static void *_p_mopo__cr__TimeToSamplesTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::TimeToSamples *) x));
}
static void *_p_mopo__ResonanceScaleTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::ResonanceScale *) x));
}
static void *_p_mopo__cr__ResonanceScaleTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::cr::ResonanceScale *) x));
}
static void *_p_mopo__LinearScaleTo_p_mopo__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Operator *)  ((mopo::LinearScale *) x));
}
static void *_p_mopo__FormantManagerTo_p_mopo__ProcessorRouter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::ProcessorRouter *)  ((mopo::FormantManager *) x));
}
static void *_p_mopo__VoiceHandlerTo_p_mopo__ProcessorRouter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::ProcessorRouter *)  ((mopo::VoiceHandler *) x));
}
static void *_p_mopo__BypassRouterTo_p_mopo__ProcessorRouter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::ProcessorRouter *)  ((mopo::BypassRouter *) x));
}
static void *_p_mopo__TickRouterTo_p_mopo__ProcessorRouter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::ProcessorRouter *)  ((mopo::TickRouter *) x));
}
static void *_p_mopo__ReverbTo_p_mopo__ProcessorRouter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::ProcessorRouter *)  ((mopo::Reverb *) x));
}
static void *_p_mopo__cr__FeedbackTo_p_mopo__Feedback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Feedback *)  ((mopo::cr::Feedback *) x));
}
static void *_p_mopo__VoiceHandlerTo_p_mopo__NoteHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::NoteHandler *)  ((mopo::VoiceHandler *) x));
}
static void *_p_mopo__ArpeggiatorTo_p_mopo__NoteHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::NoteHandler *)  ((mopo::Arpeggiator *) x));
}
static void *_p_mopo__cr__OutputTo_p_mopo__Output(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Output *)  ((mopo::cr::Output *) x));
}
static void *_p_mopo__StepGeneratorTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::StepGenerator *) x));
}
static void *_p_mopo__OperatorTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::Operator *) x));
}
static void *_p_mopo__ProcessorRouterTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::ProcessorRouter *) x));
}
static void *_p_mopo__cr__AddTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::Add *) x));
}
static void *_p_mopo__cr__QuadraticTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::Quadratic *) x));
}
static void *_p_mopo__LinearScaleTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::LinearScale *) x));
}
static void *_p_mopo__TriggerCombinerTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::TriggerCombiner *) x));
}
static void *_p_mopo__LinearSmoothBufferTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::LinearSmoothBuffer *) x));
}
static void *_p_mopo__SampleAndHoldBufferTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::SampleAndHoldBuffer *) x));
}
static void *_p_mopo__cr__VariableAddTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::VariableAdd *) x));
}
static void *_p_mopo__VariableAddTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::VariableAdd *) x));
}
static void *_p_mopo__DelayTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::Delay *) x));
}
static void *_p_mopo__OscillatorTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::Oscillator *) x));
}
static void *_p_mopo__ReverbAllPassTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::ReverbAllPass *) x));
}
static void *_p_mopo__StateVariableFilterTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::StateVariableFilter *) x));
}
static void *_p_mopo__LegatoFilterTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::LegatoFilter *) x));
}
static void *_p_mopo__PortamentoFilterTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::PortamentoFilter *) x));
}
static void *_p_mopo__cr__TimeToSamplesTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::TimeToSamples *) x));
}
static void *_p_mopo__cr__FrequencyToSamplesTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::FrequencyToSamples *) x));
}
static void *_p_mopo__TimeToSamplesTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::TimeToSamples *) x));
}
static void *_p_mopo__FrequencyToSamplesTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::FrequencyToSamples *) x));
}
static void *_p_mopo__StutterTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::Stutter *) x));
}
static void *_p_mopo__cr__ExponentialScaleTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::ExponentialScale *) x));
}
static void *_p_mopo__ExponentialScaleTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::ExponentialScale *) x));
}
static void *_p_mopo__cr__FrequencyToPhaseTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::FrequencyToPhase *) x));
}
static void *_p_mopo__FrequencyToPhaseTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::FrequencyToPhase *) x));
}
static void *_p_mopo__TriggerNonZeroTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::TriggerNonZero *) x));
}
static void *_p_mopo__LinearSlopeTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::LinearSlope *) x));
}
static void *_p_mopo__InverseTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::Inverse *) x));
}
static void *_p_mopo__cr__FeedbackTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Feedback *) ((mopo::cr::Feedback *) x));
}
static void *_p_mopo__FeedbackTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::Feedback *) x));
}
static void *_p_mopo__ReverbTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::ProcessorRouter *) ((mopo::Reverb *) x));
}
static void *_p_mopo__cr__SmoothValueTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Value *)(mopo::cr::Value *) ((mopo::cr::SmoothValue *) x));
}
static void *_p_mopo__SmoothValueTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Value *) ((mopo::SmoothValue *) x));
}
static void *_p_mopo__cr__BypassTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::Bypass *) x));
}
static void *_p_mopo__BypassTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::Bypass *) x));
}
static void *_p_mopo__AliasTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::Alias *) x));
}
static void *_p_mopo__cr__MagnitudeScaleTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::MagnitudeScale *) x));
}
static void *_p_mopo__MagnitudeScaleTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::MagnitudeScale *) x));
}
static void *_p_mopo__cr__MultiplyTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::Multiply *) x));
}
static void *_p_mopo__MultiplyTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::Multiply *) x));
}
static void *_p_mopo__TriggerEqualsTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::TriggerEquals *) x));
}
static void *_p_mopo__BitCrushTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::BitCrush *) x));
}
static void *_p_mopo__TriggerFilterTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::TriggerFilter *) x));
}
static void *_p_mopo__cr__SmoothFilterTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::cr::SmoothFilter *) x));
}
static void *_p_mopo__SmoothFilterTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::SmoothFilter *) x));
}
static void *_p_mopo__BiquadFilterTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::BiquadFilter *) x));
}
static void *_p_mopo__ReverbCombTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::ReverbComb *) x));
}
static void *_p_mopo__MonoPannerTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::MonoPanner *) x));
}
static void *_p_mopo__EnvelopeTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::Envelope *) x));
}
static void *_p_mopo__VoiceHandlerTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::ProcessorRouter *) ((mopo::VoiceHandler *) x));
}
static void *_p_mopo__ArpeggiatorTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::Arpeggiator *) x));
}
static void *_p_mopo__SimpleDelayTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::SimpleDelay *) x));
}
static void *_p_mopo__cr__RootTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::Root *) x));
}
static void *_p_mopo__cr__UpperBoundTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::UpperBound *) x));
}
static void *_p_mopo__cr__LowerBoundTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::LowerBound *) x));
}
static void *_p_mopo__TickRouterTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::ProcessorRouter *) ((mopo::TickRouter *) x));
}
static void *_p_mopo__BypassRouterTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::ProcessorRouter *) ((mopo::BypassRouter *) x));
}
static void *_p_mopo__cr__ResonanceScaleTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::ResonanceScale *) x));
}
static void *_p_mopo__ResonanceScaleTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::ResonanceScale *) x));
}
static void *_p_mopo__cr__ClampTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::Clamp *) x));
}
static void *_p_mopo__ClampTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::Clamp *) x));
}
static void *_p_mopo__cr__SquareTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::Square *) x));
}
static void *_p_mopo__SquareTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::Square *) x));
}
static void *_p_mopo__DistortionTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::Distortion *) x));
}
static void *_p_mopo__FormantManagerTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::ProcessorRouter *) ((mopo::FormantManager *) x));
}
static void *_p_mopo__AddTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::Add *) x));
}
static void *_p_mopo__TriggerWaitTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::TriggerWait *) x));
}
static void *_p_mopo__SubtractTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::Subtract *) x));
}
static void *_p_mopo__cr__ValueTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Value *) ((mopo::cr::Value *) x));
}
static void *_p_mopo__ValueTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::Value *) x));
}
static void *_p_mopo__cr__MidiScaleTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::MidiScale *) x));
}
static void *_p_mopo__MidiScaleTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::MidiScale *) x));
}
static void *_p_mopo__NegateTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::Negate *) x));
}
static void *_p_mopo__cr__InterpolateTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::cr::Interpolate *) x));
}
static void *_p_mopo__InterpolateTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::Interpolate *) x));
}
static void *_p_mopo__BilinearInterpolateTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *) (mopo::Operator *) ((mopo::BilinearInterpolate *) x));
}
static void *_p_mopo__PortamentoSlopeTo_p_mopo__Processor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Processor *)  ((mopo::PortamentoSlope *) x));
}
static void *_p_mopo__cr__SmoothValueTo_p_mopo__cr__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::cr::Value *)  ((mopo::cr::SmoothValue *) x));
}
static void *_p_mopo__SmoothValueTo_p_mopo__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Value *)  ((mopo::SmoothValue *) x));
}
static void *_p_mopo__cr__SmoothValueTo_p_mopo__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Value *) (mopo::cr::Value *) ((mopo::cr::SmoothValue *) x));
}
static void *_p_mopo__cr__ValueTo_p_mopo__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mopo::Value *)  ((mopo::cr::Value *) x));
}
static swig_type_info _swigt__p_CircularQueueT_mopo_float_t = {"_p_CircularQueueT_mopo_float_t", "CircularQueue< mopo_float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VoiceEvent = {"_p_VoiceEvent", "VoiceEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "mopo::mopo_float *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mopo__Add = {"_p_mopo__Add", "mopo::Add *", 0, 0, (void*)&_wrap_class_Add, 0};
static swig_type_info _swigt__p_mopo__Alias = {"_p_mopo__Alias", "mopo::Alias *", 0, 0, (void*)&_wrap_class_Alias, 0};
static swig_type_info _swigt__p_mopo__Arpeggiator = {"_p_mopo__Arpeggiator", "mopo::Arpeggiator *", 0, 0, (void*)&_wrap_class_Arpeggiator, 0};
static swig_type_info _swigt__p_mopo__BilinearInterpolate = {"_p_mopo__BilinearInterpolate", "mopo::BilinearInterpolate *", 0, 0, (void*)&_wrap_class_BilinearInterpolate, 0};
static swig_type_info _swigt__p_mopo__BiquadFilter = {"_p_mopo__BiquadFilter", "mopo::BiquadFilter *", 0, 0, (void*)&_wrap_class_BiquadFilter, 0};
static swig_type_info _swigt__p_mopo__BitCrush = {"_p_mopo__BitCrush", "mopo::BitCrush *", 0, 0, (void*)&_wrap_class_BitCrush, 0};
static swig_type_info _swigt__p_mopo__Bypass = {"_p_mopo__Bypass", "mopo::Bypass *", 0, 0, (void*)&_wrap_class_Bypass, 0};
static swig_type_info _swigt__p_mopo__BypassRouter = {"_p_mopo__BypassRouter", "mopo::BypassRouter *", 0, 0, (void*)&_wrap_class_BypassRouter, 0};
static swig_type_info _swigt__p_mopo__CircularQueueT_double_t = {"_p_mopo__CircularQueueT_double_t", "mopo::CircularQueue< mopo::mopo_float > *|mopo::CircularQueue< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mopo__Clamp = {"_p_mopo__Clamp", "mopo::Clamp *", 0, 0, (void*)&_wrap_class_Clamp, 0};
static swig_type_info _swigt__p_mopo__Delay = {"_p_mopo__Delay", "mopo::Delay *", 0, 0, (void*)&_wrap_class_Delay, 0};
static swig_type_info _swigt__p_mopo__Distortion = {"_p_mopo__Distortion", "mopo::Distortion *", 0, 0, (void*)&_wrap_class_Distortion, 0};
static swig_type_info _swigt__p_mopo__Envelope = {"_p_mopo__Envelope", "mopo::Envelope *", 0, 0, (void*)&_wrap_class_Envelope, 0};
static swig_type_info _swigt__p_mopo__ExponentialScale = {"_p_mopo__ExponentialScale", "mopo::ExponentialScale *", 0, 0, (void*)&_wrap_class_ExponentialScale, 0};
static swig_type_info _swigt__p_mopo__Feedback = {"_p_mopo__Feedback", "mopo::Feedback *", 0, 0, (void*)&_wrap_class_Feedback, 0};
static swig_type_info _swigt__p_mopo__cr__Feedback = {"_p_mopo__cr__Feedback", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__FormantManager = {"_p_mopo__FormantManager", "mopo::FormantManager *", 0, 0, (void*)&_wrap_class_FormantManager, 0};
static swig_type_info _swigt__p_mopo__FrequencyToPhase = {"_p_mopo__FrequencyToPhase", "mopo::FrequencyToPhase *", 0, 0, (void*)&_wrap_class_FrequencyToPhase, 0};
static swig_type_info _swigt__p_mopo__FrequencyToSamples = {"_p_mopo__FrequencyToSamples", "mopo::FrequencyToSamples *", 0, 0, (void*)&_wrap_class_FrequencyToSamples, 0};
static swig_type_info _swigt__p_mopo__Input = {"_p_mopo__Input", "mopo::Input *", 0, 0, (void*)&_wrap_class_Input, 0};
static swig_type_info _swigt__p_mopo__Interpolate = {"_p_mopo__Interpolate", "mopo::Interpolate *", 0, 0, (void*)&_wrap_class_Interpolate, 0};
static swig_type_info _swigt__p_mopo__Inverse = {"_p_mopo__Inverse", "mopo::Inverse *", 0, 0, (void*)&_wrap_class_Inverse, 0};
static swig_type_info _swigt__p_mopo__LegatoFilter = {"_p_mopo__LegatoFilter", "mopo::LegatoFilter *", 0, 0, (void*)&_wrap_class_LegatoFilter, 0};
static swig_type_info _swigt__p_mopo__LinearScale = {"_p_mopo__LinearScale", "mopo::LinearScale *", 0, 0, (void*)&_wrap_class_LinearScale, 0};
static swig_type_info _swigt__p_mopo__LinearSlope = {"_p_mopo__LinearSlope", "mopo::LinearSlope *", 0, 0, (void*)&_wrap_class_LinearSlope, 0};
static swig_type_info _swigt__p_mopo__LinearSmoothBuffer = {"_p_mopo__LinearSmoothBuffer", "mopo::LinearSmoothBuffer *", 0, 0, (void*)&_wrap_class_LinearSmoothBuffer, 0};
static swig_type_info _swigt__p_mopo__MagnitudeLookup = {"_p_mopo__MagnitudeLookup", "mopo::MagnitudeLookup *", 0, 0, (void*)&_wrap_class_MagnitudeLookup, 0};
static swig_type_info _swigt__p_mopo__MagnitudeLookupSingleton = {"_p_mopo__MagnitudeLookupSingleton", "mopo::MagnitudeLookupSingleton *", 0, 0, (void*)&_wrap_class_MagnitudeLookupSingleton, 0};
static swig_type_info _swigt__p_mopo__MagnitudeScale = {"_p_mopo__MagnitudeScale", "mopo::MagnitudeScale *", 0, 0, (void*)&_wrap_class_MagnitudeScale, 0};
static swig_type_info _swigt__p_mopo__Memory = {"_p_mopo__Memory", "mopo::Memory *", 0, 0, (void*)&_wrap_class_Memory, 0};
static swig_type_info _swigt__p_mopo__MidiLookup = {"_p_mopo__MidiLookup", "mopo::MidiLookup *", 0, 0, (void*)&_wrap_class_MidiLookup, 0};
static swig_type_info _swigt__p_mopo__MidiLookupSingleton = {"_p_mopo__MidiLookupSingleton", "mopo::MidiLookupSingleton *", 0, 0, (void*)&_wrap_class_MidiLookupSingleton, 0};
static swig_type_info _swigt__p_mopo__MidiScale = {"_p_mopo__MidiScale", "mopo::MidiScale *", 0, 0, (void*)&_wrap_class_MidiScale, 0};
static swig_type_info _swigt__p_mopo__MonoPanner = {"_p_mopo__MonoPanner", "mopo::MonoPanner *", 0, 0, (void*)&_wrap_class_MonoPanner, 0};
static swig_type_info _swigt__p_mopo__Multiply = {"_p_mopo__Multiply", "mopo::Multiply *", 0, 0, (void*)&_wrap_class_Multiply, 0};
static swig_type_info _swigt__p_mopo__Negate = {"_p_mopo__Negate", "mopo::Negate *", 0, 0, (void*)&_wrap_class_Negate, 0};
static swig_type_info _swigt__p_mopo__NoteHandler = {"_p_mopo__NoteHandler", "mopo::NoteHandler *", 0, 0, (void*)&_wrap_class_NoteHandler, 0};
static swig_type_info _swigt__p_mopo__Operator = {"_p_mopo__Operator", "mopo::Operator *", 0, 0, (void*)&_wrap_class_Operator, 0};
static swig_type_info _swigt__p_mopo__cr__Quadratic = {"_p_mopo__cr__Quadratic", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__Bypass = {"_p_mopo__cr__Bypass", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__FrequencyToPhase = {"_p_mopo__cr__FrequencyToPhase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__Clamp = {"_p_mopo__cr__Clamp", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__MagnitudeScale = {"_p_mopo__cr__MagnitudeScale", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__VariableAdd = {"_p_mopo__cr__VariableAdd", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__MidiScale = {"_p_mopo__cr__MidiScale", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__UpperBound = {"_p_mopo__cr__UpperBound", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__LowerBound = {"_p_mopo__cr__LowerBound", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__Multiply = {"_p_mopo__cr__Multiply", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__Root = {"_p_mopo__cr__Root", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__Add = {"_p_mopo__cr__Add", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__Interpolate = {"_p_mopo__cr__Interpolate", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__ExponentialScale = {"_p_mopo__cr__ExponentialScale", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__FrequencyToSamples = {"_p_mopo__cr__FrequencyToSamples", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__TimeToSamples = {"_p_mopo__cr__TimeToSamples", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__Square = {"_p_mopo__cr__Square", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__ResonanceScale = {"_p_mopo__cr__ResonanceScale", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__Oscillator = {"_p_mopo__Oscillator", "mopo::Oscillator *", 0, 0, (void*)&_wrap_class_Oscillator, 0};
static swig_type_info _swigt__p_mopo__Output = {"_p_mopo__Output", "mopo::Output *", 0, 0, (void*)&_wrap_class_Output, 0};
static swig_type_info _swigt__p_mopo__cr__Output = {"_p_mopo__cr__Output", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__PortamentoFilter = {"_p_mopo__PortamentoFilter", "mopo::PortamentoFilter *", 0, 0, (void*)&_wrap_class_PortamentoFilter, 0};
static swig_type_info _swigt__p_mopo__PortamentoSlope = {"_p_mopo__PortamentoSlope", "mopo::PortamentoSlope *", 0, 0, (void*)&_wrap_class_PortamentoSlope, 0};
static swig_type_info _swigt__p_mopo__Processor = {"_p_mopo__Processor", "mopo::Processor *", 0, 0, (void*)&_wrap_class_Processor, 0};
static swig_type_info _swigt__p_mopo__cr__SmoothValue = {"_p_mopo__cr__SmoothValue", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__cr__SmoothFilter = {"_p_mopo__cr__SmoothFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mopo__ProcessorRouter = {"_p_mopo__ProcessorRouter", "mopo::ProcessorRouter *", 0, 0, (void*)&_wrap_class_ProcessorRouter, 0};
static swig_type_info _swigt__p_mopo__ResonanceLookup = {"_p_mopo__ResonanceLookup", "mopo::ResonanceLookup *", 0, 0, (void*)&_wrap_class_ResonanceLookup, 0};
static swig_type_info _swigt__p_mopo__ResonanceLookupSingleton = {"_p_mopo__ResonanceLookupSingleton", "mopo::ResonanceLookupSingleton *", 0, 0, (void*)&_wrap_class_ResonanceLookupSingleton, 0};
static swig_type_info _swigt__p_mopo__ResonanceScale = {"_p_mopo__ResonanceScale", "mopo::ResonanceScale *", 0, 0, (void*)&_wrap_class_ResonanceScale, 0};
static swig_type_info _swigt__p_mopo__Reverb = {"_p_mopo__Reverb", "mopo::Reverb *", 0, 0, (void*)&_wrap_class_Reverb, 0};
static swig_type_info _swigt__p_mopo__ReverbAllPass = {"_p_mopo__ReverbAllPass", "mopo::ReverbAllPass *", 0, 0, (void*)&_wrap_class_ReverbAllPass, 0};
static swig_type_info _swigt__p_mopo__ReverbComb = {"_p_mopo__ReverbComb", "mopo::ReverbComb *", 0, 0, (void*)&_wrap_class_ReverbComb, 0};
static swig_type_info _swigt__p_mopo__SampleAndHoldBuffer = {"_p_mopo__SampleAndHoldBuffer", "mopo::SampleAndHoldBuffer *", 0, 0, (void*)&_wrap_class_SampleAndHoldBuffer, 0};
static swig_type_info _swigt__p_mopo__SimpleDelay = {"_p_mopo__SimpleDelay", "mopo::SimpleDelay *", 0, 0, (void*)&_wrap_class_SimpleDelay, 0};
static swig_type_info _swigt__p_mopo__SmoothFilter = {"_p_mopo__SmoothFilter", "mopo::SmoothFilter *", 0, 0, (void*)&_wrap_class_SmoothFilter, 0};
static swig_type_info _swigt__p_mopo__SmoothValue = {"_p_mopo__SmoothValue", "mopo::SmoothValue *", 0, 0, (void*)&_wrap_class_SmoothValue, 0};
static swig_type_info _swigt__p_mopo__Square = {"_p_mopo__Square", "mopo::Square *", 0, 0, (void*)&_wrap_class_Square, 0};
static swig_type_info _swigt__p_mopo__StateVariableFilter = {"_p_mopo__StateVariableFilter", "mopo::StateVariableFilter *", 0, 0, (void*)&_wrap_class_StateVariableFilter, 0};
static swig_type_info _swigt__p_mopo__StepGenerator = {"_p_mopo__StepGenerator", "mopo::StepGenerator *", 0, 0, (void*)&_wrap_class_StepGenerator, 0};
static swig_type_info _swigt__p_mopo__Stutter = {"_p_mopo__Stutter", "mopo::Stutter *", 0, 0, (void*)&_wrap_class_Stutter, 0};
static swig_type_info _swigt__p_mopo__Subtract = {"_p_mopo__Subtract", "mopo::Subtract *", 0, 0, (void*)&_wrap_class_Subtract, 0};
static swig_type_info _swigt__p_mopo__TickRouter = {"_p_mopo__TickRouter", "mopo::TickRouter *", 0, 0, (void*)&_wrap_class_TickRouter, 0};
static swig_type_info _swigt__p_mopo__TimeToSamples = {"_p_mopo__TimeToSamples", "mopo::TimeToSamples *", 0, 0, (void*)&_wrap_class_TimeToSamples, 0};
static swig_type_info _swigt__p_mopo__TriggerCombiner = {"_p_mopo__TriggerCombiner", "mopo::TriggerCombiner *", 0, 0, (void*)&_wrap_class_TriggerCombiner, 0};
static swig_type_info _swigt__p_mopo__TriggerEquals = {"_p_mopo__TriggerEquals", "mopo::TriggerEquals *", 0, 0, (void*)&_wrap_class_TriggerEquals, 0};
static swig_type_info _swigt__p_mopo__TriggerFilter = {"_p_mopo__TriggerFilter", "mopo::TriggerFilter *", 0, 0, (void*)&_wrap_class_TriggerFilter, 0};
static swig_type_info _swigt__p_mopo__TriggerNonZero = {"_p_mopo__TriggerNonZero", "mopo::TriggerNonZero *", 0, 0, (void*)&_wrap_class_TriggerNonZero, 0};
static swig_type_info _swigt__p_mopo__TriggerWait = {"_p_mopo__TriggerWait", "mopo::TriggerWait *", 0, 0, (void*)&_wrap_class_TriggerWait, 0};
static swig_type_info _swigt__p_mopo__Value = {"_p_mopo__Value", "mopo::Value *", 0, 0, (void*)&_wrap_class_Value, 0};
static swig_type_info _swigt__p_mopo__VariableAdd = {"_p_mopo__VariableAdd", "mopo::VariableAdd *", 0, 0, (void*)&_wrap_class_VariableAdd, 0};
static swig_type_info _swigt__p_mopo__Voice = {"_p_mopo__Voice", "mopo::Voice *", 0, 0, (void*)&_wrap_class_Voice, 0};
static swig_type_info _swigt__p_mopo__VoiceHandler = {"_p_mopo__VoiceHandler", "mopo::VoiceHandler *", 0, 0, (void*)&_wrap_class_VoiceHandler, 0};
static swig_type_info _swigt__p_mopo__VoiceState = {"_p_mopo__VoiceState", "mopo::VoiceState *", 0, 0, (void*)&_wrap_class_VoiceState, 0};
static swig_type_info _swigt__p_mopo__Wave = {"_p_mopo__Wave", "mopo::Wave *", 0, 0, (void*)&_wrap_class_Wave, 0};
static swig_type_info _swigt__p_mopo__WaveLookup = {"_p_mopo__WaveLookup", "mopo::WaveLookup *", 0, 0, (void*)&_wrap_class_WaveLookup, 0};
static swig_type_info _swigt__p_mopo__cr__Value = {"_p_mopo__cr__Value", "mopo::cr::Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mopo_float = {"_p_mopo_float", "mopo_float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< mopo::mopo_float > *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_mopo_float_t = {"_p_std__complexT_mopo_float_t", "std::complex< mopo_float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_mopo_float_mopo_float_t = {"_p_std__pairT_mopo_float_mopo_float_t", "std::pair< mopo_float,mopo_float > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CircularQueueT_mopo_float_t,
  &_swigt__p_VoiceEvent,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_mopo__Add,
  &_swigt__p_mopo__Alias,
  &_swigt__p_mopo__Arpeggiator,
  &_swigt__p_mopo__BilinearInterpolate,
  &_swigt__p_mopo__BiquadFilter,
  &_swigt__p_mopo__BitCrush,
  &_swigt__p_mopo__Bypass,
  &_swigt__p_mopo__BypassRouter,
  &_swigt__p_mopo__CircularQueueT_double_t,
  &_swigt__p_mopo__Clamp,
  &_swigt__p_mopo__Delay,
  &_swigt__p_mopo__Distortion,
  &_swigt__p_mopo__Envelope,
  &_swigt__p_mopo__ExponentialScale,
  &_swigt__p_mopo__Feedback,
  &_swigt__p_mopo__FormantManager,
  &_swigt__p_mopo__FrequencyToPhase,
  &_swigt__p_mopo__FrequencyToSamples,
  &_swigt__p_mopo__Input,
  &_swigt__p_mopo__Interpolate,
  &_swigt__p_mopo__Inverse,
  &_swigt__p_mopo__LegatoFilter,
  &_swigt__p_mopo__LinearScale,
  &_swigt__p_mopo__LinearSlope,
  &_swigt__p_mopo__LinearSmoothBuffer,
  &_swigt__p_mopo__MagnitudeLookup,
  &_swigt__p_mopo__MagnitudeLookupSingleton,
  &_swigt__p_mopo__MagnitudeScale,
  &_swigt__p_mopo__Memory,
  &_swigt__p_mopo__MidiLookup,
  &_swigt__p_mopo__MidiLookupSingleton,
  &_swigt__p_mopo__MidiScale,
  &_swigt__p_mopo__MonoPanner,
  &_swigt__p_mopo__Multiply,
  &_swigt__p_mopo__Negate,
  &_swigt__p_mopo__NoteHandler,
  &_swigt__p_mopo__Operator,
  &_swigt__p_mopo__Oscillator,
  &_swigt__p_mopo__Output,
  &_swigt__p_mopo__PortamentoFilter,
  &_swigt__p_mopo__PortamentoSlope,
  &_swigt__p_mopo__Processor,
  &_swigt__p_mopo__ProcessorRouter,
  &_swigt__p_mopo__ResonanceLookup,
  &_swigt__p_mopo__ResonanceLookupSingleton,
  &_swigt__p_mopo__ResonanceScale,
  &_swigt__p_mopo__Reverb,
  &_swigt__p_mopo__ReverbAllPass,
  &_swigt__p_mopo__ReverbComb,
  &_swigt__p_mopo__SampleAndHoldBuffer,
  &_swigt__p_mopo__SimpleDelay,
  &_swigt__p_mopo__SmoothFilter,
  &_swigt__p_mopo__SmoothValue,
  &_swigt__p_mopo__Square,
  &_swigt__p_mopo__StateVariableFilter,
  &_swigt__p_mopo__StepGenerator,
  &_swigt__p_mopo__Stutter,
  &_swigt__p_mopo__Subtract,
  &_swigt__p_mopo__TickRouter,
  &_swigt__p_mopo__TimeToSamples,
  &_swigt__p_mopo__TriggerCombiner,
  &_swigt__p_mopo__TriggerEquals,
  &_swigt__p_mopo__TriggerFilter,
  &_swigt__p_mopo__TriggerNonZero,
  &_swigt__p_mopo__TriggerWait,
  &_swigt__p_mopo__Value,
  &_swigt__p_mopo__VariableAdd,
  &_swigt__p_mopo__Voice,
  &_swigt__p_mopo__VoiceHandler,
  &_swigt__p_mopo__VoiceState,
  &_swigt__p_mopo__Wave,
  &_swigt__p_mopo__WaveLookup,
  &_swigt__p_mopo__cr__Add,
  &_swigt__p_mopo__cr__Bypass,
  &_swigt__p_mopo__cr__Clamp,
  &_swigt__p_mopo__cr__ExponentialScale,
  &_swigt__p_mopo__cr__Feedback,
  &_swigt__p_mopo__cr__FrequencyToPhase,
  &_swigt__p_mopo__cr__FrequencyToSamples,
  &_swigt__p_mopo__cr__Interpolate,
  &_swigt__p_mopo__cr__LowerBound,
  &_swigt__p_mopo__cr__MagnitudeScale,
  &_swigt__p_mopo__cr__MidiScale,
  &_swigt__p_mopo__cr__Multiply,
  &_swigt__p_mopo__cr__Output,
  &_swigt__p_mopo__cr__Quadratic,
  &_swigt__p_mopo__cr__ResonanceScale,
  &_swigt__p_mopo__cr__Root,
  &_swigt__p_mopo__cr__SmoothFilter,
  &_swigt__p_mopo__cr__SmoothValue,
  &_swigt__p_mopo__cr__Square,
  &_swigt__p_mopo__cr__TimeToSamples,
  &_swigt__p_mopo__cr__UpperBound,
  &_swigt__p_mopo__cr__Value,
  &_swigt__p_mopo__cr__VariableAdd,
  &_swigt__p_mopo_float,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_mopo_float_t,
  &_swigt__p_std__pairT_mopo_float_mopo_float_t,
};

static swig_cast_info _swigc__p_CircularQueueT_mopo_float_t[] = {  {&_swigt__p_CircularQueueT_mopo_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VoiceEvent[] = {  {&_swigt__p_VoiceEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Add[] = {  {&_swigt__p_mopo__Add, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Alias[] = {  {&_swigt__p_mopo__Alias, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Arpeggiator[] = {  {&_swigt__p_mopo__Arpeggiator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__BilinearInterpolate[] = {  {&_swigt__p_mopo__BilinearInterpolate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__BiquadFilter[] = {  {&_swigt__p_mopo__BiquadFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__BitCrush[] = {  {&_swigt__p_mopo__BitCrush, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Bypass[] = {  {&_swigt__p_mopo__Bypass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__BypassRouter[] = {  {&_swigt__p_mopo__BypassRouter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__CircularQueueT_double_t[] = {  {&_swigt__p_mopo__CircularQueueT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Clamp[] = {  {&_swigt__p_mopo__Clamp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Delay[] = {  {&_swigt__p_mopo__Delay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Distortion[] = {  {&_swigt__p_mopo__Distortion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Envelope[] = {  {&_swigt__p_mopo__Envelope, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__ExponentialScale[] = {  {&_swigt__p_mopo__ExponentialScale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__Feedback[] = {{&_swigt__p_mopo__cr__Feedback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Feedback[] = {  {&_swigt__p_mopo__Feedback, 0, 0, 0},  {&_swigt__p_mopo__cr__Feedback, _p_mopo__cr__FeedbackTo_p_mopo__Feedback, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__FormantManager[] = {  {&_swigt__p_mopo__FormantManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__FrequencyToPhase[] = {  {&_swigt__p_mopo__FrequencyToPhase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__FrequencyToSamples[] = {  {&_swigt__p_mopo__FrequencyToSamples, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Input[] = {  {&_swigt__p_mopo__Input, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Interpolate[] = {  {&_swigt__p_mopo__Interpolate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Inverse[] = {  {&_swigt__p_mopo__Inverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__LegatoFilter[] = {  {&_swigt__p_mopo__LegatoFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__LinearScale[] = {  {&_swigt__p_mopo__LinearScale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__LinearSlope[] = {  {&_swigt__p_mopo__LinearSlope, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__LinearSmoothBuffer[] = {  {&_swigt__p_mopo__LinearSmoothBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__MagnitudeLookup[] = {  {&_swigt__p_mopo__MagnitudeLookup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__MagnitudeLookupSingleton[] = {  {&_swigt__p_mopo__MagnitudeLookupSingleton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__MagnitudeScale[] = {  {&_swigt__p_mopo__MagnitudeScale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Memory[] = {  {&_swigt__p_mopo__Memory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__MidiLookup[] = {  {&_swigt__p_mopo__MidiLookup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__MidiLookupSingleton[] = {  {&_swigt__p_mopo__MidiLookupSingleton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__MidiScale[] = {  {&_swigt__p_mopo__MidiScale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__MonoPanner[] = {  {&_swigt__p_mopo__MonoPanner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Multiply[] = {  {&_swigt__p_mopo__Multiply, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Negate[] = {  {&_swigt__p_mopo__Negate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__NoteHandler[] = {  {&_swigt__p_mopo__NoteHandler, 0, 0, 0},  {&_swigt__p_mopo__VoiceHandler, _p_mopo__VoiceHandlerTo_p_mopo__NoteHandler, 0, 0},  {&_swigt__p_mopo__Arpeggiator, _p_mopo__ArpeggiatorTo_p_mopo__NoteHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__Quadratic[] = {{&_swigt__p_mopo__cr__Quadratic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__Bypass[] = {{&_swigt__p_mopo__cr__Bypass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__FrequencyToPhase[] = {{&_swigt__p_mopo__cr__FrequencyToPhase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__Clamp[] = {{&_swigt__p_mopo__cr__Clamp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__MagnitudeScale[] = {{&_swigt__p_mopo__cr__MagnitudeScale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__VariableAdd[] = {{&_swigt__p_mopo__cr__VariableAdd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__MidiScale[] = {{&_swigt__p_mopo__cr__MidiScale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__UpperBound[] = {{&_swigt__p_mopo__cr__UpperBound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__LowerBound[] = {{&_swigt__p_mopo__cr__LowerBound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__Multiply[] = {{&_swigt__p_mopo__cr__Multiply, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__Root[] = {{&_swigt__p_mopo__cr__Root, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__Add[] = {{&_swigt__p_mopo__cr__Add, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__Interpolate[] = {{&_swigt__p_mopo__cr__Interpolate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__ExponentialScale[] = {{&_swigt__p_mopo__cr__ExponentialScale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__FrequencyToSamples[] = {{&_swigt__p_mopo__cr__FrequencyToSamples, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__TimeToSamples[] = {{&_swigt__p_mopo__cr__TimeToSamples, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__Square[] = {{&_swigt__p_mopo__cr__Square, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__ResonanceScale[] = {{&_swigt__p_mopo__cr__ResonanceScale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Operator[] = {  {&_swigt__p_mopo__cr__Quadratic, _p_mopo__cr__QuadraticTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__Bypass, _p_mopo__BypassTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__Bypass, _p_mopo__cr__BypassTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__FrequencyToPhase, _p_mopo__cr__FrequencyToPhaseTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__FrequencyToPhase, _p_mopo__FrequencyToPhaseTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__Clamp, _p_mopo__cr__ClampTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__Clamp, _p_mopo__ClampTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__LinearSmoothBuffer, _p_mopo__LinearSmoothBufferTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__SampleAndHoldBuffer, _p_mopo__SampleAndHoldBufferTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__MagnitudeScale, _p_mopo__MagnitudeScaleTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__MagnitudeScale, _p_mopo__cr__MagnitudeScaleTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__VariableAdd, _p_mopo__cr__VariableAddTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__VariableAdd, _p_mopo__VariableAddTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__Add, _p_mopo__AddTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__MidiScale, _p_mopo__MidiScaleTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__MidiScale, _p_mopo__cr__MidiScaleTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__Operator, 0, 0, 0},  {&_swigt__p_mopo__cr__UpperBound, _p_mopo__cr__UpperBoundTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__LowerBound, _p_mopo__cr__LowerBoundTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__Multiply, _p_mopo__cr__MultiplyTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__Multiply, _p_mopo__MultiplyTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__Negate, _p_mopo__NegateTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__Root, _p_mopo__cr__RootTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__Add, _p_mopo__cr__AddTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__Interpolate, _p_mopo__cr__InterpolateTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__BilinearInterpolate, _p_mopo__BilinearInterpolateTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__Interpolate, _p_mopo__InterpolateTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__Subtract, _p_mopo__SubtractTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__ExponentialScale, _p_mopo__cr__ExponentialScaleTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__ExponentialScale, _p_mopo__ExponentialScaleTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__Inverse, _p_mopo__InverseTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__FrequencyToSamples, _p_mopo__cr__FrequencyToSamplesTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__FrequencyToSamples, _p_mopo__FrequencyToSamplesTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__TimeToSamples, _p_mopo__TimeToSamplesTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__TimeToSamples, _p_mopo__cr__TimeToSamplesTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__Square, _p_mopo__SquareTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__Square, _p_mopo__cr__SquareTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__ResonanceScale, _p_mopo__ResonanceScaleTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__cr__ResonanceScale, _p_mopo__cr__ResonanceScaleTo_p_mopo__Operator, 0, 0},  {&_swigt__p_mopo__LinearScale, _p_mopo__LinearScaleTo_p_mopo__Operator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Oscillator[] = {  {&_swigt__p_mopo__Oscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__Output[] = {{&_swigt__p_mopo__cr__Output, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Output[] = {  {&_swigt__p_mopo__Output, 0, 0, 0},  {&_swigt__p_mopo__cr__Output, _p_mopo__cr__OutputTo_p_mopo__Output, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__PortamentoFilter[] = {  {&_swigt__p_mopo__PortamentoFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__PortamentoSlope[] = {  {&_swigt__p_mopo__PortamentoSlope, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__SmoothValue[] = {{&_swigt__p_mopo__cr__SmoothValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__SmoothFilter[] = {{&_swigt__p_mopo__cr__SmoothFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Processor[] = {  {&_swigt__p_mopo__StepGenerator, _p_mopo__StepGeneratorTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Operator, _p_mopo__OperatorTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Add, _p_mopo__AddTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__ProcessorRouter, _p_mopo__ProcessorRouterTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__Quadratic, _p_mopo__cr__QuadraticTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Delay, _p_mopo__DelayTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__LinearScale, _p_mopo__LinearScaleTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__TriggerCombiner, _p_mopo__TriggerCombinerTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__SampleAndHoldBuffer, _p_mopo__SampleAndHoldBufferTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__LinearSmoothBuffer, _p_mopo__LinearSmoothBufferTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__VariableAdd, _p_mopo__cr__VariableAddTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__VariableAdd, _p_mopo__VariableAddTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Oscillator, _p_mopo__OscillatorTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__ReverbAllPass, _p_mopo__ReverbAllPassTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__PortamentoFilter, _p_mopo__PortamentoFilterTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__LegatoFilter, _p_mopo__LegatoFilterTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__StateVariableFilter, _p_mopo__StateVariableFilterTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__TimeToSamples, _p_mopo__cr__TimeToSamplesTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__FrequencyToSamples, _p_mopo__cr__FrequencyToSamplesTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__TimeToSamples, _p_mopo__TimeToSamplesTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__FrequencyToSamples, _p_mopo__FrequencyToSamplesTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Stutter, _p_mopo__StutterTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__ExponentialScale, _p_mopo__ExponentialScaleTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__ExponentialScale, _p_mopo__cr__ExponentialScaleTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__TriggerNonZero, _p_mopo__TriggerNonZeroTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__FrequencyToPhase, _p_mopo__FrequencyToPhaseTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__FrequencyToPhase, _p_mopo__cr__FrequencyToPhaseTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__LinearSlope, _p_mopo__LinearSlopeTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Inverse, _p_mopo__InverseTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Alias, _p_mopo__AliasTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Feedback, _p_mopo__FeedbackTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__Feedback, _p_mopo__cr__FeedbackTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__Add, _p_mopo__cr__AddTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__SmoothValue, _p_mopo__cr__SmoothValueTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__SmoothValue, _p_mopo__SmoothValueTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__MagnitudeScale, _p_mopo__cr__MagnitudeScaleTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__MagnitudeScale, _p_mopo__MagnitudeScaleTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__Square, _p_mopo__cr__SquareTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Square, _p_mopo__SquareTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Multiply, _p_mopo__MultiplyTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__Multiply, _p_mopo__cr__MultiplyTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__Root, _p_mopo__cr__RootTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__TriggerEquals, _p_mopo__TriggerEqualsTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__BitCrush, _p_mopo__BitCrushTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__TriggerFilter, _p_mopo__TriggerFilterTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__SmoothFilter, _p_mopo__cr__SmoothFilterTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__SmoothFilter, _p_mopo__SmoothFilterTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__BiquadFilter, _p_mopo__BiquadFilterTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__ReverbComb, _p_mopo__ReverbCombTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__MonoPanner, _p_mopo__MonoPannerTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Envelope, _p_mopo__EnvelopeTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__VoiceHandler, _p_mopo__VoiceHandlerTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Arpeggiator, _p_mopo__ArpeggiatorTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__SimpleDelay, _p_mopo__SimpleDelayTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Negate, _p_mopo__NegateTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__LowerBound, _p_mopo__cr__LowerBoundTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__UpperBound, _p_mopo__cr__UpperBoundTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Clamp, _p_mopo__ClampTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__Clamp, _p_mopo__cr__ClampTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__TickRouter, _p_mopo__TickRouterTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__BypassRouter, _p_mopo__BypassRouterTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__ResonanceScale, _p_mopo__cr__ResonanceScaleTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__ResonanceScale, _p_mopo__ResonanceScaleTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Processor, 0, 0, 0},  {&_swigt__p_mopo__Distortion, _p_mopo__DistortionTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__FormantManager, _p_mopo__FormantManagerTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__TriggerWait, _p_mopo__TriggerWaitTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Value, _p_mopo__ValueTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__Value, _p_mopo__cr__ValueTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Subtract, _p_mopo__SubtractTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__MidiScale, _p_mopo__cr__MidiScaleTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__MidiScale, _p_mopo__MidiScaleTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Reverb, _p_mopo__ReverbTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Interpolate, _p_mopo__InterpolateTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__BilinearInterpolate, _p_mopo__BilinearInterpolateTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__Interpolate, _p_mopo__cr__InterpolateTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__cr__Bypass, _p_mopo__cr__BypassTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__Bypass, _p_mopo__BypassTo_p_mopo__Processor, 0, 0},  {&_swigt__p_mopo__PortamentoSlope, _p_mopo__PortamentoSlopeTo_p_mopo__Processor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__ProcessorRouter[] = {  {&_swigt__p_mopo__ProcessorRouter, 0, 0, 0},  {&_swigt__p_mopo__FormantManager, _p_mopo__FormantManagerTo_p_mopo__ProcessorRouter, 0, 0},  {&_swigt__p_mopo__VoiceHandler, _p_mopo__VoiceHandlerTo_p_mopo__ProcessorRouter, 0, 0},  {&_swigt__p_mopo__BypassRouter, _p_mopo__BypassRouterTo_p_mopo__ProcessorRouter, 0, 0},  {&_swigt__p_mopo__TickRouter, _p_mopo__TickRouterTo_p_mopo__ProcessorRouter, 0, 0},  {&_swigt__p_mopo__Reverb, _p_mopo__ReverbTo_p_mopo__ProcessorRouter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__ResonanceLookup[] = {  {&_swigt__p_mopo__ResonanceLookup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__ResonanceLookupSingleton[] = {  {&_swigt__p_mopo__ResonanceLookupSingleton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__ResonanceScale[] = {  {&_swigt__p_mopo__ResonanceScale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Reverb[] = {  {&_swigt__p_mopo__Reverb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__ReverbAllPass[] = {  {&_swigt__p_mopo__ReverbAllPass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__ReverbComb[] = {  {&_swigt__p_mopo__ReverbComb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__SampleAndHoldBuffer[] = {  {&_swigt__p_mopo__SampleAndHoldBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__SimpleDelay[] = {  {&_swigt__p_mopo__SimpleDelay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__SmoothFilter[] = {  {&_swigt__p_mopo__SmoothFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__SmoothValue[] = {  {&_swigt__p_mopo__SmoothValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Square[] = {  {&_swigt__p_mopo__Square, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__StateVariableFilter[] = {  {&_swigt__p_mopo__StateVariableFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__StepGenerator[] = {  {&_swigt__p_mopo__StepGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Stutter[] = {  {&_swigt__p_mopo__Stutter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Subtract[] = {  {&_swigt__p_mopo__Subtract, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__TickRouter[] = {  {&_swigt__p_mopo__TickRouter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__TimeToSamples[] = {  {&_swigt__p_mopo__TimeToSamples, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__TriggerCombiner[] = {  {&_swigt__p_mopo__TriggerCombiner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__TriggerEquals[] = {  {&_swigt__p_mopo__TriggerEquals, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__TriggerFilter[] = {  {&_swigt__p_mopo__TriggerFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__TriggerNonZero[] = {  {&_swigt__p_mopo__TriggerNonZero, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__TriggerWait[] = {  {&_swigt__p_mopo__TriggerWait, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Value[] = {  {&_swigt__p_mopo__SmoothValue, _p_mopo__SmoothValueTo_p_mopo__Value, 0, 0},  {&_swigt__p_mopo__cr__SmoothValue, _p_mopo__cr__SmoothValueTo_p_mopo__Value, 0, 0},  {&_swigt__p_mopo__Value, 0, 0, 0},  {&_swigt__p_mopo__cr__Value, _p_mopo__cr__ValueTo_p_mopo__Value, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__VariableAdd[] = {  {&_swigt__p_mopo__VariableAdd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Voice[] = {  {&_swigt__p_mopo__Voice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__VoiceHandler[] = {  {&_swigt__p_mopo__VoiceHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__VoiceState[] = {  {&_swigt__p_mopo__VoiceState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__Wave[] = {  {&_swigt__p_mopo__Wave, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__WaveLookup[] = {  {&_swigt__p_mopo__WaveLookup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo__cr__Value[] = {  {&_swigt__p_mopo__cr__SmoothValue, _p_mopo__cr__SmoothValueTo_p_mopo__cr__Value, 0, 0},  {&_swigt__p_mopo__cr__Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mopo_float[] = {  {&_swigt__p_mopo_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_mopo_float_t[] = {  {&_swigt__p_std__complexT_mopo_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_mopo_float_mopo_float_t[] = {  {&_swigt__p_std__pairT_mopo_float_mopo_float_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CircularQueueT_mopo_float_t,
  _swigc__p_VoiceEvent,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_mopo__Add,
  _swigc__p_mopo__Alias,
  _swigc__p_mopo__Arpeggiator,
  _swigc__p_mopo__BilinearInterpolate,
  _swigc__p_mopo__BiquadFilter,
  _swigc__p_mopo__BitCrush,
  _swigc__p_mopo__Bypass,
  _swigc__p_mopo__BypassRouter,
  _swigc__p_mopo__CircularQueueT_double_t,
  _swigc__p_mopo__Clamp,
  _swigc__p_mopo__Delay,
  _swigc__p_mopo__Distortion,
  _swigc__p_mopo__Envelope,
  _swigc__p_mopo__ExponentialScale,
  _swigc__p_mopo__Feedback,
  _swigc__p_mopo__FormantManager,
  _swigc__p_mopo__FrequencyToPhase,
  _swigc__p_mopo__FrequencyToSamples,
  _swigc__p_mopo__Input,
  _swigc__p_mopo__Interpolate,
  _swigc__p_mopo__Inverse,
  _swigc__p_mopo__LegatoFilter,
  _swigc__p_mopo__LinearScale,
  _swigc__p_mopo__LinearSlope,
  _swigc__p_mopo__LinearSmoothBuffer,
  _swigc__p_mopo__MagnitudeLookup,
  _swigc__p_mopo__MagnitudeLookupSingleton,
  _swigc__p_mopo__MagnitudeScale,
  _swigc__p_mopo__Memory,
  _swigc__p_mopo__MidiLookup,
  _swigc__p_mopo__MidiLookupSingleton,
  _swigc__p_mopo__MidiScale,
  _swigc__p_mopo__MonoPanner,
  _swigc__p_mopo__Multiply,
  _swigc__p_mopo__Negate,
  _swigc__p_mopo__NoteHandler,
  _swigc__p_mopo__Operator,
  _swigc__p_mopo__Oscillator,
  _swigc__p_mopo__Output,
  _swigc__p_mopo__PortamentoFilter,
  _swigc__p_mopo__PortamentoSlope,
  _swigc__p_mopo__Processor,
  _swigc__p_mopo__ProcessorRouter,
  _swigc__p_mopo__ResonanceLookup,
  _swigc__p_mopo__ResonanceLookupSingleton,
  _swigc__p_mopo__ResonanceScale,
  _swigc__p_mopo__Reverb,
  _swigc__p_mopo__ReverbAllPass,
  _swigc__p_mopo__ReverbComb,
  _swigc__p_mopo__SampleAndHoldBuffer,
  _swigc__p_mopo__SimpleDelay,
  _swigc__p_mopo__SmoothFilter,
  _swigc__p_mopo__SmoothValue,
  _swigc__p_mopo__Square,
  _swigc__p_mopo__StateVariableFilter,
  _swigc__p_mopo__StepGenerator,
  _swigc__p_mopo__Stutter,
  _swigc__p_mopo__Subtract,
  _swigc__p_mopo__TickRouter,
  _swigc__p_mopo__TimeToSamples,
  _swigc__p_mopo__TriggerCombiner,
  _swigc__p_mopo__TriggerEquals,
  _swigc__p_mopo__TriggerFilter,
  _swigc__p_mopo__TriggerNonZero,
  _swigc__p_mopo__TriggerWait,
  _swigc__p_mopo__Value,
  _swigc__p_mopo__VariableAdd,
  _swigc__p_mopo__Voice,
  _swigc__p_mopo__VoiceHandler,
  _swigc__p_mopo__VoiceState,
  _swigc__p_mopo__Wave,
  _swigc__p_mopo__WaveLookup,
  _swigc__p_mopo__cr__Add,
  _swigc__p_mopo__cr__Bypass,
  _swigc__p_mopo__cr__Clamp,
  _swigc__p_mopo__cr__ExponentialScale,
  _swigc__p_mopo__cr__Feedback,
  _swigc__p_mopo__cr__FrequencyToPhase,
  _swigc__p_mopo__cr__FrequencyToSamples,
  _swigc__p_mopo__cr__Interpolate,
  _swigc__p_mopo__cr__LowerBound,
  _swigc__p_mopo__cr__MagnitudeScale,
  _swigc__p_mopo__cr__MidiScale,
  _swigc__p_mopo__cr__Multiply,
  _swigc__p_mopo__cr__Output,
  _swigc__p_mopo__cr__Quadratic,
  _swigc__p_mopo__cr__ResonanceScale,
  _swigc__p_mopo__cr__Root,
  _swigc__p_mopo__cr__SmoothFilter,
  _swigc__p_mopo__cr__SmoothValue,
  _swigc__p_mopo__cr__Square,
  _swigc__p_mopo__cr__TimeToSamples,
  _swigc__p_mopo__cr__UpperBound,
  _swigc__p_mopo__cr__Value,
  _swigc__p_mopo__cr__VariableAdd,
  _swigc__p_mopo_float,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_mopo_float_t,
  _swigc__p_std__pairT_mopo_float_mopo_float_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

